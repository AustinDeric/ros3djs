!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=41)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(39));t.default=Object.assign({},r)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SceneNode=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r};t.SceneNode=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));e=e||{};var r=n;n.tfClient=e.tfClient,n.frameID=e.frameID;var i=e.object;return n.pose=e.pose||new ROSLIB.Pose,n.visible=!1,n.add(i),n.updatePose(n.pose),n.tfUpdate=function(e){var t=new ROSLIB.Transform(e),n=new ROSLIB.Pose(r.pose);n.applyTransform(t),r.updatePose(n),r.visible=!0},n.tfClient.subscribe(n.frameID,n.tfUpdate),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Object3D),i(t,[{key:"updatePose",value:function(e){this.position.set(e.position.x,e.position.y,e.position.z),this.quaternion.set(e.orientation.x,e.orientation.y,e.orientation.z,e.orientation.w),this.updateMatrixWorld(!0)}},{key:"unsubscribeTf",value:function(){this.tfClient.unsubscribe(this.frameID,this.tfUpdate)}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.closestAxisPoint=t.findClosestPoint=t.intersectPlane=t.makeColorMaterial=t.INTERACTIVE_MARKER_VIEW_FACING=t.INTERACTIVE_MARKER_FIXED=t.INTERACTIVE_MARKER_INHERIT=t.INTERACTIVE_MARKER_MOVE_ROTATE=t.INTERACTIVE_MARKER_ROTATE_AXIS=t.INTERACTIVE_MARKER_MOVE_PLANE=t.INTERACTIVE_MARKER_MOVE_AXIS=t.INTERACTIVE_MARKER_BUTTON=t.INTERACTIVE_MARKER_MENU=t.INTERACTIVE_MARKER_NONE=t.INTERACTIVE_MARKER_MOUSE_UP=t.INTERACTIVE_MARKER_MOUSE_DOWN=t.INTERACTIVE_MARKER_BUTTON_CLICK=t.INTERACTIVE_MARKER_MENU_SELECT=t.INTERACTIVE_MARKER_POSE_UPDATE=t.INTERACTIVE_MARKER_KEEP_ALIVE=t.MARKER_TRIANGLE_LIST=t.MARKER_MESH_RESOURCE=t.MARKER_TEXT_VIEW_FACING=t.MARKER_POINTS=t.MARKER_SPHERE_LIST=t.MARKER_CUBE_LIST=t.MARKER_LINE_LIST=t.MARKER_LINE_STRIP=t.MARKER_CYLINDER=t.MARKER_SPHERE=t.MARKER_CUBE=t.MARKER_ARROW=t.REVISION=void 0;var r,i=n(0),o=(r=i)&&r.__esModule?r:{default:r};t.REVISION="0.18.0",t.MARKER_ARROW=0,t.MARKER_CUBE=1,t.MARKER_SPHERE=2,t.MARKER_CYLINDER=3,t.MARKER_LINE_STRIP=4,t.MARKER_LINE_LIST=5,t.MARKER_CUBE_LIST=6,t.MARKER_SPHERE_LIST=7,t.MARKER_POINTS=8,t.MARKER_TEXT_VIEW_FACING=9,t.MARKER_MESH_RESOURCE=10,t.MARKER_TRIANGLE_LIST=11,t.INTERACTIVE_MARKER_KEEP_ALIVE=0,t.INTERACTIVE_MARKER_POSE_UPDATE=1,t.INTERACTIVE_MARKER_MENU_SELECT=2,t.INTERACTIVE_MARKER_BUTTON_CLICK=3,t.INTERACTIVE_MARKER_MOUSE_DOWN=4,t.INTERACTIVE_MARKER_MOUSE_UP=5,t.INTERACTIVE_MARKER_NONE=0,t.INTERACTIVE_MARKER_MENU=1,t.INTERACTIVE_MARKER_BUTTON=2,t.INTERACTIVE_MARKER_MOVE_AXIS=3,t.INTERACTIVE_MARKER_MOVE_PLANE=4,t.INTERACTIVE_MARKER_ROTATE_AXIS=5,t.INTERACTIVE_MARKER_MOVE_ROTATE=6,t.INTERACTIVE_MARKER_INHERIT=0,t.INTERACTIVE_MARKER_FIXED=1,t.INTERACTIVE_MARKER_VIEW_FACING=2,t.makeColorMaterial=function(e,t,n,r){var i=new o.default.Color;return i.setRGB(e,t,n),r<=.99?new o.default.MeshBasicMaterial({color:i.getHex(),opacity:r+.1,transparent:!0,depthWrite:!0,blendSrc:o.default.SrcAlphaFactor,blendDst:o.default.OneMinusSrcAlphaFactor,blendEquation:o.default.ReverseSubtractEquation,blending:o.default.NormalBlending}):new o.default.MeshPhongMaterial({color:i.getHex(),opacity:r,blending:o.default.NormalBlending})},t.intersectPlane=function(e,t,n){var r=new o.default.Vector3,i=new o.default.Vector3;r.subVectors(t,e.origin);var a=e.direction.dot(n);if(!(Math.abs(a)<e.precision)){var s=n.dot(r)/a;return i.addVectors(e.origin,e.direction.clone().multiplyScalar(s)),i}};var a=t.findClosestPoint=function(e,t){var n=new o.default.Vector3;n.subVectors(e.origin,t.origin);var r=t.direction.clone(),i=e.direction.clone(),a=n.dot(r),s=r.dot(i),c=n.dot(i),u=r.dot(r),l=i.dot(i)*u-s*s;if(!(Math.abs(l)<=1e-4))return(a*s-c*u)/l};t.closestAxisPoint=function(e,t,n){var r=e.origin.clone();r.project(t);var i=e.direction.clone().add(e.origin);i.project(t);var s=i.clone().sub(r),c=(new o.default.Vector2).subVectors(n,r).dot(s)/s.dot(s),u=new o.default.Vector2;u.addVectors(r,s.clone().multiplyScalar(c));var l=new o.default.Vector3(u.x,u.y,.5);l.unproject(t);var h=new o.default.Ray(t.position,l.sub(t.position).normalize());return a(e,h)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Arrow=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r};t.Arrow=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=(e=e||{}).origin||new a.default.Vector3(0,0,0),r=e.direction||new a.default.Vector3(1,0,0),i=e.length||1,o=e.headLength||.2,s=e.shaftDiameter||.05,c=e.headDiameter||.1,u=e.material||new a.default.MeshBasicMaterial,l=i-o,h=new a.default.CylinderGeometry(.5*s,.5*s,l,12,1),d=new a.default.Matrix4;d.setPosition(new a.default.Vector3(0,.5*l,0)),h.applyMatrix(d);var p=new a.default.CylinderGeometry(0,.5*c,o,12,1);d.setPosition(new a.default.Vector3(0,l+.5*o,0)),p.applyMatrix(d),h.merge(p);var f=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,h,u));return f.position.copy(n),f.setDirection(r),f}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Mesh),i(t,[{key:"setDirection",value:function(e){var t=new a.default.Vector3(0,1,0).cross(e),n=Math.acos(new a.default.Vector3(0,1,0).dot(e.clone().normalize()));this.matrix=(new a.default.Matrix4).makeRotationAxis(t.normalize(),n),this.rotation.setFromRotationMatrix(this.matrix,this.rotation.order)}},{key:"setLength",value:function(e){this.scale.set(e,e,e)}},{key:"setColor",value:function(e){this.material.color.setHex(e)}},{key:"dispose",value:function(){void 0!==this.geometry&&this.geometry.dispose(),void 0!==this.material&&this.material.dispose()}}]),t}()},function(e,t,n){var r;
/*!
 * EventEmitter2
 * https://github.com/hij1nx/EventEmitter2
 *
 * Copyright (c) 2013 hij1nx
 * Licensed under the MIT license.
 */!function(i){var o=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},a=10;function s(){this._events={},this._conf&&c.call(this,this._conf)}function c(e){e?(this._conf=e,e.delimiter&&(this.delimiter=e.delimiter),this._events.maxListeners=e.maxListeners!==i?e.maxListeners:a,e.wildcard&&(this.wildcard=e.wildcard),e.newListener&&(this.newListener=e.newListener),e.verboseMemoryLeak&&(this.verboseMemoryLeak=e.verboseMemoryLeak),this.wildcard&&(this.listenerTree={})):this._events.maxListeners=a}function u(e,t){var n="(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.";this.verboseMemoryLeak?(n+=" Event name: %s.",console.error(n,e,t)):console.error(n,e),console.trace&&console.trace()}function l(e){this._events={},this.newListener=!1,this.verboseMemoryLeak=!1,c.call(this,e)}function h(e,t,n,r){if(!n)return[];var i,o,a,s,c,u,l,d=[],p=t.length,f=t[r],m=t[r+1];if(r===p&&n._listeners){if("function"==typeof n._listeners)return e&&e.push(n._listeners),[n];for(i=0,o=n._listeners.length;i<o;i++)e&&e.push(n._listeners[i]);return[n]}if("*"===f||"**"===f||n[f]){if("*"===f){for(a in n)"_listeners"!==a&&n.hasOwnProperty(a)&&(d=d.concat(h(e,t,n[a],r+1)));return d}if("**"===f){for(a in(l=r+1===p||r+2===p&&"*"===m)&&n._listeners&&(d=d.concat(h(e,t,n,p))),n)"_listeners"!==a&&n.hasOwnProperty(a)&&("*"===a||"**"===a?(n[a]._listeners&&!l&&(d=d.concat(h(e,t,n[a],p))),d=d.concat(h(e,t,n[a],r))):d=a===m?d.concat(h(e,t,n[a],r+2)):d.concat(h(e,t,n[a],r)));return d}d=d.concat(h(e,t,n[f],r+1))}if((s=n["*"])&&h(e,t,s,r+1),c=n["**"])if(r<p)for(a in c._listeners&&h(e,t,c,p),c)"_listeners"!==a&&c.hasOwnProperty(a)&&(a===m?h(e,t,c[a],r+2):a===f?h(e,t,c[a],r+1):((u={})[a]=c[a],h(e,t,{"**":u},r+1)));else c._listeners?h(e,t,c,p):c["*"]&&c["*"]._listeners&&h(e,t,c["*"],p);return d}l.EventEmitter2=l,l.prototype.delimiter=".",l.prototype.setMaxListeners=function(e){e!==i&&(this._events||s.call(this),this._events.maxListeners=e,this._conf||(this._conf={}),this._conf.maxListeners=e)},l.prototype.event="",l.prototype.once=function(e,t){return this.many(e,1,t),this},l.prototype.many=function(e,t,n){var r=this;if("function"!=typeof n)throw new Error("many only accepts instances of Function");function i(){0==--t&&r.off(e,i),n.apply(this,arguments)}return i._origin=n,this.on(e,i),r},l.prototype.emit=function(){this._events||s.call(this);var e=arguments[0];if("newListener"===e&&!this.newListener&&!this._events.newListener)return!1;var t,n,r,i,o,a=arguments.length;if(this._all&&this._all.length){if(o=this._all.slice(),a>3)for(t=new Array(a),i=0;i<a;i++)t[i]=arguments[i];for(r=0,n=o.length;r<n;r++)switch(this.event=e,a){case 1:o[r].call(this,e);break;case 2:o[r].call(this,e,arguments[1]);break;case 3:o[r].call(this,e,arguments[1],arguments[2]);break;default:o[r].apply(this,t)}}if(this.wildcard){o=[];var c="string"==typeof e?e.split(this.delimiter):e.slice();h.call(this,o,c,this.listenerTree,0)}else{if("function"==typeof(o=this._events[e])){switch(this.event=e,a){case 1:o.call(this);break;case 2:o.call(this,arguments[1]);break;case 3:o.call(this,arguments[1],arguments[2]);break;default:for(t=new Array(a-1),i=1;i<a;i++)t[i-1]=arguments[i];o.apply(this,t)}return!0}o&&(o=o.slice())}if(o&&o.length){if(a>3)for(t=new Array(a-1),i=1;i<a;i++)t[i-1]=arguments[i];for(r=0,n=o.length;r<n;r++)switch(this.event=e,a){case 1:o[r].call(this);break;case 2:o[r].call(this,arguments[1]);break;case 3:o[r].call(this,arguments[1],arguments[2]);break;default:o[r].apply(this,t)}return!0}if(!this._all&&"error"===e)throw arguments[1]instanceof Error?arguments[1]:new Error("Uncaught, unspecified 'error' event.");return!!this._all},l.prototype.emitAsync=function(){this._events||s.call(this);var e=arguments[0];if("newListener"===e&&!this.newListener&&!this._events.newListener)return Promise.resolve([!1]);var t,n,r,i,o,a=[],c=arguments.length;if(this._all){if(c>3)for(t=new Array(c),i=1;i<c;i++)t[i]=arguments[i];for(r=0,n=this._all.length;r<n;r++)switch(this.event=e,c){case 1:a.push(this._all[r].call(this,e));break;case 2:a.push(this._all[r].call(this,e,arguments[1]));break;case 3:a.push(this._all[r].call(this,e,arguments[1],arguments[2]));break;default:a.push(this._all[r].apply(this,t))}}if(this.wildcard){o=[];var u="string"==typeof e?e.split(this.delimiter):e.slice();h.call(this,o,u,this.listenerTree,0)}else o=this._events[e];if("function"==typeof o)switch(this.event=e,c){case 1:a.push(o.call(this));break;case 2:a.push(o.call(this,arguments[1]));break;case 3:a.push(o.call(this,arguments[1],arguments[2]));break;default:for(t=new Array(c-1),i=1;i<c;i++)t[i-1]=arguments[i];a.push(o.apply(this,t))}else if(o&&o.length){if(c>3)for(t=new Array(c-1),i=1;i<c;i++)t[i-1]=arguments[i];for(r=0,n=o.length;r<n;r++)switch(this.event=e,c){case 1:a.push(o[r].call(this));break;case 2:a.push(o[r].call(this,arguments[1]));break;case 3:a.push(o[r].call(this,arguments[1],arguments[2]));break;default:a.push(o[r].apply(this,t))}}else if(!this._all&&"error"===e)return arguments[1]instanceof Error?Promise.reject(arguments[1]):Promise.reject("Uncaught, unspecified 'error' event.");return Promise.all(a)},l.prototype.on=function(e,t){if("function"==typeof e)return this.onAny(e),this;if("function"!=typeof t)throw new Error("on only accepts instances of Function");return this._events||s.call(this),this.emit("newListener",e,t),this.wildcard?(function(e,t){for(var n=0,r=(e="string"==typeof e?e.split(this.delimiter):e.slice()).length;n+1<r;n++)if("**"===e[n]&&"**"===e[n+1])return;for(var o=this.listenerTree,a=e.shift();a!==i;){if(o[a]||(o[a]={}),o=o[a],0===e.length)return o._listeners?("function"==typeof o._listeners&&(o._listeners=[o._listeners]),o._listeners.push(t),!o._listeners.warned&&this._events.maxListeners>0&&o._listeners.length>this._events.maxListeners&&(o._listeners.warned=!0,u.call(this,o._listeners.length,a))):o._listeners=t,!0;a=e.shift()}return!0}.call(this,e,t),this):(this._events[e]?("function"==typeof this._events[e]&&(this._events[e]=[this._events[e]]),this._events[e].push(t),!this._events[e].warned&&this._events.maxListeners>0&&this._events[e].length>this._events.maxListeners&&(this._events[e].warned=!0,u.call(this,this._events[e].length,e))):this._events[e]=t,this)},l.prototype.onAny=function(e){if("function"!=typeof e)throw new Error("onAny only accepts instances of Function");return this._all||(this._all=[]),this._all.push(e),this},l.prototype.addListener=l.prototype.on,l.prototype.off=function(e,t){if("function"!=typeof t)throw new Error("removeListener only takes instances of Function");var n,r=[];if(this.wildcard){var a="string"==typeof e?e.split(this.delimiter):e.slice();r=h.call(this,null,a,this.listenerTree,0)}else{if(!this._events[e])return this;n=this._events[e],r.push({_listeners:n})}for(var s=0;s<r.length;s++){var c=r[s];if(n=c._listeners,o(n)){for(var u=-1,l=0,d=n.length;l<d;l++)if(n[l]===t||n[l].listener&&n[l].listener===t||n[l]._origin&&n[l]._origin===t){u=l;break}if(u<0)continue;return this.wildcard?c._listeners.splice(u,1):this._events[e].splice(u,1),0===n.length&&(this.wildcard?delete c._listeners:delete this._events[e]),this.emit("removeListener",e,t),this}(n===t||n.listener&&n.listener===t||n._origin&&n._origin===t)&&(this.wildcard?delete c._listeners:delete this._events[e],this.emit("removeListener",e,t))}return function e(t){if(t!==i){var n=Object.keys(t);for(var r in n){var o=n[r],a=t[o];a instanceof Function||"object"!=typeof a||null===a||(Object.keys(a).length>0&&e(t[o]),0===Object.keys(a).length&&delete t[o])}}}(this.listenerTree),this},l.prototype.offAny=function(e){var t,n=0,r=0;if(e&&this._all&&this._all.length>0){for(n=0,r=(t=this._all).length;n<r;n++)if(e===t[n])return t.splice(n,1),this.emit("removeListenerAny",e),this}else{for(n=0,r=(t=this._all).length;n<r;n++)this.emit("removeListenerAny",t[n]);this._all=[]}return this},l.prototype.removeListener=l.prototype.off,l.prototype.removeAllListeners=function(e){if(0===arguments.length)return!this._events||s.call(this),this;if(this.wildcard)for(var t="string"==typeof e?e.split(this.delimiter):e.slice(),n=h.call(this,null,t,this.listenerTree,0),r=0;r<n.length;r++){n[r]._listeners=null}else this._events&&(this._events[e]=null);return this},l.prototype.listeners=function(e){if(this.wildcard){var t=[],n="string"==typeof e?e.split(this.delimiter):e.slice();return h.call(this,t,n,this.listenerTree,0),t}return this._events||s.call(this),this._events[e]||(this._events[e]=[]),o(this._events[e])||(this._events[e]=[this._events[e]]),this._events[e]},l.prototype.listenerCount=function(e){return this.listeners(e).length},l.prototype.listenersAny=function(){return this._all?this._all:[]},(r=function(){return l}.call(t,n,t,e))===i||(e.exports=r)}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Marker=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r},s=n(2),c=n(3),u=n(7),l=n(16);t.Marker=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),r=(e=e||{}).path||"/",i=e.message;"/"!==r.substr(r.length-1)&&(r+="/"),i.scale?n.msgScale=[i.scale.x,i.scale.y,i.scale.z]:n.msgScale=[1,1,1],n.msgColor=i.color,n.msgMesh=void 0,n.setPose(i.pose);var o=(0,s.makeColorMaterial)(n.msgColor.r,n.msgColor.g,n.msgColor.b,n.msgColor.a);switch(i.type){case s.MARKER_ARROW:var h,d=i.scale.x,p=.23*d,f=i.scale.y,m=.5*f,v=null;if(2===i.points.length){v=new a.default.Vector3(i.points[0].x,i.points[0].y,i.points[0].z);var g=new a.default.Vector3(i.points[1].x,i.points[1].y,i.points[1].z);d=(h=v.clone().negate().add(g)).length(),f=i.scale.y,m=i.scale.x,0!==i.scale.z&&(p=i.scale.z)}n.add(new c.Arrow({direction:h,origin:v,length:d,headLength:p,shaftDiameter:m,headDiameter:f,material:o}));break;case s.MARKER_CUBE:var y=new a.default.BoxGeometry(i.scale.x,i.scale.y,i.scale.z);n.add(new a.default.Mesh(y,o));break;case s.MARKER_SPHERE:var b=new a.default.SphereGeometry(.5),x=new a.default.Mesh(b,o);x.scale.x=i.scale.x,x.scale.y=i.scale.y,x.scale.z=i.scale.z,n.add(x);break;case s.MARKER_CYLINDER:var _=new a.default.CylinderGeometry(.5,.5,1,16,1,!1),w=new a.default.Mesh(_,o);w.quaternion.setFromAxisAngle(new a.default.Vector3(1,0,0),.5*Math.PI),w.scale.set(i.scale.x,i.scale.z,i.scale.y),n.add(w);break;case s.MARKER_LINE_STRIP:var E,M=new a.default.Geometry,T=new a.default.LineBasicMaterial({size:i.scale.x});for(E=0;E<i.points.length;E++){var S=new a.default.Vector3;S.x=i.points[E].x,S.y=i.points[E].y,S.z=i.points[E].z,M.vertices.push(S)}if(i.colors.length===i.points.length)for(T.vertexColors=!0,E=0;E<i.points.length;E++){var A=new a.default.Color;A.setRGB(i.colors[E].r,i.colors[E].g,i.colors[E].b),M.colors.push(A)}else T.color.setRGB(i.color.r,i.color.g,i.color.b);n.add(new a.default.Line(M,T));break;case s.MARKER_LINE_LIST:var R,P=new a.default.Geometry,L=new a.default.LineBasicMaterial({size:i.scale.x});for(R=0;R<i.points.length;R++){var C=new a.default.Vector3;C.x=i.points[R].x,C.y=i.points[R].y,C.z=i.points[R].z,P.vertices.push(C)}if(i.colors.length===i.points.length)for(L.vertexColors=!0,R=0;R<i.points.length;R++){var O=new a.default.Color;O.setRGB(i.colors[R].r,i.colors[R].g,i.colors[R].b),P.colors.push(O)}else L.color.setRGB(i.color.r,i.color.g,i.color.b);n.add(new a.default.Line(P,L,a.default.LinePieces));break;case s.MARKER_CUBE_LIST:var I,N,D,U,k=new a.default.Object3D,B=i.points.length,F=B===i.colors.length,j=Math.ceil(B/1250);for(I=0;I<B;I+=j)N=new a.default.BoxGeometry(i.scale.x,i.scale.y,i.scale.z),D=F?(0,s.makeColorMaterial)(i.colors[I].r,i.colors[I].g,i.colors[I].b,i.colors[I].a):o,(U=new a.default.Mesh(N,D)).position.x=i.points[I].x,U.position.y=i.points[I].y,U.position.z=i.points[I].z,k.add(U);n.add(k);break;case s.MARKER_SPHERE_LIST:var z,G,V,H,W=new a.default.Object3D,X=i.points.length,q=X===i.colors.length,Y=Math.ceil(X/1250);for(z=0;z<X;z+=Y)G=new a.default.SphereGeometry(.5,8,8),V=q?(0,s.makeColorMaterial)(i.colors[z].r,i.colors[z].g,i.colors[z].b,i.colors[z].a):o,(H=new a.default.Mesh(G,V)).scale.x=i.scale.x,H.scale.y=i.scale.y,H.scale.z=i.scale.z,H.position.x=i.points[z].x,H.position.y=i.points[z].y,H.position.z=i.points[z].z,W.add(H);n.add(W);break;case s.MARKER_POINTS:var K,Z=new a.default.Geometry,Q=new a.default.ParticleBasicMaterial({size:i.scale.x});for(K=0;K<i.points.length;K++){var J=new a.default.Vector3;J.x=i.points[K].x,J.y=i.points[K].y,J.z=i.points[K].z,Z.vertices.push(J)}if(i.colors.length===i.points.length)for(Q.vertexColors=!0,K=0;K<i.points.length;K++){var $=new a.default.Color;$.setRGB(i.colors[K].r,i.colors[K].g,i.colors[K].b),Z.colors.push($)}else Q.color.setRGB(i.color.r,i.color.g,i.color.b);n.add(new a.default.ParticleSystem(Z,Q));break;case s.MARKER_TEXT_VIEW_FACING:if(i.text.length>0){var ee=n.msgColor,te=document.createElement("canvas"),ne=te.getContext("2d");ne.font="normal 100px sans-serif";var re=ne.measureText(i.text).width;te.width=re,te.height=150,ne.font="normal 100px sans-serif",ne.fillStyle="rgba("+Math.round(255*ee.r)+", "+Math.round(255*ee.g)+", "+Math.round(255*ee.b)+", "+ee.a+")",ne.textAlign="left",ne.textBaseline="middle",ne.fillText(i.text,0,te.height/2);var ie=new a.default.Texture(te);ie.needsUpdate=!0;var oe=new a.default.SpriteMaterial({map:ie,useScreenCoordinates:!1}),ae=new a.default.Sprite(oe),se=i.scale.x;ae.scale.set(re/te.height*se,se,1),n.add(ae)}break;case s.MARKER_MESH_RESOURCE:var ce=null;0===i.color.r&&0===i.color.g&&0===i.color.b&&0===i.color.a||(ce=o),n.msgMesh=i.mesh_resource.substr(10);var ue=new u.MeshResource({path:r,resource:n.msgMesh,material:ce});n.add(ue);break;case s.MARKER_TRIANGLE_LIST:var le=new l.TriangleList({material:o,vertices:i.points,colors:i.colors});le.scale.set(i.scale.x,i.scale.y,i.scale.z),n.add(le);break;default:console.error("Currently unsupported marker type: "+i.type)}return n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Object3D),i(t,[{key:"setPose",value:function(e){this.position.x=e.position.x,this.position.y=e.position.y,this.position.z=e.position.z,this.quaternion.set(e.orientation.x,e.orientation.y,e.orientation.z,e.orientation.w),this.quaternion.normalize(),this.updateMatrixWorld()}},{key:"update",value:function(e){if(this.setPose(e.pose),e.color.r!==this.msgColor.r||e.color.g!==this.msgColor.g||e.color.b!==this.msgColor.b||e.color.a!==this.msgColor.a){var t=(0,s.makeColorMaterial)(e.color.r,e.color.g,e.color.b,e.color.a);switch(e.type){case s.MARKER_LINE_STRIP:case s.MARKER_LINE_LIST:case s.MARKER_POINTS:break;case s.MARKER_ARROW:case s.MARKER_CUBE:case s.MARKER_SPHERE:case s.MARKER_CYLINDER:case s.MARKER_TRIANGLE_LIST:case s.MARKER_TEXT_VIEW_FACING:this.traverse(function(e){e instanceof a.default.Mesh&&(e.material=t)});break;case s.MARKER_MESH_RESOURCE:var n=null;0===e.color.r&&0===e.color.g&&0===e.color.b&&0===e.color.a||(n=this.colorMaterial),this.traverse(function(e){e instanceof a.default.Mesh&&(e.material=n)});break;case s.MARKER_CUBE_LIST:case s.MARKER_SPHERE_LIST:default:return!1}this.msgColor=e.color}var r=Math.abs(this.msgScale[0]-e.scale.x)>1e-6||Math.abs(this.msgScale[1]-e.scale.y)>1e-6||Math.abs(this.msgScale[2]-e.scale.z)>1e-6;switch(this.msgScale=[e.scale.x,e.scale.y,e.scale.z],e.type){case s.MARKER_CUBE:case s.MARKER_SPHERE:case s.MARKER_CYLINDER:if(r)return!1;break;case s.MARKER_TEXT_VIEW_FACING:if(r||this.text!==e.text)return!1;break;case s.MARKER_MESH_RESOURCE:if(e.mesh_resource.substr(10)!==this.msgMesh)return!1;if(r)return!1;break;case s.MARKER_ARROW:case s.MARKER_LINE_STRIP:case s.MARKER_LINE_LIST:case s.MARKER_CUBE_LIST:case s.MARKER_SPHERE_LIST:case s.MARKER_POINTS:case s.MARKER_TRIANGLE_LIST:return!1}return!0}},{key:"dispose",value:function(){this.children.forEach(function(e){e instanceof u.MeshResource?e.children.forEach(function(t){void 0!==t.material&&t.material.dispose(),t.children.forEach(function(e){void 0!==e.geometry&&e.geometry.dispose(),void 0!==e.material&&e.material.dispose(),t.remove(e)}),e.remove(t)}):(void 0!==e.geometry&&e.geometry.dispose(),void 0!==e.material&&e.material.dispose()),e.parent.remove(e)})}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Particles=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r},s=n(1);t.Particles=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));e=e||{},n.tfClient=e.tfClient;var r=e.texture||"https://upload.wikimedia.org/wikipedia/commons/a/a2/Pixel-white.png",i=e.size||.05;n.max_pts=e.max_pts||1e4,n.first_size=null,n.prev_pts=0,n.rootObject=e.rootObject||new a.default.Object3D;n.vertex_shader=["attribute vec3 customColor;","attribute float alpha;","varying vec3 vColor;","varying float falpha;","void main() ","{","    vColor = customColor; // set color associated to vertex; use later in fragment shader","    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );","    falpha = alpha; ","","    // option (1): draw particles at constant size on screen","    // gl_PointSize = size;","    // option (2): scale particles as objects in 3D space","    gl_PointSize = ",i,"* ( 300.0 / length( mvPosition.xyz ) );","    gl_Position = projectionMatrix * mvPosition;","}"].join("\n"),n.fragment_shader=["uniform sampler2D texture;","varying vec3 vColor; // colors associated to vertices; assigned by vertex shader","varying float falpha;","void main() ","{","    // THREE.Material.alphaTest is not evaluated for ShaderMaterial, so we","    // have to take care of this ourselves.","    if (falpha < 0.5) discard;","    // calculates a color for the particle","    gl_FragColor = vec4( vColor, falpha );","    // sets particle texture to desired color","    gl_FragColor = gl_FragColor * texture2D( texture, gl_PointCoord );","}"].join("\n"),n.geom=new a.default.Geometry;for(var o=0;o<n.max_pts;o++)n.geom.vertices.push(new a.default.Vector3);var s={texture:{type:"t",value:a.default.ImageUtils.loadTexture(r)}};return n.attribs={customColor:{type:"c",value:[]},alpha:{type:"f",value:[]}},n.shaderMaterial=new a.default.ShaderMaterial({uniforms:s,attributes:n.attribs,vertexShader:n.vertex_shader,fragmentShader:n.fragment_shader,transparent:!0}),n.ps=new a.default.ParticleSystem(n.geom,n.shaderMaterial),n.sn=null,n.points=n.geom.vertices,n.colors=n.attribs.customColor.value,n.alpha=n.attribs.alpha.value,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Object3D),i(t,[{key:"setFrame",value:function(e,t){null===e.sn&&(e.sn=new s.SceneNode({frameID:t,tfClient:e.tfClient,object:e.ps}),e.rootObject.add(e.sn))}},{key:"finishedUpdate",value:function(e,t){null===e.first_size&&(e.first_size=t,e.max_pts=Math.max(e.max_pts,t));for(var n=t;n<e.prev_pts;n++)e.alpha[n]=0;e.prev_pts=t,e.geom.verticesNeedUpdate=!0,e.attribs.customColor.needsUpdate=!0,e.attribs.alpha.needsUpdate=!0,t>e.max_pts&&console.error("Attempted to draw more points than max_pts allows")}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MeshResource=void 0;var r,i=n(0),o=(r=i)&&r.__esModule?r:{default:r};n(37),n(36);t.MeshResource=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),r=n,i=(e=e||{}).path||"/",a=e.resource,s=e.material||null;n.warnings=e.warnings,"/"!==i.substr(i.length-1)&&(i+="/");var c,u=i+a,l=u.substr(-4).toLowerCase();return".dae"===l?((c=new o.default.ColladaLoader).log=function(e){r.warnings&&console.warn(e)},c.load(u,function(e){null!==s&&e.scene.traverse(function(e){e instanceof o.default.Mesh&&void 0===e.material&&(e.material=s)}),r.add(e.scene)})):".stl"===l&&(c=new o.default.STLLoader).load(u,function(e){var t;e.computeFaceNormals(),t=null!==s?new o.default.Mesh(e,s):new o.default.Mesh(e,new o.default.MeshBasicMaterial({color:10066329})),r.add(t)}),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Object3D),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OrbitControls=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r},s=n(13);t.OrbitControls=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),r=n,i=(e=e||{}).scene;n.camera=e.camera,n.center=new a.default.Vector3,n.userZoom=!0,n.userZoomSpeed=e.userZoomSpeed||1,n.userRotate=!0,n.userRotateSpeed=e.userRotateSpeed||1,n.autoRotate=e.autoRotate,n.autoRotateSpeed=e.autoRotateSpeed||2,n.camera.up=new a.default.Vector3(0,0,1);var o=1800,c=10,u=new a.default.Vector2,l=new a.default.Vector2,h=new a.default.Vector2,d=new a.default.Vector2,p=new a.default.Vector2,f=new a.default.Vector2,m=new a.default.Vector3,v=new a.default.Vector3,g=new a.default.Vector3,y=new a.default.Vector3,b=new Array(2),x=new Array(2);n.phiDelta=0,n.thetaDelta=0,n.scale=1,n.lastPosition=new a.default.Vector3;var _={NONE:-1,ROTATE:0,ZOOM:1,MOVE:2},w=_.NONE;function E(e,t,n){var r=new a.default.Vector3;new a.default.Vector3;r.subVectors(t,e.origin);var i=e.direction.dot(n);if(Math.abs(i)<e.precision)return null;var o=n.dot(r)/i;return e.direction.clone().multiplyScalar(o)}function M(e){if(r.userZoom){var t=e.domEvent;(void 0!==t.wheelDelta?t.wheelDelta:-t.detail)>0?r.zoomIn():r.zoomOut(),this.showAxes()}}return n.axes=new s.Axes({shaftRadius:.025,headRadius:.07,headLength:.2}),i.add(n.axes),n.axes.traverse(function(e){e.visible=!1}),n.addEventListener("mousedown",function(e){var t=e.domEvent;switch(t.preventDefault(),t.button){case 0:w=_.ROTATE,u.set(t.clientX,t.clientY);break;case 1:w=_.MOVE,v=new a.default.Vector3(0,0,1);var n=(new a.default.Matrix4).extractRotation(this.camera.matrix);v.applyMatrix4(n),m=r.center.clone(),g=r.camera.position.clone(),y=E(e.mouseRay,m,v);break;case 2:w=_.ZOOM,d.set(t.clientX,t.clientY)}this.showAxes()}),n.addEventListener("mouseup",function(e){r.userRotate&&(w=_.NONE)}),n.addEventListener("mousemove",function(e){var t=e.domEvent;if(w===_.ROTATE)l.set(t.clientX,t.clientY),h.subVectors(l,u),r.rotateLeft(2*Math.PI*h.x/o*r.userRotateSpeed),r.rotateUp(2*Math.PI*h.y/o*r.userRotateSpeed),u.copy(l),this.showAxes();else if(w===_.ZOOM)p.set(t.clientX,t.clientY),f.subVectors(p,d),f.y>0?r.zoomIn():r.zoomOut(),d.copy(p),this.showAxes();else if(w===_.MOVE){var n=E(e.mouseRay,r.center,v);if(!n)return;var i=(new a.default.Vector3).subVectors(y.clone(),n.clone());r.center.addVectors(m.clone(),i.clone()),r.camera.position.addVectors(g.clone(),i.clone()),r.update(),r.camera.updateMatrixWorld(),this.showAxes()}}),n.addEventListener("touchstart",function(e){var t=e.domEvent;switch(t.touches.length){case 1:w=_.ROTATE,u.set(t.touches[0].pageX-window.scrollX,t.touches[0].pageY-window.scrollY);break;case 2:w=_.NONE,v=new a.default.Vector3(0,0,1);var n=(new a.default.Matrix4).extractRotation(this.camera.matrix);v.applyMatrix4(n),m=r.center.clone(),g=r.camera.position.clone(),y=E(e.mouseRay,m,v),b[0]=new a.default.Vector2(t.touches[0].pageX,t.touches[0].pageY),b[1]=new a.default.Vector2(t.touches[1].pageX,t.touches[1].pageY),x[0]=new a.default.Vector2(0,0),x[1]=new a.default.Vector2(0,0)}this.showAxes(),t.preventDefault()}),n.addEventListener("touchmove",function(e){var t=e.domEvent;if(w===_.ROTATE)l.set(t.touches[0].pageX-window.scrollX,t.touches[0].pageY-window.scrollY),h.subVectors(l,u),r.rotateLeft(2*Math.PI*h.x/o*r.userRotateSpeed),r.rotateUp(2*Math.PI*h.y/o*r.userRotateSpeed),u.copy(l),this.showAxes();else{if(x[0].set(b[0].x-t.touches[0].pageX,b[0].y-t.touches[0].pageY),x[1].set(b[1].x-t.touches[1].pageX,b[1].y-t.touches[1].pageY),x[0].lengthSq()>c&&x[1].lengthSq()>c&&(b[0].set(t.touches[0].pageX,t.touches[0].pageY),b[1].set(t.touches[1].pageX,t.touches[1].pageY),x[0].dot(x[1])>0&&w!==_.ZOOM?w=_.MOVE:x[0].dot(x[1])<0&&w!==_.MOVE&&(w=_.ZOOM),w===_.ZOOM)){var n=new a.default.Vector2;n.subVectors(b[0],b[1]),x[0].dot(n)<0&&x[1].dot(n)>0?r.zoomOut():x[0].dot(n)>0&&x[1].dot(n)<0&&r.zoomIn()}if(w===_.MOVE){var i=E(e.mouseRay,r.center,v);if(!i)return;var s=(new a.default.Vector3).subVectors(y.clone(),i.clone());r.center.addVectors(m.clone(),s.clone()),r.camera.position.addVectors(g.clone(),s.clone()),r.update(),r.camera.updateMatrixWorld()}this.showAxes(),t.preventDefault()}}),n.addEventListener("touchend",function(e){var t=e.domEvent;1===t.touches.length&&w!==_.ROTATE?(w=_.ROTATE,u.set(t.touches[0].pageX-window.scrollX,t.touches[0].pageY-window.scrollY)):w=_.NONE}),n.addEventListener("mousewheel",M),n.addEventListener("DOMMouseScroll",M),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.EventDispatcher),i(t,[{key:"showAxes",value:function(){var e=this;this.axes.traverse(function(e){e.visible=!0}),this.hideTimeout&&clearTimeout(this.hideTimeout),this.hideTimeout=setTimeout(function(){e.axes.traverse(function(e){e.visible=!1}),e.hideTimeout=!1},1e3)}},{key:"rotateLeft",value:function(e){void 0===e&&(e=2*Math.PI/60/60*this.autoRotateSpeed),this.thetaDelta-=e}},{key:"rotateRight",value:function(e){void 0===e&&(e=2*Math.PI/60/60*this.autoRotateSpeed),this.thetaDelta+=e}},{key:"rotateUp",value:function(e){void 0===e&&(e=2*Math.PI/60/60*this.autoRotateSpeed),this.phiDelta-=e}},{key:"rotateDown",value:function(e){void 0===e&&(e=2*Math.PI/60/60*this.autoRotateSpeed),this.phiDelta+=e}},{key:"zoomIn",value:function(e){void 0===e&&(e=Math.pow(.95,this.userZoomSpeed)),this.scale/=e}},{key:"zoomOut",value:function(e){void 0===e&&(e=Math.pow(.95,this.userZoomSpeed)),this.scale*=e}},{key:"update",value:function(){var e=this.camera.position,t=e.clone().sub(this.center),n=Math.atan2(t.y,t.x),r=Math.atan2(Math.sqrt(t.y*t.y+t.x*t.x),t.z);this.autoRotate&&this.rotateLeft(2*Math.PI/60/60*this.autoRotateSpeed),n+=this.thetaDelta,r+=this.phiDelta;r=Math.max(1e-6,Math.min(Math.PI-1e-6,r));var i=t.length();t.set(i*Math.sin(r)*Math.cos(n),i*Math.sin(r)*Math.sin(n),i*Math.cos(r)),t.multiplyScalar(this.scale),e.copy(this.center).add(t),this.camera.lookAt(this.center),i=t.length(),this.axes.position.copy(this.center),this.axes.scale.set(.05*i,.05*i,.05*i),this.axes.updateMatrixWorld(!0),this.thetaDelta=0,this.phiDelta=0,this.scale=1,this.lastPosition.distanceTo(this.camera.position)>0&&(this.dispatchEvent({type:"change"}),this.lastPosition.copy(this.camera.position))}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MouseHandler=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r};t.MouseHandler=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));n.renderer=e.renderer,n.camera=e.camera,n.rootObject=e.rootObject,n.fallbackTarget=e.fallbackTarget,n.lastTarget=n.fallbackTarget,n.dragging=!1;return n.listeners={},["contextmenu","click","dblclick","mouseout","mousedown","mouseup","mousemove","mousewheel","DOMMouseScroll","touchstart","touchend","touchcancel","touchleave","touchmove"].forEach(function(e){this.listeners[e]=this.processDomEvent.bind(this),this.renderer.domElement.addEventListener(e,this.listeners[e],!1)},n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.EventDispatcher),i(t,[{key:"processDomEvent",value:function(e){e.preventDefault();var t,n,r=e.target,i=r.getBoundingClientRect();if(-1!==e.type.indexOf("touch")){t=0,n=0;for(var o=0;o<e.touches.length;++o)t+=e.touches[o].clientX,n+=e.touches[o].clientY;t/=e.touches.length,n/=e.touches.length}else t=e.clientX,n=e.clientY;var s=t-i.left-r.clientLeft+r.scrollLeft,c=n-i.top-r.clientTop+r.scrollTop,u=s/r.clientWidth*2-1,l=-c/r.clientHeight*2+1,h=new a.default.Vector3(u,l,.5);h.unproject(this.camera);var d=new a.default.Raycaster(this.camera.position.clone(),h.sub(this.camera.position).normalize());d.linePrecision=.001;var p=d.ray,f={mousePos:new a.default.Vector2(u,l),mouseRay:p,domEvent:e,camera:this.camera,intersection:this.lastIntersection};if("mouseout"===e.type)return this.dragging&&(this.notify(this.lastTarget,"mouseup",f),this.dragging=!1),this.notify(this.lastTarget,"mouseout",f),void(this.lastTarget=null);if("touchleave"===e.type||"touchend"===e.type)return this.dragging&&(this.notify(this.lastTarget,"mouseup",f),this.dragging=!1),this.notify(this.lastTarget,"touchend",f),void(this.lastTarget=null);if(this.dragging)return this.notify(this.lastTarget,e.type,f),void(("mouseup"===e.type&&2===e.button||"click"===e.type||"touchend"===e.type)&&(this.dragging=!1));r=this.lastTarget;var m;if((m=d.intersectObject(this.rootObject,!0)).length>0?(r=m[0].object,f.intersection=this.lastIntersection=m[0]):r=this.fallbackTarget,r!==this.lastTarget&&e.type.match(/mouse/)){var v=this.notify(r,"mouseover",f);0===v?this.notify(this.lastTarget,"mouseout",f):1===v&&(r=this.fallbackTarget)!==this.lastTarget&&(this.notify(r,"mouseover",f),this.notify(this.lastTarget,"mouseout",f))}r!==this.lastTarget&&e.type.match(/touch/)&&(this.notify(r,e.type,f)?(this.notify(this.lastTarget,"touchleave",f),this.notify(this.lastTarget,"touchend",f)):(r=this.fallbackTarget)!==this.lastTarget&&(this.notify(this.lastTarget,"touchmove",f),this.notify(this.lastTarget,"touchend",f)));this.notify(r,e.type,f),"mousedown"!==e.type&&"touchstart"!==e.type&&"touchmove"!==e.type||(this.dragging=!0),this.lastTarget=r}},{key:"notify",value:function(e,t,n){for(n.type=t,n.cancelBubble=!1,n.continueBubble=!1,n.stopPropagation=function(){n.cancelBubble=!0},n.continuePropagation=function(){n.continueBubble=!0},n.currentTarget=e;n.currentTarget;){if(n.currentTarget.dispatchEvent&&n.currentTarget.dispatchEvent instanceof Function){if(n.currentTarget.dispatchEvent(n),n.cancelBubble)return this.dispatchEvent(n),0;if(n.continueBubble)return 2}n.currentTarget=n.currentTarget.parent}return 1}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Highlighter=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r};t.Highlighter=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t=t||{},this.mouseHandler=t.mouseHandler,this.hoverObjs={},this.mouseHandler.addEventListener("mouseover",this.onMouseOver.bind(this)),this.mouseHandler.addEventListener("mouseout",this.onMouseOut.bind(this))}return i(e,[{key:"onMouseOver",value:function(e){this.hoverObjs[e.currentTarget.uuid]=e.currentTarget}},{key:"onMouseOut",value:function(e){var t=e.currentTarget.uuid;t in this.hoverObjs&&delete this.hoverObjs[t]}},{key:"renderHighlights",value:function(e,t,n){this.makeEverythingInvisible(e),this.makeHighlightedVisible(e);var r=e.overrideMaterial;e.overrideMaterial=new a.default.MeshBasicMaterial({fog:!1,opacity:.5,transparent:!0,depthTest:!0,depthWrite:!1,polygonOffset:!0,polygonOffsetUnits:-1,side:a.default.DoubleSide}),t.render(e,n),e.overrideMaterial=r,this.restoreVisibility(e)}},{key:"makeEverythingInvisible",value:function(e){e.traverse(function(e){(e instanceof a.default.Mesh||e instanceof a.default.Line||e instanceof a.default.Sprite)&&(e.previousVisibility=e.visible,e.visible=!1)})}},{key:"makeHighlightedVisible",value:function(e){var t=function(e){(e instanceof a.default.Mesh||e instanceof a.default.Line||e instanceof a.default.Sprite)&&(e.visible=!0)};for(var n in this.hoverObjs){var r=this.hoverObjs[n];r.visible=!0,r.traverse(t)}}},{key:"restoreVisibility",value:function(e){e.traverse(function(e){e.hasOwnProperty("previousVisibility")&&(e.visible=e.previousVisibility)}.bind(this))}}]),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Urdf=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r},s=n(2),c=n(7),u=n(1);t.Urdf=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=(e=e||{}).urdfModel,r=e.path||"/",i=e.tfClient,o=e.tfPrefix||"",l=e.loader,h=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),d=n.links;for(var p in d)for(var f=d[p],m=0;m<f.visuals.length;m++){var v=f.visuals[m];if(v&&v.geometry){var g=o+"/"+f.name,y=null;if(v.material&&v.material.color){var b=v.material&&v.material.color;y=(0,s.makeColorMaterial)(b.r,b.g,b.b,b.a)}if(v.geometry.type===ROSLIB.URDF_MESH){var x=v.geometry.filename,_=x.indexOf("package://");-1!==_&&(x=x.substr(_+"package://".length));var w=x.substr(-4).toLowerCase();if(".dae"===w||".stl"===w){var E=new c.MeshResource({path:r,resource:x,loader:l,material:y});f.visuals[m].geometry.scale&&E.scale.copy(v.geometry.scale);var M=new u.SceneNode({frameID:g,pose:v.origin,tfClient:i,object:E});h.add(M)}else console.warn("Could not load geometry mesh: "+x)}else{var T;switch(y||(y=(0,s.makeColorMaterial)(0,0,0,1)),v.geometry.type){case ROSLIB.URDF_BOX:var S=v.geometry.dimension,A=new a.default.BoxGeometry(S.x,S.y,S.z);T=new a.default.Mesh(A,y);break;case ROSLIB.URDF_CYLINDER:var R=v.geometry.radius,P=v.geometry.length,L=new a.default.CylinderGeometry(R,R,P,16,1,!1);(T=new a.default.Mesh(L,y)).quaternion.setFromAxisAngle(new a.default.Vector3(1,0,0),.5*Math.PI);break;case ROSLIB.URDF_SPHERE:var C=new a.default.SphereGeometry(v.geometry.radius,16);T=new a.default.Mesh(C,y)}var O=new u.SceneNode({frameID:g,pose:v.origin,tfClient:i,object:T});h.add(O)}}}return h}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Object3D),i(t,[{key:"unsubscribeTf",value:function(){this.children.forEach(function(e){"function"==typeof e.unsubscribeTf&&e.unsubscribeTf()})}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OccupancyGrid=void 0;var r,i=n(0),o=(r=i)&&r.__esModule?r:{default:r};t.OccupancyGrid=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=(e=e||{}).message,r=e.color||{r:255,g:255,b:255},i=e.opacity||1,a=n.info.width,s=n.info.height,c=new o.default.PlaneGeometry(a,s),u=document.createElement("canvas");u.width=a,u.height=s;for(var l=u.getContext("2d"),h=l.createImageData(a,s),d=0;d<s;d++)for(var p=0;p<a;p++){var f,m=p+(s-d-1)*a,v=n.data[m];f=100===v?0:0===v?255:127;var g=4*(p+d*a);h.data[g]=f*r.r/255,h.data[++g]=f*r.g/255,h.data[++g]=f*r.b/255,h.data[++g]=255}l.putImageData(h,0,0);var y=new o.default.Texture(u);y.needsUpdate=!0;var b=new o.default.MeshBasicMaterial({map:y,transparent:i<1,opacity:i});b.side=o.default.DoubleSide;var x=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,c,b));return x.quaternion=new o.default.Quaternion(n.info.origin.orientation.x,n.info.origin.orientation.y,n.info.origin.orientation.z,n.info.origin.orientation.w),x.position.x=a*n.info.resolution/2+n.info.origin.position.x,x.position.y=s*n.info.resolution/2+n.info.origin.position.y,x.position.z=n.info.origin.position.z,x.scale.x=n.info.resolution,x.scale.y=n.info.resolution,x}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Mesh),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Axes=void 0;var r,i=n(0),o=(r=i)&&r.__esModule?r:{default:r};t.Axes=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),r=n,i=(e=e||{}).shaftRadius||.008,a=e.headRadius||.023,s=e.headLength||.1;function c(e){var t=new o.default.Color;t.setRGB(e.x,e.y,e.z);var n=new o.default.MeshBasicMaterial({color:t.getHex()}),i=new o.default.Vector3;i.crossVectors(e,new o.default.Vector3(0,-1,0));var a=new o.default.Quaternion;a.setFromAxisAngle(i,.5*Math.PI);var s=new o.default.Mesh(r.headGeom,n);s.position.copy(e),s.position.multiplyScalar(.95),s.quaternion.copy(a),s.updateMatrix(),r.add(s);var c=new o.default.Mesh(r.lineGeom,n);c.position.copy(e),c.position.multiplyScalar(.45),c.quaternion.copy(a),c.updateMatrix(),r.add(c)}return n.lineGeom=new o.default.CylinderGeometry(i,i,1-s),n.headGeom=new o.default.CylinderGeometry(0,a,s),c(new o.default.Vector3(1,0,0)),c(new o.default.Vector3(0,1,0)),c(new o.default.Vector3(0,0,1)),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Object3D),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InteractiveMarkerHandle=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(4),a=(r=o)&&r.__esModule?r:{default:r},s=n(2);t.InteractiveMarkerHandle=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e=e||{},n.message=e.message,n.feedbackTopic=e.feedbackTopic,n.tfClient=e.tfClient,n.menuFontSize=e.menuFontSize||"0.8em",n.name=n.message.name,n.header=n.message.header,n.controls=n.message.controls,n.menuEntries=n.message.menu_entries,n.dragging=!1,n.timeoutHandle=null,n.tfTransform=new ROSLIB.Transform,n.pose=new ROSLIB.Pose,n.setPoseFromClientBound=n.setPoseFromClient.bind(n),n.onMouseDownBound=n.onMouseDown.bind(n),n.onMouseUpBound=n.onMouseUp.bind(n),n.onButtonClickBound=n.onButtonClick.bind(n),n.onMenuSelectBound=n.onMenuSelect.bind(n),n.setPoseFromServer(n.message.pose),n.tfUpdateBound=n.tfUpdate.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),i(t,[{key:"subscribeTf",value:function(){0===this.message.header.stamp.secs&&0===this.message.header.stamp.nsecs&&this.tfClient.subscribe(this.message.header.frame_id,this.tfUpdateBound)}},{key:"unsubscribeTf",value:function(){this.tfClient.unsubscribe(this.message.header.frame_id,this.tfUpdateBound)}},{key:"emitServerPoseUpdate",value:function(){var e=new ROSLIB.Pose(this.pose);e.applyTransform(this.tfTransform),this.emit("pose",e)}},{key:"setPoseFromServer",value:function(e){this.pose=new ROSLIB.Pose(e),this.emitServerPoseUpdate()}},{key:"tfUpdate",value:function(e){this.tfTransform=new ROSLIB.Transform(e),this.emitServerPoseUpdate()}},{key:"setPoseFromClient",value:function(e){this.pose=new ROSLIB.Pose(e);var t=this.tfTransform.clone();t.rotation.invert(),t.translation.multiplyQuaternion(t.rotation),t.translation.x*=-1,t.translation.y*=-1,t.translation.z*=-1,this.pose.applyTransform(t),this.sendFeedback(s.INTERACTIVE_MARKER_POSE_UPDATE,void 0,0,e.controlName),this.dragging&&(this.timeoutHandle&&clearTimeout(this.timeoutHandle),this.timeoutHandle=setTimeout(this.setPoseFromClient.bind(this,e),250))}},{key:"onButtonClick",value:function(e){this.sendFeedback(s.INTERACTIVE_MARKER_BUTTON_CLICK,e.clickPosition,0,e.controlName)}},{key:"onMouseDown",value:function(e){this.sendFeedback(s.INTERACTIVE_MARKER_MOUSE_DOWN,e.clickPosition,0,e.controlName),this.dragging=!0}},{key:"onMouseUp",value:function(e){this.sendFeedback(s.INTERACTIVE_MARKER_MOUSE_UP,e.clickPosition,0,e.controlName),this.dragging=!1,this.timeoutHandle&&clearTimeout(this.timeoutHandle)}},{key:"onMenuSelect",value:function(e){this.sendFeedback(s.INTERACTIVE_MARKER_MENU_SELECT,void 0,e.id,e.controlName)}},{key:"sendFeedback",value:function(e,t,n,r){var i=void 0!==t;t=t||{x:0,y:0,z:0};var o={header:this.header,client_id:this.clientID,marker_name:this.name,control_name:r,event_type:e,pose:this.pose,mouse_point:t,mouse_point_valid:i,menu_entry_id:n};this.feedbackTopic.publish(o)}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InteractiveMarkerMenu=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r};t.InteractiveMarkerMenu=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n,r,i,o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),a=o,s=(e=e||{}).menuEntries,c=e.className||"default-interactive-marker-menu",u=(e.entryClassName,e.overlayClassName||"default-interactive-marker-overlay"),l=e.menuFontSize||"0.8em",h=[];if(h[0]={children:[]},null===document.getElementById("default-interactive-marker-menu-css")){var d=document.createElement("style");d.id="default-interactive-marker-menu-css",d.type="text/css",d.innerHTML=".default-interactive-marker-menu {background-color: #444444;border: 1px solid #888888;border: 1px solid #888888;padding: 0px 0px 0px 0px;color: #FFFFFF;font-family: sans-serif;font-size: "+l+";z-index: 1002;}.default-interactive-marker-menu ul {padding: 0px 0px 5px 0px;margin: 0px;list-style-type: none;}.default-interactive-marker-menu ul li div {-webkit-touch-callout: none;-webkit-user-select: none;-khtml-user-select: none;-moz-user-select: none;-ms-user-select: none;user-select: none;cursor: default;padding: 3px 10px 3px 10px;}.default-interactive-marker-menu-entry:hover {  background-color: #666666;  cursor: pointer;}.default-interactive-marker-menu ul ul {  font-style: italic;  padding-left: 10px;}.default-interactive-marker-overlay {  position: absolute;  top: 0%;  left: 0%;  width: 100%;  height: 100%;  background-color: black;  z-index: 1001;  -moz-opacity: 0.0;  opacity: .0;  filter: alpha(opacity = 0);}",document.getElementsByTagName("head")[0].appendChild(d)}for(o.menuDomElem=document.createElement("div"),o.menuDomElem.style.position="absolute",o.menuDomElem.className=c,o.menuDomElem.addEventListener("contextmenu",function(e){e.preventDefault()}),o.overlayDomElem=document.createElement("div"),o.overlayDomElem.className=u,o.hideListener=o.hide.bind(o),o.overlayDomElem.addEventListener("contextmenu",o.hideListener),o.overlayDomElem.addEventListener("click",o.hideListener),o.overlayDomElem.addEventListener("touchstart",o.hideListener),n=0;n<s.length;n++)h[i=(r=s[n]).id]={title:r.title,id:i,children:[]};for(n=0;n<s.length;n++){var p=h[i=(r=s[n]).id];h[r.parent_id].children.push(p)}function f(e,t){this.dispatchEvent({type:"menu-select",domEvent:t,id:e.id,controlName:this.controlName}),this.hide(t)}return function e(t,n){var r=document.createElement("ul");t.appendChild(r);for(var i=n.children,o=0;o<i.length;o++){var s=document.createElement("li"),c=document.createElement("div");c.appendChild(document.createTextNode(i[o].title)),r.appendChild(s),s.appendChild(c),i[o].children.length>0?(e(s,i[o]),c.addEventListener("click",a.hide.bind(a)),c.addEventListener("touchstart",a.hide.bind(a))):(c.addEventListener("click",f.bind(a,i[o])),c.addEventListener("touchstart",f.bind(a,i[o])),c.className="default-interactive-marker-menu-entry")}}(o.menuDomElem,h[0]),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.EventDispatcher),i(t,[{key:"show",value:function(e,t){t&&t.preventDefault&&t.preventDefault(),this.controlName=e.name,void 0!==t.domEvent.changedTouches?(this.menuDomElem.style.left=t.domEvent.changedTouches[0].pageX+"px",this.menuDomElem.style.top=t.domEvent.changedTouches[0].pageY+"px"):(this.menuDomElem.style.left=t.domEvent.clientX+"px",this.menuDomElem.style.top=t.domEvent.clientY+"px"),document.body.appendChild(this.overlayDomElem),document.body.appendChild(this.menuDomElem)}},{key:"hide",value:function(e){e&&e.preventDefault&&e.preventDefault(),document.body.removeChild(this.overlayDomElem),document.body.removeChild(this.menuDomElem)}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TriangleList=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r};t.TriangleList=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=(e=e||{}).material||new a.default.MeshBasicMaterial,r=e.vertices,i=e.colors,o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));n.side=a.default.DoubleSide;var s,c,u=new a.default.Geometry;for(s=0;s<r.length;s++)u.vertices.push(new a.default.Vector3(r[s].x,r[s].y,r[s].z));if(i.length===r.length){for(s=0;s<r.length;s+=3){var l=new a.default.Face3(s,s+1,s+2);for(c=3*s;c<3*s+3;s++){var h=new a.default.Color;h.setRGB(i[s].r,i[s].g,i[s].b),l.vertexColors.push(h)}u.faces.push(l)}n.vertexColors=a.default.VertexColors}else if(i.length===r.length/3){for(s=0;s<r.length;s+=3){var d=new a.default.Face3(s,s+1,s+2);d.color.setRGB(i[s/3].r,i[s/3].g,i[s/3].b),u.faces.push(d)}n.vertexColors=a.default.FaceColors}else for(s=0;s<r.length;s+=3){var p=new a.default.Face3(s,s+1,s+2);u.faces.push(p)}return u.computeBoundingBox(),u.computeBoundingSphere(),u.computeFaceNormals(),o.add(new a.default.Mesh(u,n)),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Object3D),i(t,[{key:"setColor",value:function(e){this.mesh.material.color.setHex(e)}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InteractiveMarkerControl=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},a=n(0),s=(r=a)&&r.__esModule?r:{default:r},c=n(2),u=n(5);t.InteractiveMarkerControl=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),r=n;e=e||{},n.parent=e.parent;var i=e.handle,o=e.message;n.message=o,n.name=o.name,n.camera=e.camera,n.path=e.path||"/",n.loader=e.loader,n.dragging=!1,n.startMousePos=new s.default.Vector2;var a=new s.default.Quaternion(o.orientation.x,o.orientation.y,o.orientation.z,o.orientation.w);a.normalize();var l=new s.default.Vector3(1,0,0);switch(l.applyQuaternion(a),n.currentControlOri=new s.default.Quaternion,o.interaction_mode){case c.INTERACTIVE_MARKER_MOVE_AXIS:n.addEventListener("mousemove",n.parent.moveAxis.bind(n.parent,n,l)),n.addEventListener("touchmove",n.parent.moveAxis.bind(n.parent,n,l));break;case c.INTERACTIVE_MARKER_ROTATE_AXIS:n.addEventListener("mousemove",n.parent.rotateAxis.bind(n.parent,n,a));break;case c.INTERACTIVE_MARKER_MOVE_PLANE:n.addEventListener("mousemove",n.parent.movePlane.bind(n.parent,n,l));break;case c.INTERACTIVE_MARKER_BUTTON:n.addEventListener("click",n.parent.buttonClick.bind(n.parent,n))}function h(e){e.stopPropagation()}o.interaction_mode!==c.INTERACTIVE_MARKER_NONE&&(n.addEventListener("mousedown",n.parent.startDrag.bind(n.parent,n)),n.addEventListener("mouseup",n.parent.stopDrag.bind(n.parent,n)),n.addEventListener("contextmenu",n.parent.showMenu.bind(n.parent,n)),n.addEventListener("mouseup",function(e){0===r.startMousePos.distanceToSquared(e.mousePos)&&(e.type="contextmenu",r.dispatchEvent(e))}),n.addEventListener("mouseover",h),n.addEventListener("mouseout",h),n.addEventListener("click",h),n.addEventListener("mousedown",function(e){r.startMousePos=e.mousePos}),n.addEventListener("touchstart",function(e){1===e.domEvent.touches.length&&(e.type="mousedown",e.domEvent.button=0,r.dispatchEvent(e))}),n.addEventListener("touchmove",function(e){1===e.domEvent.touches.length&&(e.type="mousemove",e.domEvent.button=0,r.dispatchEvent(e))}),n.addEventListener("touchend",function(e){0===e.domEvent.touches.length&&(e.domEvent.button=0,e.type="mouseup",r.dispatchEvent(e),e.type="click",r.dispatchEvent(e))}));var d=new s.default.Quaternion,p=n.parent.position.clone().multiplyScalar(-1);switch(o.orientation_mode){case c.INTERACTIVE_MARKER_INHERIT:d=n.parent.quaternion.clone().inverse();break;case c.INTERACTIVE_MARKER_FIXED:case c.INTERACTIVE_MARKER_VIEW_FACING:break;default:console.error("Unkown orientation mode: "+o.orientation_mode)}var f=new ROSLIB.TFClient({ros:i.tfClient.ros,fixedFrame:i.message.header.frame_id,serverName:i.tfClient.serverName});return o.markers.forEach(function(e){var t=function(t){var n=new u.Marker({message:e,path:r.path,loader:r.loader});if(null!==t){var i=new ROSLIB.Pose({position:n.position,orientation:n.quaternion});i.applyTransform(new ROSLIB.Transform(t));var o=new u.Marker({message:e,path:r.path,loader:r.loader});o.position.add(p),o.position.applyQuaternion(d),o.quaternion.multiplyQuaternions(d,o.quaternion);var a=new s.default.Vector3(o.position.x,o.position.y,o.position.z),c=new ROSLIB.Transform({translation:a,orientation:o.quaternion});i.applyTransform(c),n.setPose(i),n.updateMatrixWorld(),f.unsubscribe(e.header.frame_id)}r.add(n)};""!==e.header.frame_id?f.subscribe(e.header.frame_id,t):t(null)}),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,s.default.Object3D),i(t,[{key:"updateMatrixWorld",value:function(e){var n=this.message;switch(n.orientation_mode){case c.INTERACTIVE_MARKER_INHERIT:o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"updateMatrixWorld",this).call(this,e),this.currentControlOri.copy(this.quaternion),this.currentControlOri.normalize();break;case c.INTERACTIVE_MARKER_FIXED:this.quaternion.copy(this.parent.quaternion.clone().inverse()),this.updateMatrix(),this.matrixWorldNeedsUpdate=!0,o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"updateMatrixWorld",this).call(this,e),this.currentControlOri.copy(this.quaternion);break;case c.INTERACTIVE_MARKER_VIEW_FACING:this.camera.updateMatrixWorld();var r=(new s.default.Matrix4).extractRotation(this.camera.matrixWorld),i=new s.default.Matrix4,a=.5*Math.PI,u=new s.default.Euler(-a,0,a);i.makeRotationFromEuler(u);var l=new s.default.Matrix4;l.getInverse(this.parent.matrixWorld),r.multiplyMatrices(r,i),r.multiplyMatrices(l,r),this.currentControlOri.setFromRotationMatrix(r),n.independent_marker_orientation||(this.quaternion.copy(this.currentControlOri),this.updateMatrix(),this.matrixWorldNeedsUpdate=!0),o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"updateMatrixWorld",this).call(this,e);break;default:console.error("Unkown orientation mode: "+n.orientation_mode)}}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InteractiveMarker=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r},s=n(17),c=n(15),u=n(2);t.InteractiveMarker=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),r=n,i=(e=e||{}).handle;n.name=i.name;var o=e.camera,u=e.path||"/",l=e.loader;return n.dragging=!1,n.onServerSetPose({pose:i.pose}),n.dragStart={position:new a.default.Vector3,orientation:new a.default.Quaternion,positionWorld:new a.default.Vector3,orientationWorld:new a.default.Quaternion,event3d:{}},i.controls.forEach(function(e){r.add(new s.InteractiveMarkerControl({parent:r,handle:i,message:e,camera:o,path:u,loader:l}))}),i.menuEntries.length>0&&(n.menu=new c.InteractiveMarkerMenu({menuEntries:i.menuEntries,menuFontSize:i.menuFontSize}),n.menu.addEventListener("menu-select",function(e){r.dispatchEvent(e)})),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Object3D),i(t,[{key:"showMenu",value:function(e,t){this.menu&&this.menu.show(e,t)}},{key:"moveAxis",value:function(e,t,n){if(this.dragging){var r=e.currentControlOri,i=t.clone().applyQuaternion(r),o=this.dragStart.event3d.intersection.point,s=i.clone().applyQuaternion(this.dragStart.orientationWorld.clone()),c=new a.default.Ray(o,s),l=(0,u.closestAxisPoint)(c,n.camera,n.mousePos),h=new a.default.Vector3;h.addVectors(this.dragStart.position,i.clone().applyQuaternion(this.dragStart.orientation).multiplyScalar(l)),this.setPosition(e,h),n.stopPropagation()}}},{key:"movePlane",value:function(e,t,n){if(this.dragging){var r=e.currentControlOri,i=t.clone().applyQuaternion(r),o=this.dragStart.event3d.intersection.point,s=i.clone().applyQuaternion(this.dragStart.orientationWorld),c=(0,u.intersectPlane)(n.mouseRay,o,s),l=new a.default.Vector3;l.subVectors(c,o),l.add(this.dragStart.positionWorld),this.setPosition(e,l),n.stopPropagation()}}},{key:"rotateAxis",value:function(e,t,n){if(this.dragging){e.updateMatrixWorld();var r=e.currentControlOri.clone().multiply(t.clone()),i=new a.default.Vector3(1,0,0).applyQuaternion(r),o=this.dragStart.event3d.intersection.point,s=i.applyQuaternion(this.dragStart.orientationWorld),c=(0,u.intersectPlane)(n.mouseRay,o,s),l=new a.default.Ray(this.dragStart.positionWorld,s),h=(0,u.intersectPlane)(l,o,s),d=this.dragStart.orientationWorld.clone().multiply(r).clone().inverse();c.sub(h),c.applyQuaternion(d);var p=this.dragStart.event3d.intersection.point.clone();p.sub(h),p.applyQuaternion(d);var f=Math.atan2(c.y,c.z),m=Math.atan2(p.y,p.z)-f,v=new a.default.Quaternion;v.setFromAxisAngle(i,m),this.setOrientation(e,v.multiply(this.dragStart.orientationWorld)),n.stopPropagation()}}},{key:"feedbackEvent",value:function(e,t){this.dispatchEvent({type:e,position:this.position.clone(),orientation:this.quaternion.clone(),controlName:t.name})}},{key:"startDrag",value:function(e,t){if(0===t.domEvent.button){t.stopPropagation(),this.dragging=!0,this.updateMatrixWorld(!0);var n=new a.default.Vector3;this.matrixWorld.decompose(this.dragStart.positionWorld,this.dragStart.orientationWorld,n),this.dragStart.position=this.position.clone(),this.dragStart.orientation=this.quaternion.clone(),this.dragStart.event3d=t,this.feedbackEvent("user-mousedown",e)}}},{key:"stopDrag",value:function(e,t){0===t.domEvent.button&&(t.stopPropagation(),this.dragging=!1,this.dragStart.event3d={},this.onServerSetPose(this.bufferedPoseEvent),this.bufferedPoseEvent=void 0,this.feedbackEvent("user-mouseup",e))}},{key:"buttonClick",value:function(e,t){t.stopPropagation(),this.feedbackEvent("user-button-click",e)}},{key:"setPosition",value:function(e,t){this.position.copy(t),this.feedbackEvent("user-pose-change",e)}},{key:"setOrientation",value:function(e,t){t.normalize(),this.quaternion.copy(t),this.feedbackEvent("user-pose-change",e)}},{key:"onServerSetPose",value:function(e){if(void 0!==e)if(this.dragging)this.bufferedPoseEvent=e;else{var t=e.pose;this.position.copy(t.position),this.quaternion.copy(t.orientation),this.updateMatrixWorld(!0)}}},{key:"dispose",value:function(){var e=this;this.children.forEach(function(t){t.children.forEach(function(e){e.dispose(),t.remove(e)}),e.remove(t)})}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Viewer=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r},s=n(8),c=n(9),u=n(10);t.Viewer=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var n=(t=t||{}).divID,r=t.width,i=t.height,o=t.background||"#111111",l=t.antialias,h=t.intensity||.66,d=t.near||.01,p=t.far||1e3,f=t.alpha||1,m=t.cameraPose||{x:3,y:3,z:3},v=t.cameraZoomSpeed||.5;this.renderer=new a.default.WebGLRenderer({antialias:l,alpha:!0}),this.renderer.setClearColor(parseInt(o.replace("#","0x"),16),f),this.renderer.sortObjects=!1,this.renderer.setSize(r,i),this.renderer.shadowMap.enabled=!1,this.renderer.autoClear=!1,this.scene=new a.default.Scene,this.camera=new a.default.PerspectiveCamera(40,r/i,d,p),this.camera.position.x=m.x,this.camera.position.y=m.y,this.camera.position.z=m.z,this.cameraControls=new s.OrbitControls({scene:this.scene,camera:this.camera}),this.cameraControls.userZoomSpeed=v,this.scene.add(new a.default.AmbientLight(5592405)),this.directionalLight=new a.default.DirectionalLight(16777215,h),this.scene.add(this.directionalLight),this.selectableObjects=new a.default.Object3D,this.scene.add(this.selectableObjects);var g=new c.MouseHandler({renderer:this.renderer,camera:this.camera,rootObject:this.selectableObjects,fallbackTarget:this.cameraControls});this.highlighter=new u.Highlighter({mouseHandler:g}),this.stopped=!0,this.animationRequestId=void 0,document.getElementById(n).appendChild(this.renderer.domElement),this.start()}return i(e,[{key:"start",value:function(){this.stopped=!1,this.draw()}},{key:"draw",value:function(){this.stopped||(this.cameraControls.update(),this.directionalLight.position.normalize(),this.renderer.clear(!0,!0,!0),this.renderer.render(this.scene,this.camera),this.highlighter.renderHighlights(this.scene,this.renderer,this.camera),this.animationRequestId=requestAnimationFrame(this.draw.bind(this)))}},{key:"stop",value:function(){this.stopped||cancelAnimationFrame(this.animationRequestId),this.stopped=!0}},{key:"addObject",value:function(e,t){t?this.selectableObjects.add(e):this.scene.add(e)}},{key:"resize",value:function(e,t){this.camera.aspect=e/t,this.camera.updateProjectionMatrix(),this.renderer.setSize(e,t)}}]),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UrdfClient=void 0;var r,i=n(0),o=(r=i)&&r.__esModule?r:{default:r},a=n(11);t.UrdfClient=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var n=this,r=(t=t||{}).ros;this.param=t.param||"robot_description",this.path=t.path||"/",this.tfClient=t.tfClient,this.rootObject=t.rootObject||new o.default.Object3D,this.tfPrefix=t.tfPrefix||"",this.loader=t.loader,new ROSLIB.Param({ros:r,name:this.param}).get(function(e){var t=new ROSLIB.UrdfModel({string:e});n.urdf=new a.Urdf({urdfModel:t,path:n.path,tfClient:n.tfClient,tfPrefix:n.tfPrefix,loader:n.loader}),n.rootObject.add(n.urdf)})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PointCloud2=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r},s=n(6);function c(e,t,n){for(var r=[],i=e.point_step*t,o=0;o<e.fields.length;o++){var a=i+e.fields[o].offset;"rgb"===e.fields[o].name?r.rgb=n.getInt32(a,1):r[e.fields[o].name]=n.getFloat32(a,1)}return r}var u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";t.PointCloud2=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e=e||{},n.ros=e.ros,n.topicName=e.topic||"/points",n.color=e.color,n.particles=new s.Particles(e),n.rosTopic=void 0,n.subscribe(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Object3D),i(t,[{key:"unsubscribe",value:function(){this.rosTopic&&this.rosTopic.unsubscribe()}},{key:"subscribe",value:function(){this.unsubscribe(),this.rosTopic=new ROSLIB.Topic({ros:this.ros,name:this.topicName,messageType:"sensor_msgs/PointCloud2"}),this.rosTopic.subscribe(this.processMessage.bind(this))}},{key:"processMessage",value:function(e){setFrame(this.particles,e.header.frame_id);var t,n=e.height*e.width;t=e.data.buffer?e.data.buffer.buffer:Uint8Array.from(function(e){for(var t=[],n=0,r=0,i=0,o=e.length;i<o;i++)n+=u.indexOf(e[i]),(r+=6)>=8&&(r-=8,t.push(n>>r),n&=Math.pow(2,r)-1),n<<=6;return t}(e.data)).buffer;var r,i=new DataView(t);void 0!==this.color&&(r=new a.default.Color(this.color));for(var o=0;o<n;o++){var s=c(e,o,i);this.particles.points[o]=new a.default.Vector3(s.x,s.y,s.z),this.particles.colors[o]=r||new a.default.Color(s.rgb),this.particles.alpha[o]=1}finishedUpdate(this.particles,n)}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LaserScan=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r},s=n(6);t.LaserScan=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e=e||{},n.ros=e.ros,n.topicName=e.topic||"/scan",n.color=e.color||16753920,n.particles=new s.Particles(e),n.rosTopic=void 0,n.subscribe(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Object3D),i(t,[{key:"unsubscribe",value:function(){this.rosTopic&&this.rosTopic.unsubscribe()}},{key:"subscribe",value:function(){this.unsubscribe(),this.rosTopic=new ROSLIB.Topic({ros:this.ros,name:this.topicName,messageType:"sensor_msgs/LaserScan"}),this.rosTopic.subscribe(this.processMessage.bind(this))}},{key:"processMessage",value:function(e){setFrame(this.particles,e.header.frame_id);for(var t=e.ranges.length,n=0;n<t;n++){var r=e.ranges[n];if(r<e.range_min||r>e.range_max)this.particles.alpha[n]=0;else{var i=e.angle_min+n*e.angle_increment;this.particles.points[n]=new a.default.Vector3(r*Math.cos(i),r*Math.sin(i),0),this.particles.alpha[n]=1}this.particles.colors[n]=new a.default.Color(this.color)}finishedUpdate(this.particles,t)}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PoseWithCovariance=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r},s=n(3),c=n(1);t.PoseWithCovariance=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n.options=e||{},n.ros=e.ros,n.topicName=e.topic||"/PoseWithCovariance",n.tfClient=e.tfClient,n.color=e.color||13369599,n.rootObject=e.rootObject||new a.default.Object3D,n.sn=null,n.rosTopic=void 0,n.subscribe(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Object3D),i(t,[{key:"unsubscribe",value:function(){this.rosTopic&&this.rosTopic.unsubscribe()}},{key:"subscribe",value:function(){this.unsubscribe(),this.rosTopic=new ROSLIB.Topic({ros:this.ros,name:this.topicName,messageType:"geometry_msgs/PoseWithCovarianceStamped"}),this.rosTopic.subscribe(this.processMessage.bind(this))}},{key:"processMessage",value:function(e){null!==this.sn&&(this.sn.unsubscribeTf(),this.rootObject.remove(this.sn)),this.options.origin=new a.default.Vector3(e.pose.pose.position.x,e.pose.pose.position.y,e.pose.pose.position.z);var t=new a.default.Quaternion(e.pose.pose.orientation.x,e.pose.pose.orientation.y,e.pose.pose.orientation.z,e.pose.pose.orientation.w);this.options.direction=new a.default.Vector3(1,0,0),this.options.direction.applyQuaternion(t),this.options.material=new a.default.MeshBasicMaterial({color:this.color});var n=new s.Arrow(this.options);this.sn=new c.SceneNode({frameID:e.header.frame_id,tfClient:this.tfClient,object:n}),this.rootObject.add(this.sn)}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PoseArray=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r},s=n(1);t.PoseArray=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n.options=e||{},n.ros=e.ros,n.topicName=e.topic||"/particlecloud",n.tfClient=e.tfClient,n.color=e.color||13369599,n.length=e.length||1,n.rootObject=e.rootObject||new a.default.Object3D,n.sn=null,n.rosTopic=void 0,n.subscribe(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Object3D),i(t,[{key:"unsubscribe",value:function(){this.rosTopic&&this.rosTopic.unsubscribe()}},{key:"subscribe",value:function(){this.unsubscribe(),this.rosTopic=new ROSLIB.Topic({ros:this.ros,name:this.topicName,messageType:"geometry_msgs/PoseArray"}),this.rosTopic.subscribe(this.processMessage.bind(this))}},{key:"processMessage",value:function(e){null!==this.sn&&(this.sn.unsubscribeTf(),this.rootObject.remove(this.sn));for(var t,n=new a.default.Object3D,r=0;r<e.poses.length;r++){var i=new a.default.Geometry,o=new a.default.Vector3(e.poses[r].position.x,e.poses[r].position.y,e.poses[r].position.z);i.vertices.push(o);var c=new a.default.Quaternion(e.poses[r].orientation.x,e.poses[r].orientation.y,e.poses[r].orientation.z,e.poses[r].orientation.w),u=new a.default.Vector3(this.length,0,0),l=new a.default.Vector3(.8*this.length,.2*this.length,0),h=new a.default.Vector3(.8*this.length,.2*-this.length,0);u.applyQuaternion(c),l.applyQuaternion(c),h.applyQuaternion(c),i.vertices.push(u.add(o)),i.vertices.push(l.add(o)),i.vertices.push(h.add(o)),i.vertices.push(u),i.computeLineDistances();var d=new a.default.LineBasicMaterial({color:this.color});t=new a.default.Line(i,d),n.add(t)}this.sn=new s.SceneNode({frameID:e.header.frame_id,tfClient:this.tfClient,object:n}),this.rootObject.add(this.sn)}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Pose=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r},s=n(3),c=n(1);t.Pose=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n.options=e||{},n.ros=e.ros,n.topicName=e.topic||"/pose",n.tfClient=e.tfClient,n.color=e.color||13369599,n.rootObject=e.rootObject||new a.default.Object3D,n.sn=null,n.rosTopic=void 0,n.subscribe(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Object3D),i(t,[{key:"unsubscribe",value:function(){this.rosTopic&&this.rosTopic.unsubscribe()}},{key:"subscribe",value:function(){this.unsubscribe(),this.rosTopic=new ROSLIB.Topic({ros:this.ros,name:this.topicName,messageType:"geometry_msgs/PoseStamped"}),this.rosTopic.subscribe(this.processMessage.bind(this))}},{key:"processMessage",value:function(e){null!==this.sn&&(this.sn.unsubscribeTf(),this.rootObject.remove(this.sn)),this.options.origin=new a.default.Vector3(e.pose.position.x,e.pose.position.y,e.pose.position.z);var t=new a.default.Quaternion(e.pose.orientation.x,e.pose.orientation.y,e.pose.orientation.z,e.pose.orientation.w);this.options.direction=new a.default.Vector3(1,0,0),this.options.direction.applyQuaternion(t),this.options.material=new a.default.MeshBasicMaterial({color:this.color});var n=new s.Arrow(this.options);this.sn=new c.SceneNode({frameID:e.header.frame_id,tfClient:this.tfClient,object:n}),this.rootObject.add(this.sn)}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Polygon=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r},s=n(1);t.Polygon=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e=e||{},n.ros=e.ros,n.topicName=e.topic||"/path",n.tfClient=e.tfClient,n.color=e.color||13369599,n.rootObject=e.rootObject||new a.default.Object3D,n.sn=null,n.line=null,n.rosTopic=void 0,n.subscribe(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Object3D),i(t,[{key:"unsubscribe",value:function(){this.rosTopic&&this.rosTopic.unsubscribe()}},{key:"subscribe",value:function(){this.unsubscribe(),this.rosTopic=new ROSLIB.Topic({ros:this.ros,name:this.topicName,messageType:"geometry_msgs/PolygonStamped"}),this.rosTopic.subscribe(this.processMessage.bind(this))}},{key:"processMessage",value:function(e){null!==this.sn&&(this.sn.unsubscribeTf(),this.rootObject.remove(this.sn));for(var t,n=new a.default.Geometry,r=0;r<e.polygon.points.length;r++)t=new a.default.Vector3(e.polygon.points[r].x,e.polygon.points[r].y,e.polygon.points[r].z),n.vertices.push(t);t=new a.default.Vector3(e.polygon.points[0].x,e.polygon.points[0].y,e.polygon.points[0].z),n.vertices.push(t),n.computeLineDistances();var i=new a.default.LineBasicMaterial({color:this.color}),o=new a.default.Line(n,i);this.sn=new s.SceneNode({frameID:e.header.frame_id,tfClient:this.tfClient,object:o}),this.rootObject.add(this.sn)}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Point=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r},s=n(1);t.Point=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n.options=e||{},n.ros=e.ros,n.topicName=e.topic||"/point",n.tfClient=e.tfClient,n.color=e.color||13369599,n.rootObject=e.rootObject||new a.default.Object3D,n.radius=e.radius||.2,n.sn=null,n.rosTopic=void 0,n.subscribe(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Object3D),i(t,[{key:"unsubscribe",value:function(){this.rosTopic&&this.rosTopic.unsubscribe()}},{key:"subscribe",value:function(){this.unsubscribe(),this.rosTopic=new ROSLIB.Topic({ros:this.ros,name:this.topicName,messageType:"geometry_msgs/PointStamped"}),this.rosTopic.subscribe(this.processMessage.bind(this))}},{key:"processMessage",value:function(e){null!==this.sn&&(this.sn.unsubscribeTf(),this.rootObject.remove(this.sn));var t=new a.default.SphereGeometry(this.radius),n=new a.default.MeshBasicMaterial({color:this.color}),r=new a.default.Mesh(t,n);r.position.set(e.point.x,e.point.y,e.point.z),this.sn=new s.SceneNode({frameID:e.header.frame_id,tfClient:this.tfClient,object:r}),this.rootObject.add(this.sn)}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Path=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r},s=n(1);t.Path=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e=e||{},n.ros=e.ros,n.topicName=e.topic||"/path",n.tfClient=e.tfClient,n.color=e.color||13369599,n.rootObject=e.rootObject||new a.default.Object3D,n.sn=null,n.line=null,n.rosTopic=void 0,n.subscribe(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Object3D),i(t,[{key:"unsubscribe",value:function(){this.rosTopic&&this.rosTopic.unsubscribe()}},{key:"subscribe",value:function(){this.unsubscribe(),this.rosTopic=new ROSLIB.Topic({ros:this.ros,name:this.topicName,messageType:"nav_msgs/Path"}),this.rosTopic.subscribe(this.processMessage.bind(this))}},{key:"processMessage",value:function(e){null!==this.sn&&(this.sn.unsubscribeTf(),this.rootObject.remove(this.sn));for(var t=new a.default.Geometry,n=0;n<e.poses.length;n++){var r=new a.default.Vector3(e.poses[n].pose.position.x,e.poses[n].pose.position.y,e.poses[n].pose.position.z);t.vertices.push(r)}t.computeLineDistances();var i=new a.default.LineBasicMaterial({color:this.color}),o=new a.default.Line(t,i);this.sn=new s.SceneNode({frameID:e.header.frame_id,tfClient:this.tfClient,object:o}),this.rootObject.add(this.sn)}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Odometry=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r},s=n(3),c=n(1);t.Odometry=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n.options=e||{},n.ros=e.ros,n.topicName=e.topic||"/particlecloud",n.tfClient=e.tfClient,n.color=e.color||13369599,n.length=e.length||1,n.rootObject=e.rootObject||new a.default.Object3D,n.keep=e.keep||1,n.sns=[],n.rosTopic=void 0,n.subscribe(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Object3D),i(t,[{key:"unsubscribe",value:function(){this.rosTopic&&this.rosTopic.unsubscribe()}},{key:"subscribe",value:function(){this.unsubscribe(),this.rosTopic=new ROSLIB.Topic({ros:this.ros,name:this.topicName,messageType:"nav_msgs/Odometry"}),this.rosTopic.subscribe(this.processMessage.bind(this))}},{key:"processMessage",value:function(e){this.sns.length>=this.keep&&(this.sns[0].unsubscribeTf(),this.rootObject.remove(this.sns[0]),this.sns.shift()),this.options.origin=new a.default.Vector3(e.pose.pose.position.x,e.pose.pose.position.y,e.pose.pose.position.z);var t=new a.default.Quaternion(e.pose.pose.orientation.x,e.pose.pose.orientation.y,e.pose.pose.orientation.z,e.pose.pose.orientation.w);this.options.direction=new a.default.Vector3(1,0,0),this.options.direction.applyQuaternion(t),this.options.material=new a.default.MeshBasicMaterial({color:this.color});var n=new s.Arrow(this.options);this.sns.push(new c.SceneNode({frameID:e.header.frame_id,tfClient:this.tfClient,object:n})),this.rootObject.add(this.sns[this.sns.length-1])}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OccupancyGridClient=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=c(n(4)),o=c(n(0)),a=n(12),s=n(1);function c(e){return e&&e.__esModule?e:{default:e}}t.OccupancyGridClient=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e=e||{},n.ros=e.ros,n.topicName=e.topic||"/map",n.continuous=e.continuous,n.tfClient=e.tfClient,n.rootObject=e.rootObject||new o.default.Object3D,n.offsetPose=e.offsetPose||new ROSLIB.Pose,n.color=e.color||{r:255,g:255,b:255},n.opacity=e.opacity||1,n.currentGrid=null,n.rosTopic=void 0,n.subscribe(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default),r(t,[{key:"unsubscribe",value:function(){this.rosTopic&&this.rosTopic.unsubscribe()}},{key:"subscribe",value:function(){this.unsubscribe(),this.rosTopic=new ROSLIB.Topic({ros:this.ros,name:this.topicName,messageType:"nav_msgs/OccupancyGrid",compression:"png"}),this.rosTopic.subscribe(this.processMessage.bind(this))}},{key:"processMessage",value:function(e){this.currentGrid&&(this.currentGrid.tfClient&&this.currentGrid.unsubscribeTf(),this.rootObject.remove(this.currentGrid));var t=new a.OccupancyGrid({message:e,color:this.color,opacity:this.opacity});this.tfClient?(this.currentGrid=t,this.sceneNode=new s.SceneNode({frameID:e.header.frame_id,tfClient:this.tfClient,object:t,pose:this.offsetPose})):this.sceneNode=this.currentGrid=t,this.rootObject.add(this.sceneNode),this.emit("change"),this.continuous||this.rosTopic.unsubscribe()}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Grid=void 0;var r,i=n(0),o=(r=i)&&r.__esModule?r:{default:r};t.Grid=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=(e=e||{}).num_cells||10,r=e.color||"#cccccc",i=e.lineWidth||1,a=e.cellSize||1,s=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),c=new o.default.LineBasicMaterial({color:r,linewidth:i}),u=0;u<=n;++u){var l=a*n/2,h=l-u*a,d=new o.default.Geometry;d.vertices.push(new o.default.Vector3(-l,h,0),new o.default.Vector3(l,h,0));var p=new o.default.Geometry;p.vertices.push(new o.default.Vector3(h,-l,0),new o.default.Vector3(h,l,0)),s.add(new o.default.Line(d,c)),s.add(new o.default.Line(p,c))}return s}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Object3D),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Arrow2=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r};t.Arrow2=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=(e=e||{}).origin||new a.default.Vector3(0,0,0),r=e.direction||new a.default.Vector3(1,0,0),i=e.length||1;e.headLength,e.shaftDiameter,e.headDiameter,e.material||new a.default.MeshBasicMaterial;return function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,r,n,i,16711680))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.ArrowHelper),i(t,[{key:"dispose",value:function(){void 0!==this.line&&(this.line.material.dispose(),this.line.geometry.dispose()),void 0!==this.cone&&(this.cone.material.dispose(),this.cone.geometry.dispose())}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MarkerClient=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=c(n(0)),o=c(n(4)),a=n(5),s=n(1);function c(e){return e&&e.__esModule?e:{default:e}}t.MarkerClient=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e=e||{},n.ros=e.ros,n.topicName=e.topic,n.tfClient=e.tfClient,n.rootObject=e.rootObject||new i.default.Object3D,n.path=e.path||"/",n.markers={},n.rosTopic=void 0,n.subscribe(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"unsubscribe",value:function(){this.rosTopic&&this.rosTopic.unsubscribe()}},{key:"subscribe",value:function(){this.unsubscribe(),this.rosTopic=new ROSLIB.Topic({ros:this.ros,name:this.topicName,messageType:"visualization_msgs/Marker",compression:"png"}),this.rosTopic.subscribe(this.processMessage.bind(this))}},{key:"processMessage",value:function(e){var t=new a.Marker({message:e,path:this.path}),n=this.markers[e.ns+e.id];n&&(n.unsubscribeTf(),this.rootObject.remove(n)),this.markers[e.ns+e.id]=new s.SceneNode({frameID:e.header.frame_id,tfClient:this.tfClient,object:t}),this.rootObject.add(this.markers[e.ns+e.id]),this.emit("change")}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MarkerArrayClient=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=c(n(0)),o=c(n(4)),a=n(5),s=n(1);function c(e){return e&&e.__esModule?e:{default:e}}t.MarkerArrayClient=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e=e||{},n.ros=e.ros,n.topicName=e.topic,n.tfClient=e.tfClient,n.rootObject=e.rootObject||new i.default.Object3D,n.path=e.path||"/",n.markers={},n.rosTopic=void 0,n.subscribe(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"subscribe",value:function(){this.unsubscribe(),this.rosTopic=new ROSLIB.Topic({ros:this.ros,name:this.topicName,messageType:"visualization_msgs/MarkerArray",compression:"png"}),this.rosTopic.subscribe(this.processMessage.bind(this))}},{key:"processMessage",value:function(e){e.markers.forEach(function(e){if(0===e.action){var t=!1;if(e.ns+e.id in this.markers&&((t=this.markers[e.ns+e.id].children[0].update(e))||(this.markers[e.ns+e.id].unsubscribeTf(),this.rootObject.remove(this.markers[e.ns+e.id]))),!t){var n=new a.Marker({message:e,path:this.path});this.markers[e.ns+e.id]=new s.SceneNode({frameID:e.header.frame_id,tfClient:this.tfClient,object:n}),this.rootObject.add(this.markers[e.ns+e.id])}}else if(1===e.action)console.warn('Received marker message with deprecated action identifier "1"');else if(2===e.action)this.markers[e.ns+e.id].unsubscribeTf(),this.rootObject.remove(this.markers[e.ns+e.id]),delete this.markers[e.ns+e.id];else if(3===e.action){for(var r in this.markers)this.markers[r].unsubscribeTf(),this.rootObject.remove(this.markers[r]);this.markers={}}else console.warn('Received marker message with unknown action identifier "'+e.action+'"')}.bind(this)),this.emit("change")}},{key:"unsubscribe",value:function(){this.rosTopic&&this.rosTopic.unsubscribe()}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InteractiveMarkerClient=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r},s=n(14),c=n(18);t.InteractiveMarkerClient=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);t=t||{},this.ros=t.ros,this.tfClient=t.tfClient,this.topicName=t.topic,this.path=t.path||"/",this.camera=t.camera,this.rootObject=t.rootObject||new a.default.Object3D,this.loader=t.loader,this.menuFontSize=t.menuFontSize||"0.8em",this.interactiveMarkers={},this.updateTopic=null,this.feedbackTopic=null,this.topicName&&this.subscribe(this.topicName)}return i(e,[{key:"subscribe",value:function(e){this.unsubscribe(),this.updateTopic=new ROSLIB.Topic({ros:this.ros,name:e+"/tunneled/update",messageType:"visualization_msgs/InteractiveMarkerUpdate",compression:"png"}),this.updateTopic.subscribe(this.processUpdate.bind(this)),this.feedbackTopic=new ROSLIB.Topic({ros:this.ros,name:e+"/feedback",messageType:"visualization_msgs/InteractiveMarkerFeedback",compression:"png"}),this.feedbackTopic.advertise(),this.initService=new ROSLIB.Service({ros:this.ros,name:e+"/tunneled/get_init",serviceType:"demo_interactive_markers/GetInit"});var t=new ROSLIB.ServiceRequest({});this.initService.callService(t,this.processInit.bind(this))}},{key:"unsubscribe",value:function(){for(var e in this.updateTopic&&this.updateTopic.unsubscribe(),this.feedbackTopic&&this.feedbackTopic.unadvertise(),this.interactiveMarkers)this.eraseIntMarker(e);this.interactiveMarkers={}}},{key:"processInit",value:function(e){var t=e.msg;for(var n in t.erases=[],this.interactiveMarkers)t.erases.push(n);t.poses=[],this.processUpdate(t)}},{key:"processUpdate",value:function(e){var t=this;e.erases.forEach(function(e){t.eraseIntMarker(e)}),e.poses.forEach(function(e){var n=t.interactiveMarkers[e.name];n&&n.setPoseFromServer(e.pose)}),e.markers.forEach(function(e){var n=t.interactiveMarkers[e.name];n&&t.eraseIntMarker(n.name);var r=new s.InteractiveMarkerHandle({message:e,feedbackTopic:t.feedbackTopic,tfClient:t.tfClient,menuFontSize:t.menuFontSize});t.interactiveMarkers[e.name]=r;var i=new c.InteractiveMarker({handle:r,camera:t.camera,path:t.path,loader:t.loader});i.name=e.name,t.rootObject.add(i),r.on("pose",function(e){i.onServerSetPose({pose:e})}),i.addEventListener("user-pose-change",r.setPoseFromClientBound),i.addEventListener("user-mousedown",r.onMouseDownBound),i.addEventListener("user-mouseup",r.onMouseUpBound),i.addEventListener("user-button-click",r.onButtonClickBound),i.addEventListener("menu-select",r.onMenuSelectBound),r.subscribeTf()})}},{key:"eraseIntMarker",value:function(e){if(this.interactiveMarkers[e]){var t=this.rootObject.getObjectByName(e);this.rootObject.remove(t);var n=this.interactiveMarkers[e];n.unsubscribeTf(),t.removeEventListener("user-pose-change",n.setPoseFromClientBound),t.removeEventListener("user-mousedown",n.onMouseDownBound),t.removeEventListener("user-mouseup",n.onMouseUpBound),t.removeEventListener("user-button-click",n.onButtonClickBound),t.removeEventListener("menu-select",n.onMenuSelectBound),delete this.interactiveMarkers[e],t.dispose()}}}]),e}()},function(e,t,n){"use strict";var r,i=n(0),o=(r=i)&&r.__esModule?r:{default:r};o.default.ColladaLoader=function(e){this.manager=void 0!==e?e:o.default.DefaultLoadingManager},o.default.ColladaLoader.prototype={constructor:o.default.ColladaLoader,crossOrigin:"Anonymous",load:function(e,t,n,r){var i=this,a=o.default.Loader.prototype.extractUrlBase(e);new o.default.FileLoader(i.manager).load(e,function(e){t(i.parse(e,a))},n,r)},options:{set convertUpAxis(e){console.warn("THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.")}},setCrossOrigin:function(e){this.crossOrigin=e},parse:function(e,t){function n(e,t){for(var n=[],r=e.childNodes,i=0,o=r.length;i<o;i++){var a=r[i];a.nodeName===t&&n.push(a)}return n}function r(e){if(0===e.length)return[];for(var t=e.trim().split(/\s+/),n=new Array(t.length),r=0,i=t.length;r<i;r++)n[r]=t[r];return n}function i(e){if(0===e.length)return[];for(var t=e.trim().split(/\s+/),n=new Array(t.length),r=0,i=t.length;r<i;r++)n[r]=parseFloat(t[r]);return n}function a(e){if(0===e.length)return[];for(var t=e.trim().split(/\s+/),n=new Array(t.length),r=0,i=t.length;r<i;r++)n[r]=parseInt(t[r]);return n}function s(e){return e.substring(1)}function c(e){return 0===Object.keys(e).length}function u(e,t,r,i){var o=n(e,t)[0];if(void 0!==o)for(var a=n(o,r),s=0;s<a.length;s++)i(a[s])}function l(e,t){for(var n in e){e[n].build=t(e[n])}}function h(e,t){return void 0!==e.build?e.build:(e.build=t(e),e.build)}function d(e){for(var t={inputs:{}},n=0,r=e.childNodes.length;n<r;n++){var i=e.childNodes[n];if(1===i.nodeType)switch(i.nodeName){case"input":var o=s(i.getAttribute("source")),a=i.getAttribute("semantic");t.inputs[a]=o}}return t}function p(e){var t={},n=e.getAttribute("target").split("/"),r=n.shift(),i=n.shift(),o=-1!==i.indexOf("("),a=-1!==i.indexOf(".");if(a)i=(n=i.split(".")).shift(),t.member=n.shift();else if(o){var c=i.split("(");i=c.shift();for(var u=0;u<c.length;u++)c[u]=parseInt(c[u].replace(/\)/,""));t.indices=c}return t.id=r,t.sid=i,t.arraySyntax=o,t.memberSyntax=a,t.sampler=s(e.getAttribute("source")),t}function f(e){var t=[],n=e.channels,r=e.samplers,i=e.sources;for(var o in n)if(n.hasOwnProperty(o)){var a=n[o],s=r[a.sampler],c=s.inputs.INPUT,u=s.inputs.OUTPUT;x(v(a,i[c],i[u]),t)}return t}function m(e){return h(Ue.animations[e],f)}function v(e,t,n){var r,i,o,a,s,c,u=Ue.nodes[e.id],l=Te(u.id),h=u.transforms[e.sid],d=u.matrix.clone().transpose(),p={};switch(h){case"matrix":for(o=0,a=t.array.length;o<a;o++)if(r=t.array[o],i=o*n.stride,void 0===p[r]&&(p[r]={}),!0===e.arraySyntax){var f=n.array[i],m=e.indices[0]+4*e.indices[1];p[r][m]=f}else for(s=0,c=n.stride;s<c;s++)p[r][s]=n.array[i+s];break;case"translate":case"rotate":case"scale":console.warn('THREE.ColladaLoader: Animation transform type "%s" not yet implemented.',h)}var v=function(e,t){var n=[];for(var r in e)n.push({time:parseFloat(r),value:e[r]});n.sort(function(e,t){return e.time-t.time});for(var i=0;i<16;i++)_(n,i,t.elements[i]);return n}(p,d);return{name:l.uuid,keyframes:v}}var g=new o.default.Vector3,y=new o.default.Vector3,b=new o.default.Quaternion;function x(e,t){for(var n=e.keyframes,r=e.name,i=[],a=[],s=[],c=[],u=0,l=n.length;u<l;u++){var h=n[u],d=h.time,p=h.value;ve.fromArray(p).transpose(),ve.decompose(g,b,y),i.push(d),a.push(g.x,g.y,g.z),s.push(b.x,b.y,b.z,b.w),c.push(y.x,y.y,y.z)}return a.length>0&&t.push(new o.default.VectorKeyframeTrack(r+".position",i,a)),s.length>0&&t.push(new o.default.QuaternionKeyframeTrack(r+".quaternion",i,s)),c.length>0&&t.push(new o.default.VectorKeyframeTrack(r+".scale",i,c)),t}function _(e,t,n){var r,i,o,a=!0;for(i=0,o=e.length;i<o;i++)void 0===(r=e[i]).value[t]?r.value[t]=null:a=!1;if(!0===a)for(i=0,o=e.length;i<o;i++)(r=e[i]).value[t]=n;else!function(e,t){for(var n,r,i=0,o=e.length;i<o;i++){var a=e[i];if(null===a.value[t]){if(n=w(e,i,t),r=E(e,i,t),null===n){a.value[t]=r.value[t];continue}if(null===r){a.value[t]=n.value[t];continue}M(a,n,r,t)}}}(e,t)}function w(e,t,n){for(;t>=0;){var r=e[t];if(null!==r.value[n])return r;t--}return null}function E(e,t,n){for(;t<e.length;){var r=e[t];if(null!==r.value[n])return r;t++}return null}function M(e,t,n,r){n.time-t.time!=0?e.value[r]=(e.time-t.time)*(n.value[r]-t.value[r])/(n.time-t.time)+t.value[r]:e.value[r]=t.value[r]}function T(e){for(var t=[],n=e.name,r=e.end-e.start||-1,i=e.animations,a=0,s=i.length;a<s;a++)for(var c=m(i[a]),u=0,l=c.length;u<l;u++)t.push(c[u]);return new o.default.AnimationClip(n,r,t)}function S(e){return h(Ue.clips[e],T)}function A(e){for(var t={sources:{}},n=0,r=e.childNodes.length;n<r;n++){var o=e.childNodes[n];if(1===o.nodeType)switch(o.nodeName){case"bind_shape_matrix":t.bindShapeMatrix=i(o.textContent);break;case"source":var a=o.getAttribute("id");t.sources[a]=ee(o);break;case"joints":t.joints=R(o);break;case"vertex_weights":t.vertexWeights=P(o)}}return t}function R(e){for(var t={inputs:{}},n=0,r=e.childNodes.length;n<r;n++){var i=e.childNodes[n];if(1===i.nodeType)switch(i.nodeName){case"input":var o=i.getAttribute("semantic"),a=s(i.getAttribute("source"));t.inputs[o]=a}}return t}function P(e){for(var t={inputs:{}},n=0,r=e.childNodes.length;n<r;n++){var i=e.childNodes[n];if(1===i.nodeType)switch(i.nodeName){case"input":var o=i.getAttribute("semantic"),c=s(i.getAttribute("source")),u=parseInt(i.getAttribute("offset"));t.inputs[o]={id:c,offset:u};break;case"vcount":t.vcount=a(i.textContent);break;case"v":t.v=a(i.textContent)}}return t}function L(e){var t={id:e.id},n=Ue.geometries[t.id];return void 0!==e.skin&&(t.skin=function(e){var t,n,r,i={joints:[],indices:{array:[],stride:4},weights:{array:[],stride:4}},a=e.sources,s=e.vertexWeights,c=s.vcount,u=s.v,l=s.inputs.JOINT.offset,h=s.inputs.WEIGHT.offset,d=e.sources[e.joints.inputs.JOINT],p=e.sources[e.joints.inputs.INV_BIND_MATRIX],f=a[s.inputs.WEIGHT.id].array,m=0;for(t=0,r=c.length;t<r;t++){var v=c[t],g=[];for(n=0;n<v;n++){var y=u[m+l],b=u[m+h],x=f[b];g.push({index:y,weight:x}),m+=2}for(g.sort(M),n=0;n<4;n++){var _=g[n];void 0!==_?(i.indices.array.push(_.index),i.weights.array.push(_.weight)):(i.indices.array.push(0),i.weights.array.push(0))}}for(i.bindMatrix=(new o.default.Matrix4).fromArray(e.bindShapeMatrix).transpose(),t=0,r=d.array.length;t<r;t++){var w=d.array[t],E=(new o.default.Matrix4).fromArray(p.array,t*p.stride).transpose();i.joints.push({name:w,boneInverse:E})}return i;function M(e,t){return t.weight-e.weight}}(e.skin),n.sources.skinIndices=t.skin.indices,n.sources.skinWeights=t.skin.weights),t}function C(e){return h(Ue.controllers[e],L)}function O(e){return void 0!==e.build?e.build:e.init_from}function I(e){for(var t={surfaces:{},samplers:{}},n=0,r=e.childNodes.length;n<r;n++){var i=e.childNodes[n];if(1===i.nodeType)switch(i.nodeName){case"newparam":N(i,t);break;case"technique":t.technique=k(i)}}return t}function N(e,t){for(var n=e.getAttribute("sid"),r=0,i=e.childNodes.length;r<i;r++){var o=e.childNodes[r];if(1===o.nodeType)switch(o.nodeName){case"surface":t.surfaces[n]=D(o);break;case"sampler2D":t.samplers[n]=U(o)}}}function D(e){for(var t={},n=0,r=e.childNodes.length;n<r;n++){var i=e.childNodes[n];if(1===i.nodeType)switch(i.nodeName){case"init_from":t.init_from=i.textContent}}return t}function U(e){for(var t={},n=0,r=e.childNodes.length;n<r;n++){var i=e.childNodes[n];if(1===i.nodeType)switch(i.nodeName){case"source":t.source=i.textContent}}return t}function k(e){for(var t={},n=0,r=e.childNodes.length;n<r;n++){var i=e.childNodes[n];if(1===i.nodeType)switch(i.nodeName){case"constant":case"lambert":case"blinn":case"phong":t.type=i.nodeName,t.parameters=B(i)}}return t}function B(e){for(var t={},n=0,r=e.childNodes.length;n<r;n++){var i=e.childNodes[n];if(1===i.nodeType)switch(i.nodeName){case"emission":case"diffuse":case"specular":case"shininess":case"transparent":case"transparency":t[i.nodeName]=F(i)}}return t}function F(e){for(var t={},n=0,r=e.childNodes.length;n<r;n++){var o=e.childNodes[n];if(1===o.nodeType)switch(o.nodeName){case"color":t[o.nodeName]=i(o.textContent);break;case"float":t[o.nodeName]=parseFloat(o.textContent);break;case"texture":t[o.nodeName]={id:o.getAttribute("texture"),extra:j(o)}}}return t}function j(e){for(var t={technique:{}},n=0,r=e.childNodes.length;n<r;n++){var i=e.childNodes[n];if(1===i.nodeType)switch(i.nodeName){case"extra":z(i,t)}}return t}function z(e,t){for(var n=0,r=e.childNodes.length;n<r;n++){var i=e.childNodes[n];if(1===i.nodeType)switch(i.nodeName){case"technique":G(i,t)}}}function G(e,t){for(var n=0,r=e.childNodes.length;n<r;n++){var i=e.childNodes[n];if(1===i.nodeType)switch(i.nodeName){case"repeatU":case"repeatV":case"offsetU":case"offsetV":t.technique[i.nodeName]=parseFloat(i.textContent);break;case"wrapU":case"wrapV":"TRUE"===i.textContent.toUpperCase()?t.technique[i.nodeName]=1:"FALSE"===i.textContent.toUpperCase()?t.technique[i.nodeName]=0:t.technique[i.nodeName]=parseInt(i.textContent)}}}function V(e){return e}function H(e){var t,n,r=(t=e.url,h(Ue.effects[t],V)),i=r.profile.technique;switch(i.type){case"phong":case"blinn":n=new o.default.MeshPhongMaterial;break;case"lambert":n=new o.default.MeshLambertMaterial;break;default:n=new o.default.MeshBasicMaterial}function a(e){var t,n=r.profile.samplers[e.id];if(void 0!==n){var i=r.profile.surfaces[n.source],a=Oe.load((t=i.init_from,h(Ue.images[t],O))),s=e.extra;if(void 0!==s&&void 0!==s.technique&&!1===c(s.technique)){var u=s.technique;a.wrapS=u.wrapU?o.default.RepeatWrapping:o.default.ClampToEdgeWrapping,a.wrapT=u.wrapV?o.default.RepeatWrapping:o.default.ClampToEdgeWrapping,a.offset.set(u.offsetU||0,u.offsetV||0),a.repeat.set(u.repeatU||1,u.repeatV||1)}else a.wrapS=o.default.RepeatWrapping,a.wrapT=o.default.RepeatWrapping;return a}return console.error("THREE.ColladaLoader: Undefined sampler",e.id),null}n.name=e.name;var s=i.parameters;for(var u in s){var l=s[u];switch(u){case"diffuse":l.color&&n.color.fromArray(l.color),l.texture&&(n.map=a(l.texture));break;case"specular":l.color&&n.specular&&n.specular.fromArray(l.color),l.texture&&(n.specularMap=a(l.texture));break;case"shininess":l.float&&n.shininess&&(n.shininess=l.float);break;case"emission":l.color&&n.emissive&&n.emissive.fromArray(l.color);break;case"transparent":n.transparent=!0;break;case"transparency":void 0!==l.float&&(n.opacity=l.float),n.transparent=!0}}return n}function W(e){return h(Ue.materials[e],H)}function X(e){for(var t=0;t<e.childNodes.length;t++){var n=e.childNodes[t];switch(n.nodeName){case"technique_common":return q(n)}}return{}}function q(e){for(var t={},n=0;n<e.childNodes.length;n++){var r=e.childNodes[n];switch(r.nodeName){case"perspective":case"orthographic":t.technique=r.nodeName,t.parameters=Y(r)}}return t}function Y(e){for(var t={},n=0;n<e.childNodes.length;n++){var r=e.childNodes[n];switch(r.nodeName){case"xfov":case"yfov":case"xmag":case"ymag":case"znear":case"zfar":case"aspect_ratio":t[r.nodeName]=parseFloat(r.textContent)}}return t}function K(e){var t;switch(e.optics.technique){case"perspective":t=new o.default.PerspectiveCamera(e.optics.parameters.yfov,e.optics.parameters.aspect_ratio,e.optics.parameters.znear,e.optics.parameters.zfar);break;case"orthographic":var n=e.optics.parameters.ymag,r=e.optics.parameters.xmag,i=e.optics.parameters.aspect_ratio;r=void 0===r?n*i:r,n=void 0===n?r/i:n,r*=.5,n*=.5,t=new o.default.OrthographicCamera(-r,r,n,-n,e.optics.parameters.znear,e.optics.parameters.zfar);break;default:t=new o.default.PerspectiveCamera}return t.name=e.name,t}function Z(e){for(var t={},n=0,r=e.childNodes.length;n<r;n++){var i=e.childNodes[n];if(1===i.nodeType)switch(i.nodeName){case"directional":case"point":case"spot":case"ambient":t.technique=i.nodeName,t.parameters=Q(i)}}return t}function Q(e){for(var t={},n=0,r=e.childNodes.length;n<r;n++){var a=e.childNodes[n];if(1===a.nodeType)switch(a.nodeName){case"color":var s=i(a.textContent);t.color=(new o.default.Color).fromArray(s);break;case"falloff_angle":t.falloffAngle=parseFloat(a.textContent);break;case"quadratic_attenuation":var c=parseFloat(a.textContent);t.distance=c?Math.sqrt(1/c):0}}return t}function J(e){var t;switch(e.technique){case"directional":t=new o.default.DirectionalLight;break;case"point":t=new o.default.PointLight;break;case"spot":t=new o.default.SpotLight;break;case"ambient":t=new o.default.AmbientLight}return e.parameters.color&&t.color.copy(e.parameters.color),e.parameters.distance&&(t.distance=e.parameters.distance),t}function $(e){return h(Ue.lights[e],J)}function ee(e){for(var t={array:[],stride:3},o=0;o<e.childNodes.length;o++){var a=e.childNodes[o];if(1===a.nodeType)switch(a.nodeName){case"float_array":t.array=i(a.textContent);break;case"Name_array":t.array=r(a.textContent);break;case"technique_common":var s=n(a,"accessor")[0];void 0!==s&&(t.stride=parseInt(s.getAttribute("stride")))}}return t}function te(e){for(var t={},n=0;n<e.childNodes.length;n++){var r=e.childNodes[n];1===r.nodeType&&(t[r.getAttribute("semantic")]=s(r.getAttribute("source")))}return t}function ne(e){for(var t={type:e.nodeName,material:e.getAttribute("material"),count:parseInt(e.getAttribute("count")),inputs:{},stride:0},n=0,r=e.childNodes.length;n<r;n++){var i=e.childNodes[n];if(1===i.nodeType)switch(i.nodeName){case"input":var o=s(i.getAttribute("source")),c=i.getAttribute("semantic"),u=parseInt(i.getAttribute("offset"));t.inputs[c]={id:o,offset:u},t.stride=Math.max(t.stride,u+1);break;case"vcount":t.vcount=a(i.textContent);break;case"p":t.p=a(i.textContent)}}return t}function re(e){var t={},n=e.sources,r=e.vertices,i=e.primitives;if(0===i.length)return{};var o=function(e){for(var t={},n=0;n<e.length;n++){var r=e[n];void 0===t[r.type]&&(t[r.type]=[]),t[r.type].push(r)}return t}(i);for(var a in o)t[a]=ie(o[a],n,r);return t}function ie(e,t,n){for(var r={},i={array:[],stride:0},a={array:[],stride:0},s={array:[],stride:0},c={array:[],stride:0},u=[],l=4,h=[],d=4,p=new o.default.BufferGeometry,f=[],m=0,v=0,g=0;g<e.length;g++){var y=e[g],b=y.inputs,x=1;for(var _ in y.vcount&&4===y.vcount[0]&&(x=2),v="lines"===y.type||"linestrips"===y.type?2*y.count:3*y.count*x,p.addGroup(m,v,g),m+=v,y.material&&f.push(y.material),b){var w=b[_];switch(_){case"VERTEX":for(var E in n){var M=n[E];switch(E){case"POSITION":oe(y,t[M],w.offset,i.array),i.stride=t[M].stride,t.skinWeights&&t.skinIndices&&(oe(y,t.skinIndices,w.offset,u),oe(y,t.skinWeights,w.offset,h));break;case"NORMAL":oe(y,t[M],w.offset,a.array),a.stride=t[M].stride;break;case"COLOR":oe(y,t[M],w.offset,c.array),c.stride=t[M].stride;break;case"TEXCOORD":oe(y,t[M],w.offset,s.array),s.stride=t[M].stride;break;default:console.warn('THREE.ColladaLoader: Semantic "%s" not handled in geometry build process.',E)}}break;case"NORMAL":oe(y,t[w.id],w.offset,a.array),a.stride=t[w.id].stride;break;case"COLOR":oe(y,t[w.id],w.offset,c.array),c.stride=t[w.id].stride;break;case"TEXCOORD":oe(y,t[w.id],w.offset,s.array),s.stride=t[w.id].stride}}}return i.array.length>0&&p.addAttribute("position",new o.default.Float32BufferAttribute(i.array,i.stride)),a.array.length>0&&p.addAttribute("normal",new o.default.Float32BufferAttribute(a.array,a.stride)),c.array.length>0&&p.addAttribute("color",new o.default.Float32BufferAttribute(c.array,c.stride)),s.array.length>0&&p.addAttribute("uv",new o.default.Float32BufferAttribute(s.array,s.stride)),u.length>0&&p.addAttribute("skinIndex",new o.default.Float32BufferAttribute(u,l)),h.length>0&&p.addAttribute("skinWeight",new o.default.Float32BufferAttribute(h,d)),r.data=p,r.type=e[0].type,r.materialKeys=f,r}function oe(e,t,n,r){var i=e.p,o=e.stride,a=e.vcount;function s(e){for(var t=i[e+n]*l,o=t+l;t<o;t++)r.push(u[t])}var c=0,u=t.array,l=t.stride;if(void 0!==e.vcount){for(var h=0,d=0,p=a.length;d<p;d++){var f=a[d];if(4===f){var m=h+1*o,v=h+2*o,g=h+3*o;s(h+0*o),s(m),s(g),s(m),s(v),s(g)}else if(3===f){m=h+1*o,v=h+2*o;s(h+0*o),s(m),s(v)}else c=Math.max(c,f);h+=o*f}c>0&&console.log("THREE.ColladaLoader: Geometry has faces with more than 4 vertices.")}else for(d=0,p=i.length;d<p;d+=o)s(d)}function ae(e){return h(Ue.geometries[e],re)}function se(e){return void 0!==e.build?e.build:e}function ce(e,t){for(var n=0;n<e.childNodes.length;n++){var r=e.childNodes[n];if(1===r.nodeType)switch(r.nodeName){case"joint":t.joints[r.getAttribute("sid")]=ue(r);break;case"link":t.links.push(he(r))}}}function ue(e){for(var t,n=0;n<e.childNodes.length;n++){var r=e.childNodes[n];if(1===r.nodeType)switch(r.nodeName){case"prismatic":case"revolute":t=le(r)}}return t}function le(e,t){t={sid:e.getAttribute("sid"),name:e.getAttribute("name")||"",axis:new o.default.Vector3,limits:{min:0,max:0},type:e.nodeName,static:!1,zeroPosition:0,middlePosition:0};for(var n=0;n<e.childNodes.length;n++){var r=e.childNodes[n];if(1===r.nodeType)switch(r.nodeName){case"axis":var a=i(r.textContent);t.axis.fromArray(a);break;case"limits":var s=r.getElementsByTagName("max")[0],c=r.getElementsByTagName("min")[0];t.limits.max=parseFloat(s.textContent),t.limits.min=parseFloat(c.textContent)}}return t.limits.min>=t.limits.max&&(t.static=!0),t.middlePosition=(t.limits.min+t.limits.max)/2,t}function he(e){for(var t={sid:e.getAttribute("sid"),name:e.getAttribute("name")||"",attachments:[],transforms:[]},n=0;n<e.childNodes.length;n++){var r=e.childNodes[n];if(1===r.nodeType)switch(r.nodeName){case"attachment_full":t.attachments.push(de(r));break;case"matrix":case"translate":case"rotate":t.transforms.push(pe(r))}}return t}function de(e){for(var t={joint:e.getAttribute("joint").split("/").pop(),transforms:[],links:[]},n=0;n<e.childNodes.length;n++){var r=e.childNodes[n];if(1===r.nodeType)switch(r.nodeName){case"link":t.links.push(he(r));break;case"matrix":case"translate":case"rotate":t.transforms.push(pe(r))}}return t}function pe(e){var t={type:e.nodeName},n=i(e.textContent);switch(t.type){case"matrix":t.obj=new o.default.Matrix4,t.obj.fromArray(n).transpose();break;case"translate":t.obj=new o.default.Vector3,t.obj.fromArray(n);break;case"rotate":t.obj=new o.default.Vector3,t.obj.fromArray(n),t.angle=o.default.Math.degToRad(n[3])}return t}function fe(e){for(var t={target:e.getAttribute("target").split("/").pop()},n=0;n<e.childNodes.length;n++){var r=e.childNodes[n];if(1===r.nodeType)switch(r.nodeName){case"axis":var i=r.getElementsByTagName("param")[0];t.axis=i.textContent;var o=t.axis.split("inst_").pop().split("axis")[0];t.jointIndex=o.substr(0,o.length-1)}}return t}function me(e){return void 0!==e.build?e.build:e}var ve=new o.default.Matrix4,ge=new o.default.Vector3;function ye(e){for(var t={name:e.getAttribute("name")||"",type:e.getAttribute("type"),id:e.getAttribute("id"),sid:e.getAttribute("sid"),matrix:new o.default.Matrix4,nodes:[],instanceCameras:[],instanceControllers:[],instanceLights:[],instanceGeometries:[],instanceNodes:[],transforms:{}},n=0;n<e.childNodes.length;n++){var r=e.childNodes[n];if(1===r.nodeType)switch(r.nodeName){case"node":t.nodes.push(r.getAttribute("id")),ye(r);break;case"instance_camera":t.instanceCameras.push(s(r.getAttribute("url")));break;case"instance_controller":t.instanceControllers.push(be(r));break;case"instance_light":t.instanceLights.push(s(r.getAttribute("url")));break;case"instance_geometry":t.instanceGeometries.push(be(r));break;case"instance_node":t.instanceNodes.push(s(r.getAttribute("url")));break;case"matrix":var a=i(r.textContent);t.matrix.multiply(ve.fromArray(a).transpose()),t.transforms[r.getAttribute("sid")]=r.nodeName;break;case"translate":a=i(r.textContent);ge.fromArray(a),t.matrix.multiply(ve.makeTranslation(ge.x,ge.y,ge.z)),t.transforms[r.getAttribute("sid")]=r.nodeName;break;case"rotate":a=i(r.textContent);var c=o.default.Math.degToRad(a[3]);t.matrix.multiply(ve.makeRotationAxis(ge.fromArray(a),c)),t.transforms[r.getAttribute("sid")]=r.nodeName;break;case"scale":a=i(r.textContent);t.matrix.scale(ge.fromArray(a)),t.transforms[r.getAttribute("sid")]=r.nodeName;break;case"extra":break;default:console.log(r)}}return Ue.nodes[t.id]=t,t}function be(e){for(var t={id:s(e.getAttribute("url")),materials:{},skeletons:[]},n=0;n<e.childNodes.length;n++){var r=e.childNodes[n];switch(r.nodeName){case"bind_material":for(var i=r.getElementsByTagName("instance_material"),o=0;o<i.length;o++){var a=i[o],c=a.getAttribute("symbol"),u=a.getAttribute("target");t.materials[c]=s(u)}break;case"skeleton":t.skeletons.push(s(r.textContent))}}return t}function xe(e,t){var n,r,i,a=[],s=[];for(n=0;n<e.length;n++){_e(Te(e[n]),t,a)}for(n=0;n<t.length;n++)for(r=0;r<a.length;r++)if((i=a[r]).bone.name===t[n].name){s[n]=i,i.processed=!0;break}for(n=0;n<a.length;n++)!1===(i=a[n]).processed&&(s.push(i),i.processed=!0);var c=[],u=[];for(n=0;n<s.length;n++)i=s[n],c.push(i.bone),u.push(i.boneInverse);return new o.default.Skeleton(c,u)}function _e(e,t,n){e.traverse(function(e){if(!0===e.isBone){for(var r,i=0;i<t.length;i++){var a=t[i];if(a.name===e.name){r=a.boneInverse;break}}void 0===r&&(r=new o.default.Matrix4),n.push({bone:e,boneInverse:r,processed:!1})}})}function we(e){for(var t,n=[],r=e.matrix,i=e.nodes,a=e.type,s=e.instanceCameras,c=e.instanceControllers,u=e.instanceLights,l=e.instanceGeometries,d=e.instanceNodes,p=0,f=i.length;p<f;p++)n.push(Te(i[p]));for(p=0,f=s.length;p<f;p++)n.push((t=s[p],h(Ue.cameras[t],K)).clone());for(p=0,f=c.length;p<f;p++)for(var m=C((_=c[p]).id),v=Me(ae(m.id),_.materials),g=xe(_.skeletons,m.skin.joints),y=0,b=v.length;y<b;y++){var x;(x=v[y]).isSkinnedMesh&&(x.bind(g,m.skin.bindMatrix),x.normalizeSkinWeights()),n.push(x)}for(p=0,f=u.length;p<f;p++)n.push($(u[p]).clone());for(p=0,f=l.length;p<f;p++){var _;for(y=0,b=(v=Me(ae((_=l[p]).id),_.materials)).length;y<b;y++)n.push(v[y])}for(p=0,f=d.length;p<f;p++)n.push(Te(d[p]).clone());if(0===i.length&&1===n.length)x=n[0];else{x="JOINT"===a?new o.default.Bone:new o.default.Group;for(p=0;p<n.length;p++)x.add(n[p])}return x.name="JOINT"===a?e.sid:e.name,x.matrix.copy(r),x.matrix.decompose(x.position,x.quaternion,x.scale),x}function Ee(e,t){for(var n=[],r=0,i=e.length;r<i;r++){var o=t[e[r]];n.push(W(o))}return n}function Me(e,t){var n=[];for(var r in e){var i=e[r],a=Ee(i.materialKeys,t);0===a.length&&("lines"===r||"linestrips"===r?a.push(new o.default.LineBasicMaterial):a.push(new o.default.MeshPhongMaterial));var s=void 0!==i.data.attributes.skinIndex;if(s)for(var c=0,u=a.length;c<u;c++)a[c].skinning=!0;var l,h=1===a.length?a[0]:a;switch(r){case"lines":l=new o.default.LineSegments(i.data,h);break;case"linestrips":l=new o.default.Line(i.data,h);break;case"triangles":case"polylist":l=s?new o.default.SkinnedMesh(i.data,h):new o.default.Mesh(i.data,h)}n.push(l)}return n}function Te(e){return h(Ue.nodes[e],we)}function Se(e){var t=new o.default.Group;t.name=e.name;for(var n=e.children,r=0;r<n.length;r++){var i=n[r];null===i.id?t.add(we(i)):t.add(Te(i.id))}return t}function Ae(e){return h(Ue.visualScenes[e],Se)}if(console.time("THREE.ColladaLoader"),0===e.length)return{scene:new o.default.Scene};console.time("THREE.ColladaLoader: DOMParser");var Re=(new DOMParser).parseFromString(e,"application/xml");console.timeEnd("THREE.ColladaLoader: DOMParser");var Pe=n(Re,"COLLADA")[0],Le=Pe.getAttribute("version");console.log("THREE.ColladaLoader: File version",Le);var Ce=function(e){return{unit:function(e){return void 0!==e?parseFloat(e.getAttribute("meter")):1}(n(e,"unit")[0]),upAxis:function(e){return void 0!==e?e.textContent:"Y_UP"}(n(e,"up_axis")[0])}}(n(Pe,"asset")[0]),Oe=new o.default.TextureLoader(this.manager);Oe.setPath(t).setCrossOrigin(this.crossOrigin);var Ie=[],Ne={},De=0,Ue={animations:{},clips:{},controllers:{},images:{},effects:{},materials:{},cameras:{},lights:{},geometries:{},nodes:{},visualScenes:{},kinematicsModels:{},kinematicsScenes:{}};console.time("THREE.ColladaLoader: Parse"),u(Pe,"library_animations","animation",function(e){for(var t={sources:{},samplers:{},channels:{}},n=0,r=e.childNodes.length;n<r;n++){var i,o=e.childNodes[n];if(1===o.nodeType)switch(o.nodeName){case"source":i=o.getAttribute("id"),t.sources[i]=ee(o);break;case"sampler":i=o.getAttribute("id"),t.samplers[i]=d(o);break;case"channel":i=o.getAttribute("target"),t.channels[i]=p(o);break;default:console.log(o)}}Ue.animations[e.getAttribute("id")]=t}),u(Pe,"library_animation_clips","animation_clip",function(e){for(var t={name:e.getAttribute("id")||"default",start:parseFloat(e.getAttribute("start")||0),end:parseFloat(e.getAttribute("end")||0),animations:[]},n=0,r=e.childNodes.length;n<r;n++){var i=e.childNodes[n];if(1===i.nodeType)switch(i.nodeName){case"instance_animation":t.animations.push(s(i.getAttribute("url")))}}Ue.clips[e.getAttribute("id")]=t}),u(Pe,"library_controllers","controller",function(e){for(var t={},n=0,r=e.childNodes.length;n<r;n++){var i=e.childNodes[n];if(1===i.nodeType)switch(i.nodeName){case"skin":t.id=s(i.getAttribute("source")),t.skin=A(i);break;case"morph":t.id=s(i.getAttribute("source")),console.warn("THREE.ColladaLoader: Morph target animation not supported yet.")}}Ue.controllers[e.getAttribute("id")]=t}),u(Pe,"library_images","image",function(e){var t={init_from:n(e,"init_from")[0].textContent};Ue.images[e.getAttribute("id")]=t}),u(Pe,"library_effects","effect",function(e){for(var t={},n=0,r=e.childNodes.length;n<r;n++){var i=e.childNodes[n];if(1===i.nodeType)switch(i.nodeName){case"profile_COMMON":t.profile=I(i)}}Ue.effects[e.getAttribute("id")]=t}),u(Pe,"library_materials","material",function(e){for(var t={name:e.getAttribute("name")},n=0,r=e.childNodes.length;n<r;n++){var i=e.childNodes[n];if(1===i.nodeType)switch(i.nodeName){case"instance_effect":t.url=s(i.getAttribute("url"))}}Ue.materials[e.getAttribute("id")]=t}),u(Pe,"library_cameras","camera",function(e){for(var t={name:e.getAttribute("name")},n=0,r=e.childNodes.length;n<r;n++){var i=e.childNodes[n];if(1===i.nodeType)switch(i.nodeName){case"optics":t.optics=X(i)}}Ue.cameras[e.getAttribute("id")]=t}),u(Pe,"library_lights","light",function(e){for(var t={},n=0,r=e.childNodes.length;n<r;n++){var i=e.childNodes[n];if(1===i.nodeType)switch(i.nodeName){case"technique_common":t=Z(i)}}Ue.lights[e.getAttribute("id")]=t}),u(Pe,"library_geometries","geometry",function(e){for(var t={name:e.getAttribute("name"),sources:{},vertices:{},primitives:[]},r=n(e,"mesh")[0],i=0;i<r.childNodes.length;i++){var o=r.childNodes[i];if(1===o.nodeType){var a=o.getAttribute("id");switch(o.nodeName){case"source":t.sources[a]=ee(o);break;case"vertices":t.vertices=te(o);break;case"polygons":console.warn("THREE.ColladaLoader: Unsupported primitive type: ",o.nodeName);break;case"lines":case"linestrips":case"polylist":case"triangles":t.primitives.push(ne(o));break;default:console.log(o)}}}Ue.geometries[e.getAttribute("id")]=t}),u(Pe,"library_nodes","node",ye),u(Pe,"library_visual_scenes","visual_scene",function(e){var t={name:e.getAttribute("name"),children:[]};!function(e){for(var t=e.getElementsByTagName("node"),n=0;n<t.length;n++){var r=t[n];!1===r.hasAttribute("id")&&r.setAttribute("id","three_default_"+De++)}}(e);for(var r=n(e,"node"),i=0;i<r.length;i++)t.children.push(ye(r[i]));Ue.visualScenes[e.getAttribute("id")]=t}),u(Pe,"library_kinematics_models","kinematics_model",function(e){for(var t={name:e.getAttribute("name")||"",joints:{},links:[]},n=0;n<e.childNodes.length;n++){var r=e.childNodes[n];if(1===r.nodeType)switch(r.nodeName){case"technique_common":ce(r,t)}}Ue.kinematicsModels[e.getAttribute("id")]=t}),u(Pe,"scene","instance_kinematics_scene",function(e){for(var t={bindJointAxis:[]},n=0;n<e.childNodes.length;n++){var r=e.childNodes[n];if(1===r.nodeType)switch(r.nodeName){case"bind_joint_axis":t.bindJointAxis.push(fe(r))}}Ue.kinematicsScenes[s(e.getAttribute("url"))]=t}),console.timeEnd("THREE.ColladaLoader: Parse"),console.time("THREE.ColladaLoader: Build"),l(Ue.animations,f),l(Ue.clips,T),l(Ue.controllers,L),l(Ue.images,O),l(Ue.effects,V),l(Ue.materials,H),l(Ue.cameras,K),l(Ue.lights,J),l(Ue.geometries,re),l(Ue.visualScenes,Se),console.timeEnd("THREE.ColladaLoader: Build"),function(){var e=Ue.clips;if(!0===c(e)){if(!1===c(Ue.animations)){var t=[];for(var n in Ue.animations)for(var r=m(n),i=0,a=r.length;i<a;i++)t.push(r[i]);Ie.push(new o.default.AnimationClip("default",-1,t))}}else for(var n in e)Ie.push(S(n))}(),function(){var e=Object.keys(Ue.kinematicsModels)[0],t=Object.keys(Ue.kinematicsScenes)[0],n=Object.keys(Ue.visualScenes)[0];if(void 0!==e&&void 0!==t){for(var r,a=(r=e,h(Ue.kinematicsModels[r],se)),s=function(e){return h(Ue.kinematicsScenes[e],me)}(t),c=Ae(n),u=s.bindJointAxis,l={},d=0,p=u.length;d<p;d++){var f=u[d],m=Pe.querySelector('[sid="'+f.target+'"]');if(m){var v=m.parentElement;y(f.jointIndex,v)}}var g=new o.default.Matrix4;Ne={joints:a&&a.joints,getJointValue:function(e){var t=l[e];if(t)return t.position;console.warn("THREE.ColladaLoader: Joint "+e+" doesn't exist.")},setJointValue:function(e,t){var n=l[e];if(n){var r=n.joint;if(t>r.limits.max||t<r.limits.min)console.warn("THREE.ColladaLoader: Joint "+e+" value "+t+" outside of limits (min: "+r.limits.min+", max: "+r.limits.max+").");else if(r.static)console.warn("THREE.ColladaLoader: Joint "+e+" is static.");else{var i=n.object,a=r.axis,s=n.transforms;ve.identity();for(var c=0;c<s.length;c++){var u=s[c];if(u.sid&&-1!==u.sid.indexOf(e))switch(r.type){case"revolute":ve.multiply(g.makeRotationAxis(a,o.default.Math.degToRad(t)));break;case"prismatic":ve.multiply(g.makeTranslation(a.x*t,a.y*t,a.z*t));break;default:console.warn("THREE.ColladaLoader: Unknown joint type: "+r.type)}else switch(u.type){case"matrix":ve.multiply(u.obj);break;case"translate":ve.multiply(g.makeTranslation(u.obj.x,u.obj.y,u.obj.z));break;case"scale":ve.scale(u.obj);break;case"rotate":ve.multiply(g.makeRotationAxis(u.obj,u.angle))}}i.matrix.copy(ve),i.matrix.decompose(i.position,i.quaternion,i.scale),l[e].position=t}}else console.log("THREE.ColladaLoader: "+e+" does not exist.")}}}function y(e,t){var n=t.getAttribute("name"),r=a.joints[e];c.traverse(function(a){a.name===n&&(l[e]={object:a,transforms:function(e){for(var t=[],n=Pe.querySelector('[id="'+e.id+'"]'),r=0;r<n.childNodes.length;r++){var a=n.childNodes[r];if(1===a.nodeType)switch(a.nodeName){case"matrix":var s=i(a.textContent),c=(new o.default.Matrix4).fromArray(s).transpose();t.push({sid:a.getAttribute("sid"),type:a.nodeName,obj:c});break;case"translate":case"scale":var s=i(a.textContent),u=(new o.default.Vector3).fromArray(s);t.push({sid:a.getAttribute("sid"),type:a.nodeName,obj:u});break;case"rotate":var s=i(a.textContent),u=(new o.default.Vector3).fromArray(s),l=o.default.Math.degToRad(s[3]);t.push({sid:a.getAttribute("sid"),type:a.nodeName,obj:u,angle:l})}}return t}(t),joint:r,position:r.zeroPosition})})}}();var ke=function(e){return Ae(s(n(e,"instance_visual_scene")[0].getAttribute("url")))}(n(Pe,"scene")[0]);return"Z_UP"===Ce.upAxis&&(ke.rotation.x=-Math.PI/2),ke.scale.multiplyScalar(Ce.unit),console.timeEnd("THREE.ColladaLoader"),{animations:Ie,kinematics:Ne,library:Ue,scene:ke}}}},function(e,t,n){"use strict";var r,i=n(0),o=(r=i)&&r.__esModule?r:{default:r};o.default.STLLoader=function(e){this.manager=void 0!==e?e:o.default.DefaultLoadingManager},o.default.STLLoader.prototype={constructor:o.default.STLLoader,load:function(e,t,n,r){var i=this,a=new o.default.FileLoader(i.manager);a.setResponseType("arraybuffer"),a.load(e,function(e){t(i.parse(e))},n,r)},parse:function(e){var t=function(e){if("string"==typeof e){for(var t=new Uint8Array(e.length),n=0;n<e.length;n++)t[n]=255&e.charCodeAt(n);return t.buffer||t}return e}(e);return function(e){var t;if(84+50*(t=new DataView(e)).getUint32(80,!0)===t.byteLength)return!0;for(var n=[115,111,108,105,100],r=0;r<5;r++)if(n[r]!=t.getUint8(r,!1))return!0;return!1}(t)?function(e){for(var t,n,r,i,a,s,c,u,l=new DataView(e),h=l.getUint32(80,!0),d=!1,p=0;p<70;p++)1129270351==l.getUint32(p,!1)&&82==l.getUint8(p+4)&&61==l.getUint8(p+5)&&(d=!0,i=[],a=l.getUint8(p+6)/255,s=l.getUint8(p+7)/255,c=l.getUint8(p+8)/255,u=l.getUint8(p+9)/255);for(var f=new o.default.BufferGeometry,m=[],v=[],g=0;g<h;g++){var y=84+50*g,b=l.getFloat32(y,!0),x=l.getFloat32(y+4,!0),_=l.getFloat32(y+8,!0);if(d){var w=l.getUint16(y+48,!0);0==(32768&w)?(t=(31&w)/31,n=(w>>5&31)/31,r=(w>>10&31)/31):(t=a,n=s,r=c)}for(var E=1;E<=3;E++){var M=y+12*E;m.push(l.getFloat32(M,!0)),m.push(l.getFloat32(M+4,!0)),m.push(l.getFloat32(M+8,!0)),v.push(b,x,_),d&&i.push(t,n,r)}}return f.addAttribute("position",new o.default.BufferAttribute(new Float32Array(m),3)),f.addAttribute("normal",new o.default.BufferAttribute(new Float32Array(v),3)),d&&(f.addAttribute("color",new o.default.BufferAttribute(new Float32Array(i),3)),f.hasColors=!0,f.alpha=u),f}(t):function(e){for(var t,n=new o.default.BufferGeometry,r=/facet([\s\S]*?)endfacet/g,i=0,a=/[\s]+([+-]?(?:\d+.\d+|\d+.|\d+|.\d+)(?:[eE][+-]?\d+)?)/.source,s=new RegExp("vertex"+a+a+a,"g"),c=new RegExp("normal"+a+a+a,"g"),u=[],l=[],h=new o.default.Vector3;null!==(t=r.exec(e));){for(var d=0,p=0,f=t[0];null!==(t=c.exec(f));)h.x=parseFloat(t[1]),h.y=parseFloat(t[2]),h.z=parseFloat(t[3]),p++;for(;null!==(t=s.exec(f));)u.push(parseFloat(t[1]),parseFloat(t[2]),parseFloat(t[3])),l.push(h.x,h.y,h.z),d++;1!==p&&console.error("THREE.STLLoader: Something isn't right with the normal of face number "+i),3!==d&&console.error("THREE.STLLoader: Something isn't right with the vertices of face number "+i),i++}return n.addAttribute("position",new o.default.Float32BufferAttribute(u,3)),n.addAttribute("normal",new o.default.Float32BufferAttribute(l,3)),n}(function(e){if("string"!=typeof e){var t=new Uint8Array(e);if(void 0!==window.TextDecoder)return(new TextDecoder).decode(t);for(var n="",r=0,i=e.byteLength;r<i;r++)n+=String.fromCharCode(t[r]);return n}return e}(e))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DepthCloud=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r};t.DepthCloud=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));e=e||{},n.url=e.url,n.streamType=e.streamType||"vp8",n.f=e.f||526,n.pointSize=e.pointSize||3,n.width=e.width||1024,n.height=e.height||1024,n.whiteness=e.whiteness||0,n.varianceThreshold=e.varianceThreshold||16667e-9;return n.isMjpeg="mjpeg"===n.streamType.toLowerCase(),n.video=document.createElement(n.isMjpeg?"img":"video"),n.video.addEventListener(n.isMjpeg?"load":"loadedmetadata",n.metaLoaded.bind(n),!1),n.isMjpeg||(n.video.loop=!0),n.video.src=n.url,n.video.crossOrigin="Anonymous",n.video.setAttribute("crossorigin","Anonymous"),n.vertex_shader=["uniform sampler2D map;","","uniform float width;","uniform float height;","uniform float nearClipping, farClipping;","","uniform float pointSize;","uniform float zOffset;","","uniform float focallength;","","varying vec2 vUvP;","varying vec2 colorP;","","varying float depthVariance;","varying float maskVal;","","float sampleDepth(vec2 pos)","  {","    float depth;","    ","    vec2 vUv = vec2( pos.x / (width*2.0), pos.y / (height*2.0)+0.5 );","    vec2 vUv2 = vec2( pos.x / (width*2.0)+0.5, pos.y / (height*2.0)+0.5 );","    ","    vec4 depthColor = texture2D( map, vUv );","    ","    depth = ( depthColor.r + depthColor.g + depthColor.b ) / 3.0 ;","    ","    if (depth>0.99)","    {","      vec4 depthColor2 = texture2D( map, vUv2 );","      float depth2 = ( depthColor2.r + depthColor2.g + depthColor2.b ) / 3.0 ;","      depth = 0.99+depth2;","    }","    ","    return depth;","  }","","float median(float a, float b, float c)","  {","    float r=a;","    ","    if ( (a<b) && (b<c) )","    {","      r = b;","    }","    if ( (a<c) && (c<b) )","    {","      r = c;","    }","    return r;","  }","","float variance(float d1, float d2, float d3, float d4, float d5, float d6, float d7, float d8, float d9)","  {","    float mean = (d1 + d2 + d3 + d4 + d5 + d6 + d7 + d8 + d9) / 9.0;","    float t1 = (d1-mean);","    float t2 = (d2-mean);","    float t3 = (d3-mean);","    float t4 = (d4-mean);","    float t5 = (d5-mean);","    float t6 = (d6-mean);","    float t7 = (d7-mean);","    float t8 = (d8-mean);","    float t9 = (d9-mean);","    float v = (t1*t1+t2*t2+t3*t3+t4*t4+t5*t5+t6*t6+t7*t7+t8*t8+t9*t9)/9.0;","    return v;","  }","","vec2 decodeDepth(vec2 pos)","  {","    vec2 ret;","    ","    ","    float depth1 = sampleDepth(vec2(position.x-1.0, position.y-1.0));","    float depth2 = sampleDepth(vec2(position.x, position.y-1.0));","    float depth3 = sampleDepth(vec2(position.x+1.0, position.y-1.0));","    float depth4 = sampleDepth(vec2(position.x-1.0, position.y));","    float depth5 = sampleDepth(vec2(position.x, position.y));","    float depth6 = sampleDepth(vec2(position.x+1.0, position.y));","    float depth7 = sampleDepth(vec2(position.x-1.0, position.y+1.0));","    float depth8 = sampleDepth(vec2(position.x, position.y+1.0));","    float depth9 = sampleDepth(vec2(position.x+1.0, position.y+1.0));","    ","    float median1 = median(depth1, depth2, depth3);","    float median2 = median(depth4, depth5, depth6);","    float median3 = median(depth7, depth8, depth9);","    ","    ret.x = median(median1, median2, median3);","    ret.y = variance(depth1, depth2, depth3, depth4, depth5, depth6, depth7, depth8, depth9);","    ","    return ret;","    ","  }","","","void main() {","  ","  vUvP = vec2( position.x / (width*2.0), position.y / (height*2.0)+0.5 );","  colorP = vec2( position.x / (width*2.0)+0.5 , position.y / (height*2.0)  );","  ","  vec4 pos = vec4(0.0,0.0,0.0,0.0);","  depthVariance = 0.0;","  ","  if ( (vUvP.x<0.0)|| (vUvP.x>0.5) || (vUvP.y<0.5) || (vUvP.y>0.0))","  {","    vec2 smp = decodeDepth(vec2(position.x, position.y));","    float depth = smp.x;","    depthVariance = smp.y;","    ","    float z = -depth;","    ","    pos = vec4(","      ( position.x / width - 0.5 ) * z * (1000.0/focallength) * -1.0,","      ( position.y / height - 0.5 ) * z * (1000.0/focallength),","      (- z + zOffset / 1000.0) * 2.0,","      1.0);","    ","    vec2 maskP = vec2( position.x / (width*2.0), position.y / (height*2.0)  );","    vec4 maskColor = texture2D( map, maskP );","    maskVal = ( maskColor.r + maskColor.g + maskColor.b ) / 3.0 ;","  }","  ","  gl_PointSize = pointSize;","  gl_Position = projectionMatrix * modelViewMatrix * pos;","  ","}"].join("\n"),n.fragment_shader=["uniform sampler2D map;","uniform float varianceThreshold;","uniform float whiteness;","","varying vec2 vUvP;","varying vec2 colorP;","","varying float depthVariance;","varying float maskVal;","","","void main() {","  ","  vec4 color;","  ","  if ( (depthVariance>varianceThreshold) || (maskVal>0.5) ||(vUvP.x<0.0)|| (vUvP.x>0.5) || (vUvP.y<0.5) || (vUvP.y>1.0))","  {  ","    discard;","  }","  else ","  {","    color = texture2D( map, colorP );","    ","    float fader = whiteness /100.0;","    ","    color.r = color.r * (1.0-fader)+ fader;","    ","    color.g = color.g * (1.0-fader)+ fader;","    ","    color.b = color.b * (1.0-fader)+ fader;","    ","    color.a = 1.0;//smoothstep( 20000.0, -20000.0, gl_FragCoord.z / gl_FragCoord.w );","  }","  ","  gl_FragColor = vec4( color.r, color.g, color.b, color.a );","  ","}"].join("\n"),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Object3D),i(t,[{key:"metaLoaded",value:function(){this.metaLoaded=!0,this.initStreamer()}},{key:"initStreamer",value:function(){if(this.metaLoaded){this.texture=new a.default.Texture(this.video),this.geometry=new a.default.Geometry;for(var e=0,t=this.width*this.height;e<t;e++){var n=new a.default.Vector3;n.x=e%this.width,n.y=Math.floor(e/this.width),this.geometry.vertices.push(n)}this.material=new a.default.ShaderMaterial({uniforms:{map:{type:"t",value:this.texture},width:{type:"f",value:this.width},height:{type:"f",value:this.height},focallength:{type:"f",value:this.f},pointSize:{type:"f",value:this.pointSize},zOffset:{type:"f",value:0},whiteness:{type:"f",value:this.whiteness},varianceThreshold:{type:"f",value:this.varianceThreshold}},vertexShader:this.vertex_shader,fragmentShader:this.fragment_shader}),this.mesh=new a.default.ParticleSystem(this.geometry,this.material),this.mesh.position.x=0,this.mesh.position.y=0,this.add(this.mesh);var r=this;setInterval(function(){(r.isMjpeg||r.video.readyState===r.video.HAVE_ENOUGH_DATA)&&(r.texture.needsUpdate=!0)},1e3/30)}}},{key:"startStream",value:function(){this.isMjpeg||this.video.play()}},{key:"stopStream",value:function(){this.isMjpeg||this.video.pause()}}]),t}()},function(e,t,n){"use strict";function r(){}n.r(t),n.d(t,"WebGLRenderTargetCube",function(){return Vt}),n.d(t,"WebGLRenderTarget",function(){return Gt}),n.d(t,"WebGLRenderer",function(){return _i}),n.d(t,"ShaderLib",function(){return kn}),n.d(t,"UniformsLib",function(){return Nn}),n.d(t,"UniformsUtils",function(){return Dn}),n.d(t,"ShaderChunk",function(){return Un}),n.d(t,"FogExp2",function(){return wi}),n.d(t,"Fog",function(){return Ei}),n.d(t,"Scene",function(){return Mi}),n.d(t,"LensFlare",function(){return Ti}),n.d(t,"Sprite",function(){return Ai}),n.d(t,"LOD",function(){return Ri}),n.d(t,"SkinnedMesh",function(){return Ci}),n.d(t,"Skeleton",function(){return Pi}),n.d(t,"Bone",function(){return Li}),n.d(t,"Mesh",function(){return Kr}),n.d(t,"LineSegments",function(){return Ni}),n.d(t,"LineLoop",function(){return Di}),n.d(t,"Line",function(){return Ii}),n.d(t,"Points",function(){return ki}),n.d(t,"Group",function(){return Bi}),n.d(t,"VideoTexture",function(){return Fi}),n.d(t,"DataTexture",function(){return Ht}),n.d(t,"CompressedTexture",function(){return ji}),n.d(t,"CubeTexture",function(){return Wt}),n.d(t,"CanvasTexture",function(){return jn}),n.d(t,"DepthTexture",function(){return zi}),n.d(t,"Texture",function(){return jt}),n.d(t,"CompressedTextureLoader",function(){return Ho}),n.d(t,"DataTextureLoader",function(){return Wo}),n.d(t,"CubeTextureLoader",function(){return qo}),n.d(t,"TextureLoader",function(){return Yo}),n.d(t,"ObjectLoader",function(){return La}),n.d(t,"MaterialLoader",function(){return _a}),n.d(t,"BufferGeometryLoader",function(){return wa}),n.d(t,"DefaultLoadingManager",function(){return zo}),n.d(t,"LoadingManager",function(){return jo}),n.d(t,"JSONLoader",function(){return Pa}),n.d(t,"ImageLoader",function(){return Xo}),n.d(t,"FontLoader",function(){return Za}),n.d(t,"FileLoader",function(){return Vo}),n.d(t,"Loader",function(){return Ra}),n.d(t,"Cache",function(){return Fo}),n.d(t,"AudioLoader",function(){return fs}),n.d(t,"SpotLightShadow",function(){return Jo}),n.d(t,"SpotLight",function(){return $o}),n.d(t,"PointLight",function(){return ea}),n.d(t,"RectAreaLight",function(){return ia}),n.d(t,"HemisphereLight",function(){return Zo}),n.d(t,"DirectionalLightShadow",function(){return ta}),n.d(t,"DirectionalLight",function(){return na}),n.d(t,"AmbientLight",function(){return ra}),n.d(t,"LightShadow",function(){return Qo}),n.d(t,"Light",function(){return Ko}),n.d(t,"StereoCamera",function(){return ms}),n.d(t,"PerspectiveCamera",function(){return yi}),n.d(t,"OrthographicCamera",function(){return fr}),n.d(t,"CubeCamera",function(){return vs}),n.d(t,"ArrayCamera",function(){return bi}),n.d(t,"Camera",function(){return pr}),n.d(t,"AudioListener",function(){return gs}),n.d(t,"PositionalAudio",function(){return bs}),n.d(t,"AudioContext",function(){return ps}),n.d(t,"AudioAnalyser",function(){return xs}),n.d(t,"Audio",function(){return ys}),n.d(t,"VectorKeyframeTrack",function(){return da}),n.d(t,"StringKeyframeTrack",function(){return va}),n.d(t,"QuaternionKeyframeTrack",function(){return fa}),n.d(t,"NumberKeyframeTrack",function(){return ma}),n.d(t,"ColorKeyframeTrack",function(){return ya}),n.d(t,"BooleanKeyframeTrack",function(){return ga}),n.d(t,"PropertyMixer",function(){return _s}),n.d(t,"PropertyBinding",function(){return Es}),n.d(t,"KeyframeTrack",function(){return ba}),n.d(t,"AnimationUtils",function(){return aa}),n.d(t,"AnimationObjectGroup",function(){return Ms}),n.d(t,"AnimationMixer",function(){return Ss}),n.d(t,"AnimationClip",function(){return xa}),n.d(t,"Uniform",function(){return As}),n.d(t,"InstancedBufferGeometry",function(){return Rs}),n.d(t,"BufferGeometry",function(){return Fr}),n.d(t,"Geometry",function(){return yr}),n.d(t,"InterleavedBufferAttribute",function(){return Ps}),n.d(t,"InstancedInterleavedBuffer",function(){return Cs}),n.d(t,"InterleavedBuffer",function(){return Ls}),n.d(t,"InstancedBufferAttribute",function(){return Os}),n.d(t,"Face3",function(){return mr}),n.d(t,"Object3D",function(){return dr}),n.d(t,"Raycaster",function(){return Is}),n.d(t,"Layers",function(){return ar}),n.d(t,"EventDispatcher",function(){return r}),n.d(t,"Clock",function(){return Us}),n.d(t,"QuaternionLinearInterpolant",function(){return pa}),n.d(t,"LinearInterpolant",function(){return ua}),n.d(t,"DiscreteInterpolant",function(){return la}),n.d(t,"CubicInterpolant",function(){return ca}),n.d(t,"Interpolant",function(){return sa}),n.d(t,"Triangle",function(){return Yr}),n.d(t,"Math",function(){return It}),n.d(t,"Spherical",function(){return ks}),n.d(t,"Cylindrical",function(){return Bs}),n.d(t,"Plane",function(){return tr}),n.d(t,"Frustum",function(){return nr}),n.d(t,"Sphere",function(){return er}),n.d(t,"Ray",function(){return Xr}),n.d(t,"Matrix4",function(){return Dt}),n.d(t,"Matrix3",function(){return Bt}),n.d(t,"Box3",function(){return $n}),n.d(t,"Box2",function(){return Bn}),n.d(t,"Line3",function(){return qr}),n.d(t,"Euler",function(){return or}),n.d(t,"Vector4",function(){return zt}),n.d(t,"Vector3",function(){return kt}),n.d(t,"Vector2",function(){return Nt}),n.d(t,"Quaternion",function(){return Ut}),n.d(t,"Color",function(){return In}),n.d(t,"ImmediateRenderObject",function(){return Fs}),n.d(t,"VertexNormalsHelper",function(){return js}),n.d(t,"SpotLightHelper",function(){return zs}),n.d(t,"SkeletonHelper",function(){return Gs}),n.d(t,"PointLightHelper",function(){return Vs}),n.d(t,"RectAreaLightHelper",function(){return Hs}),n.d(t,"HemisphereLightHelper",function(){return Ws}),n.d(t,"GridHelper",function(){return Xs}),n.d(t,"PolarGridHelper",function(){return qs}),n.d(t,"FaceNormalsHelper",function(){return Ys}),n.d(t,"DirectionalLightHelper",function(){return Ks}),n.d(t,"CameraHelper",function(){return Zs}),n.d(t,"BoxHelper",function(){return Qs}),n.d(t,"Box3Helper",function(){return Js}),n.d(t,"PlaneHelper",function(){return $s}),n.d(t,"ArrowHelper",function(){return ec}),n.d(t,"AxesHelper",function(){return tc}),n.d(t,"CatmullRomCurve3",function(){return sc}),n.d(t,"CubicBezierCurve3",function(){return cc}),n.d(t,"QuadraticBezierCurve3",function(){return uc}),n.d(t,"LineCurve3",function(){return lc}),n.d(t,"ArcCurve",function(){return hc}),n.d(t,"EllipseCurve",function(){return ja}),n.d(t,"SplineCurve",function(){return za}),n.d(t,"CubicBezierCurve",function(){return Ga}),n.d(t,"QuadraticBezierCurve",function(){return Va}),n.d(t,"LineCurve",function(){return Ba}),n.d(t,"Shape",function(){return qa}),n.d(t,"Path",function(){return Xa}),n.d(t,"ShapePath",function(){return Ya}),n.d(t,"Font",function(){return Ka}),n.d(t,"CurvePath",function(){return Fa}),n.d(t,"Curve",function(){return ka}),n.d(t,"ShapeUtils",function(){return so}),n.d(t,"SceneUtils",function(){return dc}),n.d(t,"WebGLUtils",function(){return xi}),n.d(t,"WireframeGeometry",function(){return Gi}),n.d(t,"ParametricGeometry",function(){return Vi}),n.d(t,"ParametricBufferGeometry",function(){return Hi}),n.d(t,"TetrahedronGeometry",function(){return qi}),n.d(t,"TetrahedronBufferGeometry",function(){return Yi}),n.d(t,"OctahedronGeometry",function(){return Ki}),n.d(t,"OctahedronBufferGeometry",function(){return Zi}),n.d(t,"IcosahedronGeometry",function(){return Qi}),n.d(t,"IcosahedronBufferGeometry",function(){return Ji}),n.d(t,"DodecahedronGeometry",function(){return $i}),n.d(t,"DodecahedronBufferGeometry",function(){return eo}),n.d(t,"PolyhedronGeometry",function(){return Wi}),n.d(t,"PolyhedronBufferGeometry",function(){return Xi}),n.d(t,"TubeGeometry",function(){return to}),n.d(t,"TubeBufferGeometry",function(){return no}),n.d(t,"TorusKnotGeometry",function(){return ro}),n.d(t,"TorusKnotBufferGeometry",function(){return io}),n.d(t,"TorusGeometry",function(){return oo}),n.d(t,"TorusBufferGeometry",function(){return ao}),n.d(t,"TextGeometry",function(){return lo}),n.d(t,"TextBufferGeometry",function(){return ho}),n.d(t,"SphereGeometry",function(){return po}),n.d(t,"SphereBufferGeometry",function(){return fo}),n.d(t,"RingGeometry",function(){return mo}),n.d(t,"RingBufferGeometry",function(){return vo}),n.d(t,"PlaneGeometry",function(){return Gr}),n.d(t,"PlaneBufferGeometry",function(){return Vr}),n.d(t,"LatheGeometry",function(){return go}),n.d(t,"LatheBufferGeometry",function(){return yo}),n.d(t,"ShapeGeometry",function(){return bo}),n.d(t,"ShapeBufferGeometry",function(){return xo}),n.d(t,"ExtrudeGeometry",function(){return co}),n.d(t,"ExtrudeBufferGeometry",function(){return uo}),n.d(t,"EdgesGeometry",function(){return _o}),n.d(t,"ConeGeometry",function(){return Mo}),n.d(t,"ConeBufferGeometry",function(){return To}),n.d(t,"CylinderGeometry",function(){return wo}),n.d(t,"CylinderBufferGeometry",function(){return Eo}),n.d(t,"CircleGeometry",function(){return So}),n.d(t,"CircleBufferGeometry",function(){return Ao}),n.d(t,"BoxGeometry",function(){return jr}),n.d(t,"BoxBufferGeometry",function(){return zr}),n.d(t,"ShadowMaterial",function(){return Po}),n.d(t,"SpriteMaterial",function(){return Si}),n.d(t,"RawShaderMaterial",function(){return Lo}),n.d(t,"ShaderMaterial",function(){return Wr}),n.d(t,"PointsMaterial",function(){return Ui}),n.d(t,"MeshPhysicalMaterial",function(){return Oo}),n.d(t,"MeshStandardMaterial",function(){return Co}),n.d(t,"MeshPhongMaterial",function(){return Io}),n.d(t,"MeshToonMaterial",function(){return No}),n.d(t,"MeshNormalMaterial",function(){return Do}),n.d(t,"MeshLambertMaterial",function(){return Uo}),n.d(t,"MeshDepthMaterial",function(){return Qn}),n.d(t,"MeshDistanceMaterial",function(){return Jn}),n.d(t,"MeshBasicMaterial",function(){return Hr}),n.d(t,"LineDashedMaterial",function(){return ko}),n.d(t,"LineBasicMaterial",function(){return Oi}),n.d(t,"Material",function(){return Zn}),n.d(t,"Float64BufferAttribute",function(){return Rr}),n.d(t,"Float32BufferAttribute",function(){return Ar}),n.d(t,"Uint32BufferAttribute",function(){return Sr}),n.d(t,"Int32BufferAttribute",function(){return Tr}),n.d(t,"Uint16BufferAttribute",function(){return Mr}),n.d(t,"Int16BufferAttribute",function(){return Er}),n.d(t,"Uint8ClampedBufferAttribute",function(){return wr}),n.d(t,"Uint8BufferAttribute",function(){return _r}),n.d(t,"Int8BufferAttribute",function(){return xr}),n.d(t,"BufferAttribute",function(){return br}),n.d(t,"REVISION",function(){return v}),n.d(t,"MOUSE",function(){return g}),n.d(t,"CullFaceNone",function(){return y}),n.d(t,"CullFaceBack",function(){return b}),n.d(t,"CullFaceFront",function(){return x}),n.d(t,"CullFaceFrontBack",function(){return _}),n.d(t,"FrontFaceDirectionCW",function(){return w}),n.d(t,"FrontFaceDirectionCCW",function(){return E}),n.d(t,"BasicShadowMap",function(){return M}),n.d(t,"PCFShadowMap",function(){return T}),n.d(t,"PCFSoftShadowMap",function(){return S}),n.d(t,"FrontSide",function(){return A}),n.d(t,"BackSide",function(){return R}),n.d(t,"DoubleSide",function(){return P}),n.d(t,"FlatShading",function(){return L}),n.d(t,"SmoothShading",function(){return C}),n.d(t,"NoColors",function(){return O}),n.d(t,"FaceColors",function(){return I}),n.d(t,"VertexColors",function(){return N}),n.d(t,"NoBlending",function(){return D}),n.d(t,"NormalBlending",function(){return U}),n.d(t,"AdditiveBlending",function(){return k}),n.d(t,"SubtractiveBlending",function(){return B}),n.d(t,"MultiplyBlending",function(){return F}),n.d(t,"CustomBlending",function(){return j}),n.d(t,"AddEquation",function(){return z}),n.d(t,"SubtractEquation",function(){return G}),n.d(t,"ReverseSubtractEquation",function(){return V}),n.d(t,"MinEquation",function(){return H}),n.d(t,"MaxEquation",function(){return W}),n.d(t,"ZeroFactor",function(){return X}),n.d(t,"OneFactor",function(){return q}),n.d(t,"SrcColorFactor",function(){return Y}),n.d(t,"OneMinusSrcColorFactor",function(){return K}),n.d(t,"SrcAlphaFactor",function(){return Z}),n.d(t,"OneMinusSrcAlphaFactor",function(){return Q}),n.d(t,"DstAlphaFactor",function(){return J}),n.d(t,"OneMinusDstAlphaFactor",function(){return $}),n.d(t,"DstColorFactor",function(){return ee}),n.d(t,"OneMinusDstColorFactor",function(){return te}),n.d(t,"SrcAlphaSaturateFactor",function(){return ne}),n.d(t,"NeverDepth",function(){return re}),n.d(t,"AlwaysDepth",function(){return ie}),n.d(t,"LessDepth",function(){return oe}),n.d(t,"LessEqualDepth",function(){return ae}),n.d(t,"EqualDepth",function(){return se}),n.d(t,"GreaterEqualDepth",function(){return ce}),n.d(t,"GreaterDepth",function(){return ue}),n.d(t,"NotEqualDepth",function(){return le}),n.d(t,"MultiplyOperation",function(){return he}),n.d(t,"MixOperation",function(){return de}),n.d(t,"AddOperation",function(){return pe}),n.d(t,"NoToneMapping",function(){return fe}),n.d(t,"LinearToneMapping",function(){return me}),n.d(t,"ReinhardToneMapping",function(){return ve}),n.d(t,"Uncharted2ToneMapping",function(){return ge}),n.d(t,"CineonToneMapping",function(){return ye}),n.d(t,"UVMapping",function(){return be}),n.d(t,"CubeReflectionMapping",function(){return xe}),n.d(t,"CubeRefractionMapping",function(){return _e}),n.d(t,"EquirectangularReflectionMapping",function(){return we}),n.d(t,"EquirectangularRefractionMapping",function(){return Ee}),n.d(t,"SphericalReflectionMapping",function(){return Me}),n.d(t,"CubeUVReflectionMapping",function(){return Te}),n.d(t,"CubeUVRefractionMapping",function(){return Se}),n.d(t,"RepeatWrapping",function(){return Ae}),n.d(t,"ClampToEdgeWrapping",function(){return Re}),n.d(t,"MirroredRepeatWrapping",function(){return Pe}),n.d(t,"NearestFilter",function(){return Le}),n.d(t,"NearestMipMapNearestFilter",function(){return Ce}),n.d(t,"NearestMipMapLinearFilter",function(){return Oe}),n.d(t,"LinearFilter",function(){return Ie}),n.d(t,"LinearMipMapNearestFilter",function(){return Ne}),n.d(t,"LinearMipMapLinearFilter",function(){return De}),n.d(t,"UnsignedByteType",function(){return Ue}),n.d(t,"ByteType",function(){return ke}),n.d(t,"ShortType",function(){return Be}),n.d(t,"UnsignedShortType",function(){return Fe}),n.d(t,"IntType",function(){return je}),n.d(t,"UnsignedIntType",function(){return ze}),n.d(t,"FloatType",function(){return Ge}),n.d(t,"HalfFloatType",function(){return Ve}),n.d(t,"UnsignedShort4444Type",function(){return He}),n.d(t,"UnsignedShort5551Type",function(){return We}),n.d(t,"UnsignedShort565Type",function(){return Xe}),n.d(t,"UnsignedInt248Type",function(){return qe}),n.d(t,"AlphaFormat",function(){return Ye}),n.d(t,"RGBFormat",function(){return Ke}),n.d(t,"RGBAFormat",function(){return Ze}),n.d(t,"LuminanceFormat",function(){return Qe}),n.d(t,"LuminanceAlphaFormat",function(){return Je}),n.d(t,"RGBEFormat",function(){return $e}),n.d(t,"DepthFormat",function(){return et}),n.d(t,"DepthStencilFormat",function(){return tt}),n.d(t,"RGB_S3TC_DXT1_Format",function(){return nt}),n.d(t,"RGBA_S3TC_DXT1_Format",function(){return rt}),n.d(t,"RGBA_S3TC_DXT3_Format",function(){return it}),n.d(t,"RGBA_S3TC_DXT5_Format",function(){return ot}),n.d(t,"RGB_PVRTC_4BPPV1_Format",function(){return at}),n.d(t,"RGB_PVRTC_2BPPV1_Format",function(){return st}),n.d(t,"RGBA_PVRTC_4BPPV1_Format",function(){return ct}),n.d(t,"RGBA_PVRTC_2BPPV1_Format",function(){return ut}),n.d(t,"RGB_ETC1_Format",function(){return lt}),n.d(t,"LoopOnce",function(){return ht}),n.d(t,"LoopRepeat",function(){return dt}),n.d(t,"LoopPingPong",function(){return pt}),n.d(t,"InterpolateDiscrete",function(){return ft}),n.d(t,"InterpolateLinear",function(){return mt}),n.d(t,"InterpolateSmooth",function(){return vt}),n.d(t,"ZeroCurvatureEnding",function(){return gt}),n.d(t,"ZeroSlopeEnding",function(){return yt}),n.d(t,"WrapAroundEnding",function(){return bt}),n.d(t,"TrianglesDrawMode",function(){return xt}),n.d(t,"TriangleStripDrawMode",function(){return _t}),n.d(t,"TriangleFanDrawMode",function(){return wt}),n.d(t,"LinearEncoding",function(){return Et}),n.d(t,"sRGBEncoding",function(){return Mt}),n.d(t,"GammaEncoding",function(){return Tt}),n.d(t,"RGBEEncoding",function(){return St}),n.d(t,"LogLuvEncoding",function(){return At}),n.d(t,"RGBM7Encoding",function(){return Rt}),n.d(t,"RGBM16Encoding",function(){return Pt}),n.d(t,"RGBDEncoding",function(){return Lt}),n.d(t,"BasicDepthPacking",function(){return Ct}),n.d(t,"RGBADepthPacking",function(){return Ot}),n.d(t,"CubeGeometry",function(){return jr}),n.d(t,"Face4",function(){return pc}),n.d(t,"LineStrip",function(){return fc}),n.d(t,"LinePieces",function(){return mc}),n.d(t,"MeshFaceMaterial",function(){return vc}),n.d(t,"MultiMaterial",function(){return gc}),n.d(t,"PointCloud",function(){return yc}),n.d(t,"Particle",function(){return bc}),n.d(t,"ParticleSystem",function(){return xc}),n.d(t,"PointCloudMaterial",function(){return _c}),n.d(t,"ParticleBasicMaterial",function(){return wc}),n.d(t,"ParticleSystemMaterial",function(){return Ec}),n.d(t,"Vertex",function(){return Mc}),n.d(t,"DynamicBufferAttribute",function(){return Tc}),n.d(t,"Int8Attribute",function(){return Sc}),n.d(t,"Uint8Attribute",function(){return Ac}),n.d(t,"Uint8ClampedAttribute",function(){return Rc}),n.d(t,"Int16Attribute",function(){return Pc}),n.d(t,"Uint16Attribute",function(){return Lc}),n.d(t,"Int32Attribute",function(){return Cc}),n.d(t,"Uint32Attribute",function(){return Oc}),n.d(t,"Float32Attribute",function(){return Ic}),n.d(t,"Float64Attribute",function(){return Nc}),n.d(t,"ClosedSplineCurve3",function(){return Dc}),n.d(t,"SplineCurve3",function(){return Uc}),n.d(t,"Spline",function(){return kc}),n.d(t,"AxisHelper",function(){return Bc}),n.d(t,"BoundingBoxHelper",function(){return Fc}),n.d(t,"EdgesHelper",function(){return jc}),n.d(t,"WireframeHelper",function(){return zc}),n.d(t,"XHRLoader",function(){return Gc}),n.d(t,"BinaryTextureLoader",function(){return Vc}),n.d(t,"GeometryUtils",function(){return Hc}),n.d(t,"ImageUtils",function(){return Wc}),n.d(t,"Projector",function(){return Xc}),n.d(t,"CanvasRenderer",function(){return qc}),void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Number.isInteger&&(Number.isInteger=function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e}),void 0===Math.sign&&(Math.sign=function(e){return e<0?-1:e>0?1:+e}),"name"in Function.prototype==!1&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]}}),void 0===Object.assign&&(Object.assign=function(e){if(void 0===e||null===e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),n=1;n<arguments.length;n++){var r=arguments[n];if(void 0!==r&&null!==r)for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&(t[i]=r[i])}return t}),Object.assign(r.prototype,{addEventListener:function(e,t){void 0===this._listeners&&(this._listeners={});var n=this._listeners;void 0===n[e]&&(n[e]=[]),-1===n[e].indexOf(t)&&n[e].push(t)},hasEventListener:function(e,t){if(void 0===this._listeners)return!1;var n=this._listeners;return void 0!==n[e]&&-1!==n[e].indexOf(t)},removeEventListener:function(e,t){if(void 0!==this._listeners){var n=this._listeners[e];if(void 0!==n){var r=n.indexOf(t);-1!==r&&n.splice(r,1)}}},dispatchEvent:function(e){if(void 0!==this._listeners){var t=this._listeners[e.type];if(void 0!==t){e.target=this;for(var n=t.slice(0),r=0,i=n.length;r<i;r++)n[r].call(this,e)}}}});var i,o,a,s,c,u,l,h,d,p,f,m,v="88",g={LEFT:0,MIDDLE:1,RIGHT:2},y=0,b=1,x=2,_=3,w=0,E=1,M=0,T=1,S=2,A=0,R=1,P=2,L=1,C=2,O=0,I=1,N=2,D=0,U=1,k=2,B=3,F=4,j=5,z=100,G=101,V=102,H=103,W=104,X=200,q=201,Y=202,K=203,Z=204,Q=205,J=206,$=207,ee=208,te=209,ne=210,re=0,ie=1,oe=2,ae=3,se=4,ce=5,ue=6,le=7,he=0,de=1,pe=2,fe=0,me=1,ve=2,ge=3,ye=4,be=300,xe=301,_e=302,we=303,Ee=304,Me=305,Te=306,Se=307,Ae=1e3,Re=1001,Pe=1002,Le=1003,Ce=1004,Oe=1005,Ie=1006,Ne=1007,De=1008,Ue=1009,ke=1010,Be=1011,Fe=1012,je=1013,ze=1014,Ge=1015,Ve=1016,He=1017,We=1018,Xe=1019,qe=1020,Ye=1021,Ke=1022,Ze=1023,Qe=1024,Je=1025,$e=Ze,et=1026,tt=1027,nt=2001,rt=2002,it=2003,ot=2004,at=2100,st=2101,ct=2102,ut=2103,lt=2151,ht=2200,dt=2201,pt=2202,ft=2300,mt=2301,vt=2302,gt=2400,yt=2401,bt=2402,xt=0,_t=1,wt=2,Et=3e3,Mt=3001,Tt=3007,St=3002,At=3003,Rt=3004,Pt=3005,Lt=3006,Ct=3200,Ot=3201,It={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:(o="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),a=0,function(){for(var e="",t=0;t<36;t++)8===t||13===t||18===t||23===t?e+="-":14===t?e+="4":(a<=2&&(a=33554432+16777216*Math.random()|0),i=15&a,a>>=4,e+=o[19===t?3&i|8:i]);return e}),clamp:function(e,t,n){return Math.max(t,Math.min(n,e))},euclideanModulo:function(e,t){return(e%t+t)%t},mapLinear:function(e,t,n,r,i){return r+(e-t)*(i-r)/(n-t)},lerp:function(e,t,n){return(1-n)*e+n*t},smoothstep:function(e,t,n){return e<=t?0:e>=n?1:(e=(e-t)/(n-t))*e*(3-2*e)},smootherstep:function(e,t,n){return e<=t?0:e>=n?1:(e=(e-t)/(n-t))*e*e*(e*(6*e-15)+10)},randInt:function(e,t){return e+Math.floor(Math.random()*(t-e+1))},randFloat:function(e,t){return e+Math.random()*(t-e)},randFloatSpread:function(e){return e*(.5-Math.random())},degToRad:function(e){return e*It.DEG2RAD},radToDeg:function(e){return e*It.RAD2DEG},isPowerOfTwo:function(e){return 0==(e&e-1)&&0!==e},ceilPowerOfTwo:function(e){return Math.pow(2,Math.ceil(Math.log(e)/Math.LN2))},floorPowerOfTwo:function(e){return Math.pow(2,Math.floor(Math.log(e)/Math.LN2))}};function Nt(e,t){this.x=e||0,this.y=t||0}function Dt(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}function Ut(e,t,n,r){this._x=e||0,this._y=t||0,this._z=n||0,this._w=void 0!==r?r:1}function kt(e,t,n){this.x=e||0,this.y=t||0,this.z=n||0}function Bt(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}Object.defineProperties(Nt.prototype,{width:{get:function(){return this.x},set:function(e){this.x=e}},height:{get:function(){return this.y},set:function(e){this.y=e}}}),Object.assign(Nt.prototype,{isVector2:!0,set:function(e,t){return this.x=e,this.y=t,this},setScalar:function(e){return this.x=e,this.y=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(e){return this.x=e.x,this.y=e.y,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this)},addScalar:function(e){return this.x+=e,this.y+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this)},subScalar:function(e){return this.x-=e,this.y-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this},multiply:function(e){return this.x*=e.x,this.y*=e.y,this},multiplyScalar:function(e){return this.x*=e,this.y*=e,this},divide:function(e){return this.x/=e.x,this.y/=e.y,this},divideScalar:function(e){return this.multiplyScalar(1/e)},applyMatrix3:function(e){var t=this.x,n=this.y,r=e.elements;return this.x=r[0]*t+r[3]*n+r[6],this.y=r[1]*t+r[4]*n+r[7],this},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this},clampScalar:(s=new Nt,c=new Nt,function(e,t){return s.set(e,e),c.set(t,t),this.clamp(s,c)}),clampLength:function(e,t){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(e){return this.x*e.x+this.y*e.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||1)},angle:function(){var e=Math.atan2(this.y,this.x);return e<0&&(e+=2*Math.PI),e},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,n=this.y-e.y;return t*t+n*n},manhattanDistanceTo:function(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this},lerpVectors:function(e,t,n){return this.subVectors(t,e).multiplyScalar(n).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e},fromBufferAttribute:function(e,t,n){return void 0!==n&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this},rotateAround:function(e,t){var n=Math.cos(t),r=Math.sin(t),i=this.x-e.x,o=this.y-e.y;return this.x=i*n-o*r+e.x,this.y=i*r+o*n+e.y,this}}),Object.assign(Dt.prototype,{isMatrix4:!0,set:function(e,t,n,r,i,o,a,s,c,u,l,h,d,p,f,m){var v=this.elements;return v[0]=e,v[4]=t,v[8]=n,v[12]=r,v[1]=i,v[5]=o,v[9]=a,v[13]=s,v[2]=c,v[6]=u,v[10]=l,v[14]=h,v[3]=d,v[7]=p,v[11]=f,v[15]=m,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new Dt).fromArray(this.elements)},copy:function(e){var t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this},copyPosition:function(e){var t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this},extractBasis:function(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this},makeBasis:function(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this},extractRotation:(f=new kt,function(e){var t=this.elements,n=e.elements,r=1/f.setFromMatrixColumn(e,0).length(),i=1/f.setFromMatrixColumn(e,1).length(),o=1/f.setFromMatrixColumn(e,2).length();return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[4]=n[4]*i,t[5]=n[5]*i,t[6]=n[6]*i,t[8]=n[8]*o,t[9]=n[9]*o,t[10]=n[10]*o,this}),makeRotationFromEuler:function(e){e&&e.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var t=this.elements,n=e.x,r=e.y,i=e.z,o=Math.cos(n),a=Math.sin(n),s=Math.cos(r),c=Math.sin(r),u=Math.cos(i),l=Math.sin(i);if("XYZ"===e.order){var h=o*u,d=o*l,p=a*u,f=a*l;t[0]=s*u,t[4]=-s*l,t[8]=c,t[1]=d+p*c,t[5]=h-f*c,t[9]=-a*s,t[2]=f-h*c,t[6]=p+d*c,t[10]=o*s}else if("YXZ"===e.order){var m=s*u,v=s*l,g=c*u,y=c*l;t[0]=m+y*a,t[4]=g*a-v,t[8]=o*c,t[1]=o*l,t[5]=o*u,t[9]=-a,t[2]=v*a-g,t[6]=y+m*a,t[10]=o*s}else if("ZXY"===e.order){m=s*u,v=s*l,g=c*u,y=c*l;t[0]=m-y*a,t[4]=-o*l,t[8]=g+v*a,t[1]=v+g*a,t[5]=o*u,t[9]=y-m*a,t[2]=-o*c,t[6]=a,t[10]=o*s}else if("ZYX"===e.order){h=o*u,d=o*l,p=a*u,f=a*l;t[0]=s*u,t[4]=p*c-d,t[8]=h*c+f,t[1]=s*l,t[5]=f*c+h,t[9]=d*c-p,t[2]=-c,t[6]=a*s,t[10]=o*s}else if("YZX"===e.order){var b=o*s,x=o*c,_=a*s,w=a*c;t[0]=s*u,t[4]=w-b*l,t[8]=_*l+x,t[1]=l,t[5]=o*u,t[9]=-a*u,t[2]=-c*u,t[6]=x*l+_,t[10]=b-w*l}else if("XZY"===e.order){b=o*s,x=o*c,_=a*s,w=a*c;t[0]=s*u,t[4]=-l,t[8]=c*u,t[1]=b*l+w,t[5]=o*u,t[9]=x*l-_,t[2]=_*l-x,t[6]=a*u,t[10]=w*l+b}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this},makeRotationFromQuaternion:function(e){var t=this.elements,n=e._x,r=e._y,i=e._z,o=e._w,a=n+n,s=r+r,c=i+i,u=n*a,l=n*s,h=n*c,d=r*s,p=r*c,f=i*c,m=o*a,v=o*s,g=o*c;return t[0]=1-(d+f),t[4]=l-g,t[8]=h+v,t[1]=l+g,t[5]=1-(u+f),t[9]=p-m,t[2]=h-v,t[6]=p+m,t[10]=1-(u+d),t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this},lookAt:(h=new kt,d=new kt,p=new kt,function(e,t,n){var r=this.elements;return p.subVectors(e,t),0===p.lengthSq()&&(p.z=1),p.normalize(),h.crossVectors(n,p),0===h.lengthSq()&&(1===Math.abs(n.z)?p.x+=1e-4:p.z+=1e-4,p.normalize(),h.crossVectors(n,p)),h.normalize(),d.crossVectors(p,h),r[0]=h.x,r[4]=d.x,r[8]=p.x,r[1]=h.y,r[5]=d.y,r[9]=p.y,r[2]=h.z,r[6]=d.z,r[10]=p.z,this}),multiply:function(e,t){return void 0!==t?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(e,t)):this.multiplyMatrices(this,e)},premultiply:function(e){return this.multiplyMatrices(e,this)},multiplyMatrices:function(e,t){var n=e.elements,r=t.elements,i=this.elements,o=n[0],a=n[4],s=n[8],c=n[12],u=n[1],l=n[5],h=n[9],d=n[13],p=n[2],f=n[6],m=n[10],v=n[14],g=n[3],y=n[7],b=n[11],x=n[15],_=r[0],w=r[4],E=r[8],M=r[12],T=r[1],S=r[5],A=r[9],R=r[13],P=r[2],L=r[6],C=r[10],O=r[14],I=r[3],N=r[7],D=r[11],U=r[15];return i[0]=o*_+a*T+s*P+c*I,i[4]=o*w+a*S+s*L+c*N,i[8]=o*E+a*A+s*C+c*D,i[12]=o*M+a*R+s*O+c*U,i[1]=u*_+l*T+h*P+d*I,i[5]=u*w+l*S+h*L+d*N,i[9]=u*E+l*A+h*C+d*D,i[13]=u*M+l*R+h*O+d*U,i[2]=p*_+f*T+m*P+v*I,i[6]=p*w+f*S+m*L+v*N,i[10]=p*E+f*A+m*C+v*D,i[14]=p*M+f*R+m*O+v*U,i[3]=g*_+y*T+b*P+x*I,i[7]=g*w+y*S+b*L+x*N,i[11]=g*E+y*A+b*C+x*D,i[15]=g*M+y*R+b*O+x*U,this},multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this},applyToBufferAttribute:function(){var e=new kt;return function(t){for(var n=0,r=t.count;n<r;n++)e.x=t.getX(n),e.y=t.getY(n),e.z=t.getZ(n),e.applyMatrix4(this),t.setXYZ(n,e.x,e.y,e.z);return t}}(),determinant:function(){var e=this.elements,t=e[0],n=e[4],r=e[8],i=e[12],o=e[1],a=e[5],s=e[9],c=e[13],u=e[2],l=e[6],h=e[10],d=e[14];return e[3]*(+i*s*l-r*c*l-i*a*h+n*c*h+r*a*d-n*s*d)+e[7]*(+t*s*d-t*c*h+i*o*h-r*o*d+r*c*u-i*s*u)+e[11]*(+t*c*l-t*a*d-i*o*l+n*o*d+i*a*u-n*c*u)+e[15]*(-r*a*u-t*s*l+t*a*h+r*o*l-n*o*h+n*s*u)},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this},setPosition:function(e){var t=this.elements;return t[12]=e.x,t[13]=e.y,t[14]=e.z,this},getInverse:function(e,t){var n=this.elements,r=e.elements,i=r[0],o=r[1],a=r[2],s=r[3],c=r[4],u=r[5],l=r[6],h=r[7],d=r[8],p=r[9],f=r[10],m=r[11],v=r[12],g=r[13],y=r[14],b=r[15],x=p*y*h-g*f*h+g*l*m-u*y*m-p*l*b+u*f*b,_=v*f*h-d*y*h-v*l*m+c*y*m+d*l*b-c*f*b,w=d*g*h-v*p*h+v*u*m-c*g*m-d*u*b+c*p*b,E=v*p*l-d*g*l-v*u*f+c*g*f+d*u*y-c*p*y,M=i*x+o*_+a*w+s*E;if(0===M){var T="THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";if(!0===t)throw new Error(T);return console.warn(T),this.identity()}var S=1/M;return n[0]=x*S,n[1]=(g*f*s-p*y*s-g*a*m+o*y*m+p*a*b-o*f*b)*S,n[2]=(u*y*s-g*l*s+g*a*h-o*y*h-u*a*b+o*l*b)*S,n[3]=(p*l*s-u*f*s-p*a*h+o*f*h+u*a*m-o*l*m)*S,n[4]=_*S,n[5]=(d*y*s-v*f*s+v*a*m-i*y*m-d*a*b+i*f*b)*S,n[6]=(v*l*s-c*y*s-v*a*h+i*y*h+c*a*b-i*l*b)*S,n[7]=(c*f*s-d*l*s+d*a*h-i*f*h-c*a*m+i*l*m)*S,n[8]=w*S,n[9]=(v*p*s-d*g*s-v*o*m+i*g*m+d*o*b-i*p*b)*S,n[10]=(c*g*s-v*u*s+v*o*h-i*g*h-c*o*b+i*u*b)*S,n[11]=(d*u*s-c*p*s-d*o*h+i*p*h+c*o*m-i*u*m)*S,n[12]=E*S,n[13]=(d*g*a-v*p*a+v*o*f-i*g*f-d*o*y+i*p*y)*S,n[14]=(v*u*a-c*g*a-v*o*l+i*g*l+c*o*y-i*u*y)*S,n[15]=(c*p*a-d*u*a+d*o*l-i*p*l-c*o*f+i*u*f)*S,this},scale:function(e){var t=this.elements,n=e.x,r=e.y,i=e.z;return t[0]*=n,t[4]*=r,t[8]*=i,t[1]*=n,t[5]*=r,t[9]*=i,t[2]*=n,t[6]*=r,t[10]*=i,t[3]*=n,t[7]*=r,t[11]*=i,this},getMaxScaleOnAxis:function(){var e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],r=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,r))},makeTranslation:function(e,t,n){return this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this},makeRotationX:function(e){var t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this},makeRotationY:function(e){var t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this},makeRotationZ:function(e){var t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(e,t){var n=Math.cos(t),r=Math.sin(t),i=1-n,o=e.x,a=e.y,s=e.z,c=i*o,u=i*a;return this.set(c*o+n,c*a-r*s,c*s+r*a,0,c*a+r*s,u*a+n,u*s-r*o,0,c*s-r*a,u*s+r*o,i*s*s+n,0,0,0,0,1),this},makeScale:function(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this},makeShear:function(e,t,n){return this.set(1,t,n,0,e,1,n,0,e,t,1,0,0,0,0,1),this},compose:function(e,t,n){return this.makeRotationFromQuaternion(t),this.scale(n),this.setPosition(e),this},decompose:(u=new kt,l=new Dt,function(e,t,n){var r=this.elements,i=u.set(r[0],r[1],r[2]).length(),o=u.set(r[4],r[5],r[6]).length(),a=u.set(r[8],r[9],r[10]).length();this.determinant()<0&&(i=-i),e.x=r[12],e.y=r[13],e.z=r[14],l.copy(this);var s=1/i,c=1/o,h=1/a;return l.elements[0]*=s,l.elements[1]*=s,l.elements[2]*=s,l.elements[4]*=c,l.elements[5]*=c,l.elements[6]*=c,l.elements[8]*=h,l.elements[9]*=h,l.elements[10]*=h,t.setFromRotationMatrix(l),n.x=i,n.y=o,n.z=a,this}),makePerspective:function(e,t,n,r,i,o){void 0===o&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");var a=this.elements,s=2*i/(t-e),c=2*i/(n-r),u=(t+e)/(t-e),l=(n+r)/(n-r),h=-(o+i)/(o-i),d=-2*o*i/(o-i);return a[0]=s,a[4]=0,a[8]=u,a[12]=0,a[1]=0,a[5]=c,a[9]=l,a[13]=0,a[2]=0,a[6]=0,a[10]=h,a[14]=d,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this},makeOrthographic:function(e,t,n,r,i,o){var a=this.elements,s=1/(t-e),c=1/(n-r),u=1/(o-i),l=(t+e)*s,h=(n+r)*c,d=(o+i)*u;return a[0]=2*s,a[4]=0,a[8]=0,a[12]=-l,a[1]=0,a[5]=2*c,a[9]=0,a[13]=-h,a[2]=0,a[6]=0,a[10]=-2*u,a[14]=-d,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this},equals:function(e){for(var t=this.elements,n=e.elements,r=0;r<16;r++)if(t[r]!==n[r])return!1;return!0},fromArray:function(e,t){void 0===t&&(t=0);for(var n=0;n<16;n++)this.elements[n]=e[n+t];return this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);var n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}}),Object.assign(Ut,{slerp:function(e,t,n,r){return n.copy(e).slerp(t,r)},slerpFlat:function(e,t,n,r,i,o,a){var s=n[r+0],c=n[r+1],u=n[r+2],l=n[r+3],h=i[o+0],d=i[o+1],p=i[o+2],f=i[o+3];if(l!==f||s!==h||c!==d||u!==p){var m=1-a,v=s*h+c*d+u*p+l*f,g=v>=0?1:-1,y=1-v*v;if(y>Number.EPSILON){var b=Math.sqrt(y),x=Math.atan2(b,v*g);m=Math.sin(m*x)/b,a=Math.sin(a*x)/b}var _=a*g;if(s=s*m+h*_,c=c*m+d*_,u=u*m+p*_,l=l*m+f*_,m===1-a){var w=1/Math.sqrt(s*s+c*c+u*u+l*l);s*=w,c*=w,u*=w,l*=w}}e[t]=s,e[t+1]=c,e[t+2]=u,e[t+3]=l}}),Object.defineProperties(Ut.prototype,{x:{get:function(){return this._x},set:function(e){this._x=e,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(e){this._y=e,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(e){this._z=e,this.onChangeCallback()}},w:{get:function(){return this._w},set:function(e){this._w=e,this.onChangeCallback()}}}),Object.assign(Ut.prototype,{set:function(e,t,n,r){return this._x=e,this._y=t,this._z=n,this._w=r,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this.onChangeCallback(),this},setFromEuler:function(e,t){if(!e||!e.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var n=e._x,r=e._y,i=e._z,o=e.order,a=Math.cos,s=Math.sin,c=a(n/2),u=a(r/2),l=a(i/2),h=s(n/2),d=s(r/2),p=s(i/2);return"XYZ"===o?(this._x=h*u*l+c*d*p,this._y=c*d*l-h*u*p,this._z=c*u*p+h*d*l,this._w=c*u*l-h*d*p):"YXZ"===o?(this._x=h*u*l+c*d*p,this._y=c*d*l-h*u*p,this._z=c*u*p-h*d*l,this._w=c*u*l+h*d*p):"ZXY"===o?(this._x=h*u*l-c*d*p,this._y=c*d*l+h*u*p,this._z=c*u*p+h*d*l,this._w=c*u*l-h*d*p):"ZYX"===o?(this._x=h*u*l-c*d*p,this._y=c*d*l+h*u*p,this._z=c*u*p-h*d*l,this._w=c*u*l+h*d*p):"YZX"===o?(this._x=h*u*l+c*d*p,this._y=c*d*l+h*u*p,this._z=c*u*p-h*d*l,this._w=c*u*l-h*d*p):"XZY"===o&&(this._x=h*u*l-c*d*p,this._y=c*d*l-h*u*p,this._z=c*u*p+h*d*l,this._w=c*u*l+h*d*p),!1!==t&&this.onChangeCallback(),this},setFromAxisAngle:function(e,t){var n=t/2,r=Math.sin(n);return this._x=e.x*r,this._y=e.y*r,this._z=e.z*r,this._w=Math.cos(n),this.onChangeCallback(),this},setFromRotationMatrix:function(e){var t,n=e.elements,r=n[0],i=n[4],o=n[8],a=n[1],s=n[5],c=n[9],u=n[2],l=n[6],h=n[10],d=r+s+h;return d>0?(t=.5/Math.sqrt(d+1),this._w=.25/t,this._x=(l-c)*t,this._y=(o-u)*t,this._z=(a-i)*t):r>s&&r>h?(t=2*Math.sqrt(1+r-s-h),this._w=(l-c)/t,this._x=.25*t,this._y=(i+a)/t,this._z=(o+u)/t):s>h?(t=2*Math.sqrt(1+s-r-h),this._w=(o-u)/t,this._x=(i+a)/t,this._y=.25*t,this._z=(c+l)/t):(t=2*Math.sqrt(1+h-r-s),this._w=(a-i)/t,this._x=(o+u)/t,this._y=(c+l)/t,this._z=.25*t),this.onChangeCallback(),this},setFromUnitVectors:function(){var e,t=new kt;return function(n,r){return void 0===t&&(t=new kt),(e=n.dot(r)+1)<1e-6?(e=0,Math.abs(n.x)>Math.abs(n.z)?t.set(-n.y,n.x,0):t.set(0,-n.z,n.y)):t.crossVectors(n,r),this._x=t.x,this._y=t.y,this._z=t.z,this._w=e,this.normalize()}}(),inverse:function(){return this.conjugate().normalize()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this.onChangeCallback(),this},dot:function(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var e=this.length();return 0===e?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this.onChangeCallback(),this},multiply:function(e,t){return void 0!==t?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(e,t)):this.multiplyQuaternions(this,e)},premultiply:function(e){return this.multiplyQuaternions(e,this)},multiplyQuaternions:function(e,t){var n=e._x,r=e._y,i=e._z,o=e._w,a=t._x,s=t._y,c=t._z,u=t._w;return this._x=n*u+o*a+r*c-i*s,this._y=r*u+o*s+i*a-n*c,this._z=i*u+o*c+n*s-r*a,this._w=o*u-n*a-r*s-i*c,this.onChangeCallback(),this},slerp:function(e,t){if(0===t)return this;if(1===t)return this.copy(e);var n=this._x,r=this._y,i=this._z,o=this._w,a=o*e._w+n*e._x+r*e._y+i*e._z;if(a<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,a=-a):this.copy(e),a>=1)return this._w=o,this._x=n,this._y=r,this._z=i,this;var s=Math.sqrt(1-a*a);if(Math.abs(s)<.001)return this._w=.5*(o+this._w),this._x=.5*(n+this._x),this._y=.5*(r+this._y),this._z=.5*(i+this._z),this;var c=Math.atan2(s,a),u=Math.sin((1-t)*c)/s,l=Math.sin(t*c)/s;return this._w=o*u+this._w*l,this._x=n*u+this._x*l,this._y=r*u+this._y*l,this._z=i*u+this._z*l,this.onChangeCallback(),this},equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w},fromArray:function(e,t){return void 0===t&&(t=0),this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this.onChangeCallback(),this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e},onChange:function(e){return this.onChangeCallback=e,this},onChangeCallback:function(){}}),Object.assign(kt.prototype,{isVector3:!0,set:function(e,t,n){return this.x=e,this.y=t,this.z=n,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this},multiply:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(e,t)):(this.x*=e.x,this.y*=e.y,this.z*=e.z,this)},multiplyScalar:function(e){return this.x*=e,this.y*=e,this.z*=e,this},multiplyVectors:function(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this},applyEuler:(m=new Ut,function(e){return e&&e.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(m.setFromEuler(e))}),applyAxisAngle:function(){var e=new Ut;return function(t,n){return this.applyQuaternion(e.setFromAxisAngle(t,n))}}(),applyMatrix3:function(e){var t=this.x,n=this.y,r=this.z,i=e.elements;return this.x=i[0]*t+i[3]*n+i[6]*r,this.y=i[1]*t+i[4]*n+i[7]*r,this.z=i[2]*t+i[5]*n+i[8]*r,this},applyMatrix4:function(e){var t=this.x,n=this.y,r=this.z,i=e.elements,o=1/(i[3]*t+i[7]*n+i[11]*r+i[15]);return this.x=(i[0]*t+i[4]*n+i[8]*r+i[12])*o,this.y=(i[1]*t+i[5]*n+i[9]*r+i[13])*o,this.z=(i[2]*t+i[6]*n+i[10]*r+i[14])*o,this},applyQuaternion:function(e){var t=this.x,n=this.y,r=this.z,i=e.x,o=e.y,a=e.z,s=e.w,c=s*t+o*r-a*n,u=s*n+a*t-i*r,l=s*r+i*n-o*t,h=-i*t-o*n-a*r;return this.x=c*s+h*-i+u*-a-l*-o,this.y=u*s+h*-o+l*-i-c*-a,this.z=l*s+h*-a+c*-o-u*-i,this},project:function(){var e=new Dt;return function(t){return e.multiplyMatrices(t.projectionMatrix,e.getInverse(t.matrixWorld)),this.applyMatrix4(e)}}(),unproject:function(){var e=new Dt;return function(t){return e.multiplyMatrices(t.matrixWorld,e.getInverse(t.projectionMatrix)),this.applyMatrix4(e)}}(),transformDirection:function(e){var t=this.x,n=this.y,r=this.z,i=e.elements;return this.x=i[0]*t+i[4]*n+i[8]*r,this.y=i[1]*t+i[5]*n+i[9]*r,this.z=i[2]*t+i[6]*n+i[10]*r,this.normalize()},divide:function(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this},divideScalar:function(e){return this.multiplyScalar(1/e)},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this},clampScalar:function(){var e=new kt,t=new kt;return function(n,r){return e.set(n,n,n),t.set(r,r,r),this.clamp(e,t)}}(),clampLength:function(e,t){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this},lerpVectors:function(e,t,n){return this.subVectors(t,e).multiplyScalar(n).add(e)},cross:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(e,t)):this.crossVectors(this,e)},crossVectors:function(e,t){var n=e.x,r=e.y,i=e.z,o=t.x,a=t.y,s=t.z;return this.x=r*s-i*a,this.y=i*o-n*s,this.z=n*a-r*o,this},projectOnVector:function(e){var t=e.dot(this)/e.lengthSq();return this.copy(e).multiplyScalar(t)},projectOnPlane:function(){var e=new kt;return function(t){return e.copy(this).projectOnVector(t),this.sub(e)}}(),reflect:function(){var e=new kt;return function(t){return this.sub(e.copy(t).multiplyScalar(2*this.dot(t)))}}(),angleTo:function(e){var t=this.dot(e)/Math.sqrt(this.lengthSq()*e.lengthSq());return Math.acos(It.clamp(t,-1,1))},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,n=this.y-e.y,r=this.z-e.z;return t*t+n*n+r*r},manhattanDistanceTo:function(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)},setFromSpherical:function(e){var t=Math.sin(e.phi)*e.radius;return this.x=t*Math.sin(e.theta),this.y=Math.cos(e.phi)*e.radius,this.z=t*Math.cos(e.theta),this},setFromCylindrical:function(e){return this.x=e.radius*Math.sin(e.theta),this.y=e.y,this.z=e.radius*Math.cos(e.theta),this},setFromMatrixPosition:function(e){var t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this},setFromMatrixScale:function(e){var t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),r=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=r,this},setFromMatrixColumn:function(e,t){return this.fromArray(e.elements,4*t)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e},fromBufferAttribute:function(e,t,n){return void 0!==n&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}}),Object.assign(Bt.prototype,{isMatrix3:!0,set:function(e,t,n,r,i,o,a,s,c){var u=this.elements;return u[0]=e,u[1]=r,u[2]=a,u[3]=t,u[4]=i,u[5]=s,u[6]=n,u[7]=o,u[8]=c,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(e){var t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this},setFromMatrix4:function(e){var t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this},applyToBufferAttribute:function(){var e=new kt;return function(t){for(var n=0,r=t.count;n<r;n++)e.x=t.getX(n),e.y=t.getY(n),e.z=t.getZ(n),e.applyMatrix3(this),t.setXYZ(n,e.x,e.y,e.z);return t}}(),multiply:function(e){return this.multiplyMatrices(this,e)},premultiply:function(e){return this.multiplyMatrices(e,this)},multiplyMatrices:function(e,t){var n=e.elements,r=t.elements,i=this.elements,o=n[0],a=n[3],s=n[6],c=n[1],u=n[4],l=n[7],h=n[2],d=n[5],p=n[8],f=r[0],m=r[3],v=r[6],g=r[1],y=r[4],b=r[7],x=r[2],_=r[5],w=r[8];return i[0]=o*f+a*g+s*x,i[3]=o*m+a*y+s*_,i[6]=o*v+a*b+s*w,i[1]=c*f+u*g+l*x,i[4]=c*m+u*y+l*_,i[7]=c*v+u*b+l*w,i[2]=h*f+d*g+p*x,i[5]=h*m+d*y+p*_,i[8]=h*v+d*b+p*w,this},multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this},determinant:function(){var e=this.elements,t=e[0],n=e[1],r=e[2],i=e[3],o=e[4],a=e[5],s=e[6],c=e[7],u=e[8];return t*o*u-t*a*c-n*i*u+n*a*s+r*i*c-r*o*s},getInverse:function(e,t){e&&e.isMatrix4&&console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");var n=e.elements,r=this.elements,i=n[0],o=n[1],a=n[2],s=n[3],c=n[4],u=n[5],l=n[6],h=n[7],d=n[8],p=d*c-u*h,f=u*l-d*s,m=h*s-c*l,v=i*p+o*f+a*m;if(0===v){var g="THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";if(!0===t)throw new Error(g);return console.warn(g),this.identity()}var y=1/v;return r[0]=p*y,r[1]=(a*h-d*o)*y,r[2]=(u*o-a*c)*y,r[3]=f*y,r[4]=(d*i-a*l)*y,r[5]=(a*s-u*i)*y,r[6]=m*y,r[7]=(o*l-h*i)*y,r[8]=(c*i-o*s)*y,this},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this},getNormalMatrix:function(e){return this.setFromMatrix4(e).getInverse(this).transpose()},transposeIntoArray:function(e){var t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this},setUvTransform:function(e,t,n,r,i,o,a){var s=Math.cos(i),c=Math.sin(i);this.set(n*s,n*c,-n*(s*o+c*a)+o+e,-r*c,r*s,-r*(-c*o+s*a)+a+t,0,0,1)},scale:function(e,t){var n=this.elements;return n[0]*=e,n[3]*=e,n[6]*=e,n[1]*=t,n[4]*=t,n[7]*=t,this},rotate:function(e){var t=Math.cos(e),n=Math.sin(e),r=this.elements,i=r[0],o=r[3],a=r[6],s=r[1],c=r[4],u=r[7];return r[0]=t*i+n*s,r[3]=t*o+n*c,r[6]=t*a+n*u,r[1]=-n*i+t*s,r[4]=-n*o+t*c,r[7]=-n*a+t*u,this},translate:function(e,t){var n=this.elements;return n[0]+=e*n[2],n[3]+=e*n[5],n[6]+=e*n[8],n[1]+=t*n[2],n[4]+=t*n[5],n[7]+=t*n[8],this},equals:function(e){for(var t=this.elements,n=e.elements,r=0;r<9;r++)if(t[r]!==n[r])return!1;return!0},fromArray:function(e,t){void 0===t&&(t=0);for(var n=0;n<9;n++)this.elements[n]=e[n+t];return this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);var n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}});var Ft=0;function jt(e,t,n,r,i,o,a,s,c,u){Object.defineProperty(this,"id",{value:Ft++}),this.uuid=It.generateUUID(),this.name="",this.image=void 0!==e?e:jt.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==t?t:jt.DEFAULT_MAPPING,this.wrapS=void 0!==n?n:Re,this.wrapT=void 0!==r?r:Re,this.magFilter=void 0!==i?i:Ie,this.minFilter=void 0!==o?o:De,this.anisotropy=void 0!==c?c:1,this.format=void 0!==a?a:Ze,this.type=void 0!==s?s:Ue,this.offset=new Nt(0,0),this.repeat=new Nt(1,1),this.center=new Nt(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Bt,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==u?u:Et,this.version=0,this.onUpdate=null}function zt(e,t,n,r){this.x=e||0,this.y=t||0,this.z=n||0,this.w=void 0!==r?r:1}function Gt(e,t,n){this.uuid=It.generateUUID(),this.width=e,this.height=t,this.scissor=new zt(0,0,e,t),this.scissorTest=!1,this.viewport=new zt(0,0,e,t),void 0===(n=n||{}).minFilter&&(n.minFilter=Ie),this.texture=new jt(void 0,void 0,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0===n.stencilBuffer||n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null}function Vt(e,t,n){Gt.call(this,e,t,n),this.activeCubeFace=0,this.activeMipMapLevel=0}function Ht(e,t,n,r,i,o,a,s,c,u,l,h){jt.call(this,null,o,a,s,c,u,r,i,l,h),this.image={data:e,width:t,height:n},this.magFilter=void 0!==c?c:Le,this.minFilter=void 0!==u?u:Le,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}function Wt(e,t,n,r,i,o,a,s,c,u){e=void 0!==e?e:[],t=void 0!==t?t:xe,jt.call(this,e,t,n,r,i,o,a,s,c,u),this.flipY=!1}jt.DEFAULT_IMAGE=void 0,jt.DEFAULT_MAPPING=be,Object.defineProperty(jt.prototype,"needsUpdate",{set:function(e){!0===e&&this.version++}}),Object.assign(jt.prototype,r.prototype,{constructor:jt,isTexture:!0,clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.name=e.name,this.image=e.image,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.encoding=e.encoding,this},toJSON:function(e){var t=void 0===e||"string"==typeof e;if(!t&&void 0!==e.textures[this.uuid])return e.textures[this.uuid];var n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY};if(void 0!==this.image){var r=this.image;void 0===r.uuid&&(r.uuid=It.generateUUID()),t||void 0!==e.images[r.uuid]||(e.images[r.uuid]={uuid:r.uuid,url:function(e){var t;if(e instanceof HTMLCanvasElement)t=e;else{(t=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")).width=e.width,t.height=e.height;var n=t.getContext("2d");e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0,e.width,e.height)}return t.width>2048||t.height>2048?t.toDataURL("image/jpeg",.6):t.toDataURL("image/png")}(r)}),n.image=r.uuid}return t||(e.textures[this.uuid]=n),n},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(e){if(this.mapping===be){if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case Ae:e.x=e.x-Math.floor(e.x);break;case Re:e.x=e.x<0?0:1;break;case Pe:1===Math.abs(Math.floor(e.x)%2)?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x)}if(e.y<0||e.y>1)switch(this.wrapT){case Ae:e.y=e.y-Math.floor(e.y);break;case Re:e.y=e.y<0?0:1;break;case Pe:1===Math.abs(Math.floor(e.y)%2)?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y)}this.flipY&&(e.y=1-e.y)}}}),Object.assign(zt.prototype,{isVector4:!0,set:function(e,t,n,r){return this.x=e,this.y=t,this.z=n,this.w=r,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this.w=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setW:function(e){return this.w=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=void 0!==e.w?e.w:1,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this},multiplyScalar:function(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this},applyMatrix4:function(e){var t=this.x,n=this.y,r=this.z,i=this.w,o=e.elements;return this.x=o[0]*t+o[4]*n+o[8]*r+o[12]*i,this.y=o[1]*t+o[5]*n+o[9]*r+o[13]*i,this.z=o[2]*t+o[6]*n+o[10]*r+o[14]*i,this.w=o[3]*t+o[7]*n+o[11]*r+o[15]*i,this},divideScalar:function(e){return this.multiplyScalar(1/e)},setAxisAngleFromQuaternion:function(e){this.w=2*Math.acos(e.w);var t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this},setAxisAngleFromRotationMatrix:function(e){var t,n,r,i,o=e.elements,a=o[0],s=o[4],c=o[8],u=o[1],l=o[5],h=o[9],d=o[2],p=o[6],f=o[10];if(Math.abs(s-u)<.01&&Math.abs(c-d)<.01&&Math.abs(h-p)<.01){if(Math.abs(s+u)<.1&&Math.abs(c+d)<.1&&Math.abs(h+p)<.1&&Math.abs(a+l+f-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;var m=(a+1)/2,v=(l+1)/2,g=(f+1)/2,y=(s+u)/4,b=(c+d)/4,x=(h+p)/4;return m>v&&m>g?m<.01?(n=0,r=.707106781,i=.707106781):(r=y/(n=Math.sqrt(m)),i=b/n):v>g?v<.01?(n=.707106781,r=0,i=.707106781):(n=y/(r=Math.sqrt(v)),i=x/r):g<.01?(n=.707106781,r=.707106781,i=0):(n=b/(i=Math.sqrt(g)),r=x/i),this.set(n,r,i,t),this}var _=Math.sqrt((p-h)*(p-h)+(c-d)*(c-d)+(u-s)*(u-s));return Math.abs(_)<.001&&(_=1),this.x=(p-h)/_,this.y=(c-d)/_,this.z=(u-s)/_,this.w=Math.acos((a+l+f-1)/2),this},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this},clampScalar:function(){var e,t;return function(n,r){return void 0===e&&(e=new zt,t=new zt),e.set(n,n,n,n),t.set(r,r,r,r),this.clamp(e,t)}}(),clampLength:function(e,t){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this},lerpVectors:function(e,t,n){return this.subVectors(t,e).multiplyScalar(n).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e},fromBufferAttribute:function(e,t,n){return void 0!==n&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}}),Object.assign(Gt.prototype,r.prototype,{isWebGLRenderTarget:!0,setSize:function(e,t){this.width===e&&this.height===t||(this.width=e,this.height=t,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.width=e.width,this.height=e.height,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.depthTexture=e.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Vt.prototype=Object.create(Gt.prototype),Vt.prototype.constructor=Vt,Vt.prototype.isWebGLRenderTargetCube=!0,Ht.prototype=Object.create(jt.prototype),Ht.prototype.constructor=Ht,Ht.prototype.isDataTexture=!0,Wt.prototype=Object.create(jt.prototype),Wt.prototype.constructor=Wt,Wt.prototype.isCubeTexture=!0,Object.defineProperty(Wt.prototype,"images",{get:function(){return this.image},set:function(e){this.image=e}});var Xt=new jt,qt=new Wt;function Yt(){this.seq=[],this.map={}}var Kt=[],Zt=[],Qt=new Float32Array(16),Jt=new Float32Array(9);function $t(e,t,n){var r=e[0];if(r<=0||r>0)return e;var i=t*n,o=Kt[i];if(void 0===o&&(o=new Float32Array(i),Kt[i]=o),0!==t){r.toArray(o,0);for(var a=1,s=0;a!==t;++a)s+=n,e[a].toArray(o,s)}return o}function en(e,t){var n=Zt[t];void 0===n&&(n=new Int32Array(t),Zt[t]=n);for(var r=0;r!==t;++r)n[r]=e.allocTextureUnit();return n}function tn(e,t){e.uniform1f(this.addr,t)}function nn(e,t){e.uniform1i(this.addr,t)}function rn(e,t){void 0===t.x?e.uniform2fv(this.addr,t):e.uniform2f(this.addr,t.x,t.y)}function on(e,t){void 0!==t.x?e.uniform3f(this.addr,t.x,t.y,t.z):void 0!==t.r?e.uniform3f(this.addr,t.r,t.g,t.b):e.uniform3fv(this.addr,t)}function an(e,t){void 0===t.x?e.uniform4fv(this.addr,t):e.uniform4f(this.addr,t.x,t.y,t.z,t.w)}function sn(e,t){e.uniformMatrix2fv(this.addr,!1,t.elements||t)}function cn(e,t){void 0===t.elements?e.uniformMatrix3fv(this.addr,!1,t):(Jt.set(t.elements),e.uniformMatrix3fv(this.addr,!1,Jt))}function un(e,t){void 0===t.elements?e.uniformMatrix4fv(this.addr,!1,t):(Qt.set(t.elements),e.uniformMatrix4fv(this.addr,!1,Qt))}function ln(e,t,n){var r=n.allocTextureUnit();e.uniform1i(this.addr,r),n.setTexture2D(t||Xt,r)}function hn(e,t,n){var r=n.allocTextureUnit();e.uniform1i(this.addr,r),n.setTextureCube(t||qt,r)}function dn(e,t){e.uniform2iv(this.addr,t)}function pn(e,t){e.uniform3iv(this.addr,t)}function fn(e,t){e.uniform4iv(this.addr,t)}function mn(e,t){e.uniform1fv(this.addr,t)}function vn(e,t){e.uniform1iv(this.addr,t)}function gn(e,t){e.uniform2fv(this.addr,$t(t,this.size,2))}function yn(e,t){e.uniform3fv(this.addr,$t(t,this.size,3))}function bn(e,t){e.uniform4fv(this.addr,$t(t,this.size,4))}function xn(e,t){e.uniformMatrix2fv(this.addr,!1,$t(t,this.size,4))}function _n(e,t){e.uniformMatrix3fv(this.addr,!1,$t(t,this.size,9))}function wn(e,t){e.uniformMatrix4fv(this.addr,!1,$t(t,this.size,16))}function En(e,t,n){var r=t.length,i=en(n,r);e.uniform1iv(this.addr,i);for(var o=0;o!==r;++o)n.setTexture2D(t[o]||Xt,i[o])}function Mn(e,t,n){var r=t.length,i=en(n,r);e.uniform1iv(this.addr,i);for(var o=0;o!==r;++o)n.setTextureCube(t[o]||qt,i[o])}function Tn(e,t,n){this.id=e,this.addr=n,this.setValue=function(e){switch(e){case 5126:return tn;case 35664:return rn;case 35665:return on;case 35666:return an;case 35674:return sn;case 35675:return cn;case 35676:return un;case 35678:case 36198:return ln;case 35680:return hn;case 5124:case 35670:return nn;case 35667:case 35671:return dn;case 35668:case 35672:return pn;case 35669:case 35673:return fn}}(t.type)}function Sn(e,t,n){this.id=e,this.addr=n,this.size=t.size,this.setValue=function(e){switch(e){case 5126:return mn;case 35664:return gn;case 35665:return yn;case 35666:return bn;case 35674:return xn;case 35675:return _n;case 35676:return wn;case 35678:return En;case 35680:return Mn;case 5124:case 35670:return vn;case 35667:case 35671:return dn;case 35668:case 35672:return pn;case 35669:case 35673:return fn}}(t.type)}function An(e){this.id=e,Yt.call(this)}An.prototype.setValue=function(e,t){for(var n=this.seq,r=0,i=n.length;r!==i;++r){var o=n[r];o.setValue(e,t[o.id])}};var Rn=/([\w\d_]+)(\])?(\[|\.)?/g;function Pn(e,t){e.seq.push(t),e.map[t.id]=t}function Ln(e,t,n){var r=e.name,i=r.length;for(Rn.lastIndex=0;;){var o=Rn.exec(r),a=Rn.lastIndex,s=o[1],c="]"===o[2],u=o[3];if(c&&(s|=0),void 0===u||"["===u&&a+2===i){Pn(n,void 0===u?new Tn(s,e,t):new Sn(s,e,t));break}var l=n.map[s];void 0===l&&Pn(n,l=new An(s)),n=l}}function Cn(e,t,n){Yt.call(this),this.renderer=n;for(var r=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),i=0;i<r;++i){var o=e.getActiveUniform(t,i),a=o.name;Ln(o,e.getUniformLocation(t,a),this)}}Cn.prototype.setValue=function(e,t,n){var r=this.map[t];void 0!==r&&r.setValue(e,n,this.renderer)},Cn.prototype.setOptional=function(e,t,n){var r=t[n];void 0!==r&&this.setValue(e,n,r)},Cn.upload=function(e,t,n,r){for(var i=0,o=t.length;i!==o;++i){var a=t[i],s=n[a.id];!1!==s.needsUpdate&&a.setValue(e,s.value,r)}},Cn.seqWithValue=function(e,t){for(var n=[],r=0,i=e.length;r!==i;++r){var o=e[r];o.id in t&&n.push(o)}return n};var On={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function In(e,t,n){return void 0===t&&void 0===n?this.set(e):this.setRGB(e,t,n)}Object.assign(In.prototype,{isColor:!0,r:1,g:1,b:1,set:function(e){return e&&e.isColor?this.copy(e):"number"==typeof e?this.setHex(e):"string"==typeof e&&this.setStyle(e),this},setScalar:function(e){return this.r=e,this.g=e,this.b=e,this},setHex:function(e){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(255&e)/255,this},setRGB:function(e,t,n){return this.r=e,this.g=t,this.b=n,this},setHSL:function(){function e(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+6*(t-e)*(2/3-n):e}return function(t,n,r){if(t=It.euclideanModulo(t,1),n=It.clamp(n,0,1),r=It.clamp(r,0,1),0===n)this.r=this.g=this.b=r;else{var i=r<=.5?r*(1+n):r+n-r*n,o=2*r-i;this.r=e(o,i,t+1/3),this.g=e(o,i,t),this.b=e(o,i,t-1/3)}return this}}(),setStyle:function(e){function t(t){void 0!==t&&parseFloat(t)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}var n;if(n=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(e)){var r,i=n[1],o=n[2];switch(i){case"rgb":case"rgba":if(r=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o))return this.r=Math.min(255,parseInt(r[1],10))/255,this.g=Math.min(255,parseInt(r[2],10))/255,this.b=Math.min(255,parseInt(r[3],10))/255,t(r[5]),this;if(r=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o))return this.r=Math.min(100,parseInt(r[1],10))/100,this.g=Math.min(100,parseInt(r[2],10))/100,this.b=Math.min(100,parseInt(r[3],10))/100,t(r[5]),this;break;case"hsl":case"hsla":if(r=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o)){var a=parseFloat(r[1])/360,s=parseInt(r[2],10)/100,c=parseInt(r[3],10)/100;return t(r[5]),this.setHSL(a,s,c)}}}else if(n=/^\#([A-Fa-f0-9]+)$/.exec(e)){var u,l=(u=n[1]).length;if(3===l)return this.r=parseInt(u.charAt(0)+u.charAt(0),16)/255,this.g=parseInt(u.charAt(1)+u.charAt(1),16)/255,this.b=parseInt(u.charAt(2)+u.charAt(2),16)/255,this;if(6===l)return this.r=parseInt(u.charAt(0)+u.charAt(1),16)/255,this.g=parseInt(u.charAt(2)+u.charAt(3),16)/255,this.b=parseInt(u.charAt(4)+u.charAt(5),16)/255,this}e&&e.length>0&&(void 0!==(u=On[e])?this.setHex(u):console.warn("THREE.Color: Unknown color "+e));return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(e){return this.r=e.r,this.g=e.g,this.b=e.b,this},copyGammaToLinear:function(e,t){return void 0===t&&(t=2),this.r=Math.pow(e.r,t),this.g=Math.pow(e.g,t),this.b=Math.pow(e.b,t),this},copyLinearToGamma:function(e,t){void 0===t&&(t=2);var n=t>0?1/t:1;return this.r=Math.pow(e.r,n),this.g=Math.pow(e.g,n),this.b=Math.pow(e.b,n),this},convertGammaToLinear:function(){var e=this.r,t=this.g,n=this.b;return this.r=e*e,this.g=t*t,this.b=n*n,this},convertLinearToGamma:function(){return this.r=Math.sqrt(this.r),this.g=Math.sqrt(this.g),this.b=Math.sqrt(this.b),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(e){var t,n,r=e||{h:0,s:0,l:0},i=this.r,o=this.g,a=this.b,s=Math.max(i,o,a),c=Math.min(i,o,a),u=(c+s)/2;if(c===s)t=0,n=0;else{var l=s-c;switch(n=u<=.5?l/(s+c):l/(2-s-c),s){case i:t=(o-a)/l+(o<a?6:0);break;case o:t=(a-i)/l+2;break;case a:t=(i-o)/l+4}t/=6}return r.h=t,r.s=n,r.l=u,r},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(e,t,n){var r=this.getHSL();return r.h+=e,r.s+=t,r.l+=n,this.setHSL(r.h,r.s,r.l),this},add:function(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this},addColors:function(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this},addScalar:function(e){return this.r+=e,this.g+=e,this.b+=e,this},sub:function(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this},multiply:function(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this},multiplyScalar:function(e){return this.r*=e,this.g*=e,this.b*=e,this},lerp:function(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this},equals:function(e){return e.r===this.r&&e.g===this.g&&e.b===this.b},fromArray:function(e,t){return void 0===t&&(t=0),this.r=e[t],this.g=e[t+1],this.b=e[t+2],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e},toJSON:function(){return this.getHex()}});var Nn={common:{diffuse:{value:new In(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new Bt},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Nt(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new In(16777215)}},lights:{ambientLightColor:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new In(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},uvTransform:{value:new Bt}}},Dn={merge:function(e){for(var t={},n=0;n<e.length;n++){var r=this.clone(e[n]);for(var i in r)t[i]=r[i]}return t},clone:function(e){var t={};for(var n in e)for(var r in t[n]={},e[n]){var i=e[n][r];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture)?t[n][r]=i.clone():Array.isArray(i)?t[n][r]=i.slice():t[n][r]=i}return t}},Un={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n",alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"\nvec3 transformed = vec3( position );\n",beginnormal_vertex:"\nvec3 objectNormal = vec3( normal );\n",bsdfs:"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t}\n\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat theta = acos( dot( N, V ) );\n\tvec2 uv = vec2(\n\t\tsqrt( saturate( roughness ) ),\n\t\tsaturate( theta / ( 0.5 * PI ) ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.86267 + (0.49788 + 0.01436 * y ) * y;\n\tfloat b = 3.45068 + (4.18814 + y) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = (x > 0.0) ? v : 0.5 * inversesqrt( 1.0 - x * x ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tvec3 result = vec3( LTC_ClippedSphereFormFactor( vectorFormFactor ) );\n\treturn result;\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t\t\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\t\tvec4 plane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t\n\t#endif\n#endif\n",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n",color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n",color_pars_vertex:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\n",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n",defaultnormal_vertex:"vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n",encodings_fragment:"  gl_FragColor = linearToOutputTexel( gl_FragColor );\n",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n",envmap_fragment:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n",envmap_pars_fragment:"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n",envmap_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n",fog_vertex:"\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n",gradientmap_pars_fragment:"#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n",lights_pars:"uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltcMat;\tuniform sampler2D ltcMag;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tfloat norm = texture2D( ltcMag, uv ).a;\n\t\tvec4 t = texture2D( ltcMat, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3(   1,   0, t.y ),\n\t\t\tvec3(   0, t.z,   0 ),\n\t\t\tvec3( t.w,   0, t.x )\n\t\t);\n\t\treflectedLight.directSpecular += lightColor * material.specularColor * norm * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n",lights_template:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif\n",map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n",map_particle_fragment:"#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n",map_particle_pars_fragment:"#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif\n",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n",normal_fragment:"#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n",project_vertex:"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n",dithering_fragment:"#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n",dithering_pars_fragment:"#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n",tonemapping_pars_fragment:"#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n",uv_pars_fragment:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\n",uv_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n",cube_vert:"varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}\n",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}\n",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}\n",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n",equirect_vert:"varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",meshphysical_frag:"#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",meshphysical_vert:"#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n",normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}\n",shadow_vert:"#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n"},kn={basic:{uniforms:Dn.merge([Nn.common,Nn.specularmap,Nn.envmap,Nn.aomap,Nn.lightmap,Nn.fog]),vertexShader:Un.meshbasic_vert,fragmentShader:Un.meshbasic_frag},lambert:{uniforms:Dn.merge([Nn.common,Nn.specularmap,Nn.envmap,Nn.aomap,Nn.lightmap,Nn.emissivemap,Nn.fog,Nn.lights,{emissive:{value:new In(0)}}]),vertexShader:Un.meshlambert_vert,fragmentShader:Un.meshlambert_frag},phong:{uniforms:Dn.merge([Nn.common,Nn.specularmap,Nn.envmap,Nn.aomap,Nn.lightmap,Nn.emissivemap,Nn.bumpmap,Nn.normalmap,Nn.displacementmap,Nn.gradientmap,Nn.fog,Nn.lights,{emissive:{value:new In(0)},specular:{value:new In(1118481)},shininess:{value:30}}]),vertexShader:Un.meshphong_vert,fragmentShader:Un.meshphong_frag},standard:{uniforms:Dn.merge([Nn.common,Nn.envmap,Nn.aomap,Nn.lightmap,Nn.emissivemap,Nn.bumpmap,Nn.normalmap,Nn.displacementmap,Nn.roughnessmap,Nn.metalnessmap,Nn.fog,Nn.lights,{emissive:{value:new In(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:Un.meshphysical_vert,fragmentShader:Un.meshphysical_frag},points:{uniforms:Dn.merge([Nn.points,Nn.fog]),vertexShader:Un.points_vert,fragmentShader:Un.points_frag},dashed:{uniforms:Dn.merge([Nn.common,Nn.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Un.linedashed_vert,fragmentShader:Un.linedashed_frag},depth:{uniforms:Dn.merge([Nn.common,Nn.displacementmap]),vertexShader:Un.depth_vert,fragmentShader:Un.depth_frag},normal:{uniforms:Dn.merge([Nn.common,Nn.bumpmap,Nn.normalmap,Nn.displacementmap,{opacity:{value:1}}]),vertexShader:Un.normal_vert,fragmentShader:Un.normal_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Un.cube_vert,fragmentShader:Un.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Un.equirect_vert,fragmentShader:Un.equirect_frag},distanceRGBA:{uniforms:Dn.merge([Nn.common,Nn.displacementmap,{referencePosition:{value:new kt},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Un.distanceRGBA_vert,fragmentShader:Un.distanceRGBA_frag},shadow:{uniforms:Dn.merge([Nn.lights,Nn.fog,{color:{value:new In(0)},opacity:{value:1}}]),vertexShader:Un.shadow_vert,fragmentShader:Un.shadow_frag}};function Bn(e,t){this.min=void 0!==e?e:new Nt(1/0,1/0),this.max=void 0!==t?t:new Nt(-1/0,-1/0)}function Fn(e,t,n,r,i){var o,a,s,c,u,l,h,d;function p(){var e=new Float32Array([-1,-1,0,0,1,-1,1,0,1,1,1,1,-1,1,0,1]),r=new Uint16Array([0,1,2,0,2,3]);o=t.createBuffer(),a=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,o),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,a),t.bufferData(t.ELEMENT_ARRAY_BUFFER,r,t.STATIC_DRAW),h=t.createTexture(),d=t.createTexture(),n.bindTexture(t.TEXTURE_2D,h),t.texImage2D(t.TEXTURE_2D,0,t.RGB,16,16,0,t.RGB,t.UNSIGNED_BYTE,null),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),n.bindTexture(t.TEXTURE_2D,d),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,16,16,0,t.RGBA,t.UNSIGNED_BYTE,null),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),s={vertexShader:["uniform lowp int renderType;","uniform vec3 screenPosition;","uniform vec2 scale;","uniform float rotation;","uniform sampler2D occlusionMap;","attribute vec2 position;","attribute vec2 uv;","varying vec2 vUV;","varying float vVisibility;","void main() {","\tvUV = uv;","\tvec2 pos = position;","\tif ( renderType == 2 ) {","\t\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );","\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );","\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );","\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );","\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );","\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );","\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );","\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );","\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );","\t\tvVisibility =        visibility.r / 9.0;","\t\tvVisibility *= 1.0 - visibility.g / 9.0;","\t\tvVisibility *=       visibility.b / 9.0;","\t\tvVisibility *= 1.0 - visibility.a / 9.0;","\t\tpos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;","\t\tpos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;","\t}","\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );","}"].join("\n"),fragmentShader:["uniform lowp int renderType;","uniform sampler2D map;","uniform float opacity;","uniform vec3 color;","varying vec2 vUV;","varying float vVisibility;","void main() {","\tif ( renderType == 0 ) {","\t\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );","\t} else if ( renderType == 1 ) {","\t\tgl_FragColor = texture2D( map, vUV );","\t} else {","\t\tvec4 texture = texture2D( map, vUV );","\t\ttexture.a *= opacity * vVisibility;","\t\tgl_FragColor = texture;","\t\tgl_FragColor.rgb *= color;","\t}","}"].join("\n")},c=function(e){var n=t.createProgram(),r=t.createShader(t.FRAGMENT_SHADER),o=t.createShader(t.VERTEX_SHADER),a="precision "+i.precision+" float;\n";return t.shaderSource(r,a+e.fragmentShader),t.shaderSource(o,a+e.vertexShader),t.compileShader(r),t.compileShader(o),t.attachShader(n,r),t.attachShader(n,o),t.linkProgram(n),n}(s),u={vertex:t.getAttribLocation(c,"position"),uv:t.getAttribLocation(c,"uv")},l={renderType:t.getUniformLocation(c,"renderType"),map:t.getUniformLocation(c,"map"),occlusionMap:t.getUniformLocation(c,"occlusionMap"),opacity:t.getUniformLocation(c,"opacity"),color:t.getUniformLocation(c,"color"),scale:t.getUniformLocation(c,"scale"),rotation:t.getUniformLocation(c,"rotation"),screenPosition:t.getUniformLocation(c,"screenPosition")}}this.render=function(e,i,s,f){if(0!==e.length){var m=new kt,v=f.w/f.z,g=.5*f.z,y=.5*f.w,b=16/f.w,x=new Nt(b*v,b),_=new kt(1,1,0),w=new Nt(1,1),E=new Bn;E.min.set(f.x,f.y),E.max.set(f.x+(f.z-16),f.y+(f.w-16)),void 0===c&&p(),n.useProgram(c),n.initAttributes(),n.enableAttribute(u.vertex),n.enableAttribute(u.uv),n.disableUnusedAttributes(),t.uniform1i(l.occlusionMap,0),t.uniform1i(l.map,1),t.bindBuffer(t.ARRAY_BUFFER,o),t.vertexAttribPointer(u.vertex,2,t.FLOAT,!1,16,0),t.vertexAttribPointer(u.uv,2,t.FLOAT,!1,16,8),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,a),n.disable(t.CULL_FACE),n.buffers.depth.setMask(!1);for(var M=0,T=e.length;M<T;M++){b=16/f.w,x.set(b*v,b);var S=e[M];if(m.set(S.matrixWorld.elements[12],S.matrixWorld.elements[13],S.matrixWorld.elements[14]),m.applyMatrix4(s.matrixWorldInverse),m.applyMatrix4(s.projectionMatrix),_.copy(m),w.x=f.x+_.x*g+g-8,w.y=f.y+_.y*y+y-8,!0===E.containsPoint(w)){n.activeTexture(t.TEXTURE0),n.bindTexture(t.TEXTURE_2D,null),n.activeTexture(t.TEXTURE1),n.bindTexture(t.TEXTURE_2D,h),t.copyTexImage2D(t.TEXTURE_2D,0,t.RGB,w.x,w.y,16,16,0),t.uniform1i(l.renderType,0),t.uniform2f(l.scale,x.x,x.y),t.uniform3f(l.screenPosition,_.x,_.y,_.z),n.disable(t.BLEND),n.enable(t.DEPTH_TEST),t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0),n.activeTexture(t.TEXTURE0),n.bindTexture(t.TEXTURE_2D,d),t.copyTexImage2D(t.TEXTURE_2D,0,t.RGBA,w.x,w.y,16,16,0),t.uniform1i(l.renderType,1),n.disable(t.DEPTH_TEST),n.activeTexture(t.TEXTURE1),n.bindTexture(t.TEXTURE_2D,h),t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0),S.positionScreen.copy(_),S.customUpdateCallback?S.customUpdateCallback(S):S.updateLensFlares(),t.uniform1i(l.renderType,2),n.enable(t.BLEND);for(var A=0,R=S.lensFlares.length;A<R;A++){var P=S.lensFlares[A];P.opacity>.001&&P.scale>.001&&(_.x=P.x,_.y=P.y,_.z=P.z,b=P.size*P.scale/f.w,x.x=b*v,x.y=b,t.uniform3f(l.screenPosition,_.x,_.y,_.z),t.uniform2f(l.scale,x.x,x.y),t.uniform1f(l.rotation,P.rotation),t.uniform1f(l.opacity,P.opacity),t.uniform3f(l.color,P.color.r,P.color.g,P.color.b),n.setBlending(P.blending,P.blendEquation,P.blendSrc,P.blendDst),r.setTexture2D(P.texture,1),t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}}}n.enable(t.CULL_FACE),n.enable(t.DEPTH_TEST),n.buffers.depth.setMask(!0),n.reset()}}}function jn(e,t,n,r,i,o,a,s,c){jt.call(this,e,t,n,r,i,o,a,s,c),this.needsUpdate=!0}function zn(e,t,n,r,i){var o,a,s,c,u,l,h=new kt,d=new Ut,p=new kt;function f(){var e=new Float32Array([-.5,-.5,0,0,.5,-.5,1,0,.5,.5,1,1,-.5,.5,0,1]),n=new Uint16Array([0,1,2,0,2,3]);o=t.createBuffer(),a=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,o),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,a),t.bufferData(t.ELEMENT_ARRAY_BUFFER,n,t.STATIC_DRAW),s=function(){var e=t.createProgram(),n=t.createShader(t.VERTEX_SHADER),r=t.createShader(t.FRAGMENT_SHADER);return t.shaderSource(n,["precision "+i.precision+" float;","#define SHADER_NAME SpriteMaterial","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform float rotation;","uniform vec2 scale;","uniform vec2 uvOffset;","uniform vec2 uvScale;","attribute vec2 position;","attribute vec2 uv;","varying vec2 vUV;","varying float fogDepth;","void main() {","\tvUV = uvOffset + uv * uvScale;","\tvec2 alignedPosition = position * scale;","\tvec2 rotatedPosition;","\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;","\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;","\tvec4 mvPosition;","\tmvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );","\tmvPosition.xy += rotatedPosition;","\tgl_Position = projectionMatrix * mvPosition;","\tfogDepth = - mvPosition.z;","}"].join("\n")),t.shaderSource(r,["precision "+i.precision+" float;","#define SHADER_NAME SpriteMaterial","uniform vec3 color;","uniform sampler2D map;","uniform float opacity;","uniform int fogType;","uniform vec3 fogColor;","uniform float fogDensity;","uniform float fogNear;","uniform float fogFar;","uniform float alphaTest;","varying vec2 vUV;","varying float fogDepth;","void main() {","\tvec4 texture = texture2D( map, vUV );","\tgl_FragColor = vec4( color * texture.xyz, texture.a * opacity );","\tif ( gl_FragColor.a < alphaTest ) discard;","\tif ( fogType > 0 ) {","\t\tfloat fogFactor = 0.0;","\t\tif ( fogType == 1 ) {","\t\t\tfogFactor = smoothstep( fogNear, fogFar, fogDepth );","\t\t} else {","\t\t\tconst float LOG2 = 1.442695;","\t\t\tfogFactor = exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 );","\t\t\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );","\t\t}","\t\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );","\t}","}"].join("\n")),t.compileShader(n),t.compileShader(r),t.attachShader(e,n),t.attachShader(e,r),t.linkProgram(e),e}(),c={position:t.getAttribLocation(s,"position"),uv:t.getAttribLocation(s,"uv")},u={uvOffset:t.getUniformLocation(s,"uvOffset"),uvScale:t.getUniformLocation(s,"uvScale"),rotation:t.getUniformLocation(s,"rotation"),scale:t.getUniformLocation(s,"scale"),color:t.getUniformLocation(s,"color"),map:t.getUniformLocation(s,"map"),opacity:t.getUniformLocation(s,"opacity"),modelViewMatrix:t.getUniformLocation(s,"modelViewMatrix"),projectionMatrix:t.getUniformLocation(s,"projectionMatrix"),fogType:t.getUniformLocation(s,"fogType"),fogDensity:t.getUniformLocation(s,"fogDensity"),fogNear:t.getUniformLocation(s,"fogNear"),fogFar:t.getUniformLocation(s,"fogFar"),fogColor:t.getUniformLocation(s,"fogColor"),fogDepth:t.getUniformLocation(s,"fogDepth"),alphaTest:t.getUniformLocation(s,"alphaTest")};var r=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");r.width=8,r.height=8;var h=r.getContext("2d");h.fillStyle="white",h.fillRect(0,0,8,8),l=new jn(r)}function m(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:t.id-e.id}this.render=function(i,v,g){if(0!==i.length){void 0===s&&f(),n.useProgram(s),n.initAttributes(),n.enableAttribute(c.position),n.enableAttribute(c.uv),n.disableUnusedAttributes(),n.disable(t.CULL_FACE),n.enable(t.BLEND),t.bindBuffer(t.ARRAY_BUFFER,o),t.vertexAttribPointer(c.position,2,t.FLOAT,!1,16,0),t.vertexAttribPointer(c.uv,2,t.FLOAT,!1,16,8),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,a),t.uniformMatrix4fv(u.projectionMatrix,!1,g.projectionMatrix.elements),n.activeTexture(t.TEXTURE0),t.uniform1i(u.map,0);var y=0,b=0,x=v.fog;x?(t.uniform3f(u.fogColor,x.color.r,x.color.g,x.color.b),x.isFog?(t.uniform1f(u.fogNear,x.near),t.uniform1f(u.fogFar,x.far),t.uniform1i(u.fogType,1),y=1,b=1):x.isFogExp2&&(t.uniform1f(u.fogDensity,x.density),t.uniform1i(u.fogType,2),y=2,b=2)):(t.uniform1i(u.fogType,0),y=0,b=0);for(var _=0,w=i.length;_<w;_++){(M=i[_]).modelViewMatrix.multiplyMatrices(g.matrixWorldInverse,M.matrixWorld),M.z=-M.modelViewMatrix.elements[14]}i.sort(m);var E=[];for(_=0,w=i.length;_<w;_++){var M,T=(M=i[_]).material;if(!1!==T.visible){M.onBeforeRender(e,v,g,void 0,T,void 0),t.uniform1f(u.alphaTest,T.alphaTest),t.uniformMatrix4fv(u.modelViewMatrix,!1,M.modelViewMatrix.elements),M.matrixWorld.decompose(h,d,p),E[0]=p.x,E[1]=p.y;var S=0;v.fog&&T.fog&&(S=b),y!==S&&(t.uniform1i(u.fogType,S),y=S),null!==T.map?(t.uniform2f(u.uvOffset,T.map.offset.x,T.map.offset.y),t.uniform2f(u.uvScale,T.map.repeat.x,T.map.repeat.y)):(t.uniform2f(u.uvOffset,0,0),t.uniform2f(u.uvScale,1,1)),t.uniform1f(u.opacity,T.opacity),t.uniform3f(u.color,T.color.r,T.color.g,T.color.b),t.uniform1f(u.rotation,T.rotation),t.uniform2fv(u.scale,E),n.setBlending(T.blending,T.blendEquation,T.blendSrc,T.blendDst,T.blendEquationAlpha,T.blendSrcAlpha,T.blendDstAlpha,T.premultipliedAlpha),n.buffers.depth.setTest(T.depthTest),n.buffers.depth.setMask(T.depthWrite),n.buffers.color.setMask(T.colorWrite),r.setTexture2D(T.map||l,0),t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0),M.onAfterRender(e,v,g,void 0,T,void 0)}}n.enable(t.CULL_FACE),n.reset()}}}kn.physical={uniforms:Dn.merge([kn.standard.uniforms,{clearCoat:{value:0},clearCoatRoughness:{value:0}}]),vertexShader:Un.meshphysical_vert,fragmentShader:Un.meshphysical_frag},Object.assign(Bn.prototype,{set:function(e,t){return this.min.copy(e),this.max.copy(t),this},setFromPoints:function(e){this.makeEmpty();for(var t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this},setFromCenterAndSize:function(){var e=new Nt;return function(t,n){var r=e.copy(n).multiplyScalar(.5);return this.min.copy(t).sub(r),this.max.copy(t).add(r),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},getCenter:function(e){var t=e||new Nt;return this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(e){var t=e||new Nt;return this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y},getParameter:function(e,t){return(t||new Nt).set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y)},clampPoint:function(e,t){return(t||new Nt).copy(e).clamp(this.min,this.max)},distanceToPoint:function(){var e=new Nt;return function(t){return e.copy(t).clamp(this.min,this.max).sub(t).length()}}(),intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}),jn.prototype=Object.create(jt.prototype),jn.prototype.constructor=jn;var Gn,Vn,Hn,Wn,Xn,qn,Yn,Kn=0;function Zn(){Object.defineProperty(this,"id",{value:Kn++}),this.uuid=It.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.lights=!0,this.blending=U,this.side=A,this.flatShading=!1,this.vertexColors=O,this.opacity=1,this.transparent=!1,this.blendSrc=Z,this.blendDst=Q,this.blendEquation=z,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=ae,this.depthTest=!0,this.depthWrite=!0,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.overdraw=0,this.visible=!0,this.userData={},this.needsUpdate=!0}function Qn(e){Zn.call(this),this.type="MeshDepthMaterial",this.depthPacking=Ct,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.setValues(e)}function Jn(e){Zn.call(this),this.type="MeshDistanceMaterial",this.referencePosition=new kt,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.lights=!1,this.setValues(e)}function $n(e,t){this.min=void 0!==e?e:new kt(1/0,1/0,1/0),this.max=void 0!==t?t:new kt(-1/0,-1/0,-1/0)}function er(e,t){this.center=void 0!==e?e:new kt,this.radius=void 0!==t?t:0}function tr(e,t){this.normal=void 0!==e?e:new kt(1,0,0),this.constant=void 0!==t?t:0}function nr(e,t,n,r,i,o){this.planes=[void 0!==e?e:new tr,void 0!==t?t:new tr,void 0!==n?n:new tr,void 0!==r?r:new tr,void 0!==i?i:new tr,void 0!==o?o:new tr]}function rr(e,t,n){for(var r=new nr,i=new Dt,o=new Nt,a=new Nt(n,n),s=new kt,c=new kt,u=1,l=2,h=1+(u|l),d=new Array(h),p=new Array(h),f={},m=[new kt(1,0,0),new kt(-1,0,0),new kt(0,0,1),new kt(0,0,-1),new kt(0,1,0),new kt(0,-1,0)],v=[new kt(0,1,0),new kt(0,1,0),new kt(0,1,0),new kt(0,1,0),new kt(0,0,1),new kt(0,0,-1)],g=[new zt,new zt,new zt,new zt,new zt,new zt],y=0;y!==h;++y){var b=0!=(y&u),x=0!=(y&l),_=new Qn({depthPacking:Ot,morphTargets:b,skinning:x});d[y]=_;var w=new Jn({morphTargets:b,skinning:x});p[y]=w}var E=this;function M(t,n,r,i,o,a){var s=t.geometry,c=null,h=d,m=t.customDepthMaterial;if(r&&(h=p,m=t.customDistanceMaterial),m)c=m;else{var v=!1;n.morphTargets&&(s&&s.isBufferGeometry?v=s.morphAttributes&&s.morphAttributes.position&&s.morphAttributes.position.length>0:s&&s.isGeometry&&(v=s.morphTargets&&s.morphTargets.length>0)),t.isSkinnedMesh&&!1===n.skinning&&console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",t);var g=t.isSkinnedMesh&&n.skinning,y=0;v&&(y|=u),g&&(y|=l),c=h[y]}if(e.localClippingEnabled&&!0===n.clipShadows&&0!==n.clippingPlanes.length){var b=c.uuid,x=n.uuid,_=f[b];void 0===_&&(_={},f[b]=_);var w=_[x];void 0===w&&(w=c.clone(),_[x]=w),c=w}c.visible=n.visible,c.wireframe=n.wireframe;var M=n.side;return E.renderSingleSided&&M==P&&(M=A),E.renderReverseSided&&(M===A?M=R:M===R&&(M=A)),c.side=M,c.clipShadows=n.clipShadows,c.clippingPlanes=n.clippingPlanes,c.clipIntersection=n.clipIntersection,c.wireframeLinewidth=n.wireframeLinewidth,c.linewidth=n.linewidth,r&&c.isMeshDistanceMaterial&&(c.referencePosition.copy(i),c.nearDistance=o,c.farDistance=a),c}function S(n,i,o,a){if(!1!==n.visible){if(n.layers.test(i.layers)&&(n.isMesh||n.isLine||n.isPoints)&&n.castShadow&&(!n.frustumCulled||r.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(o.matrixWorldInverse,n.matrixWorld);var s=t.update(n),u=n.material;if(Array.isArray(u))for(var l=s.groups,h=0,d=l.length;h<d;h++){var p=l[h],f=u[p.materialIndex];if(f&&f.visible){var m=M(n,f,a,c,o.near,o.far);e.renderBufferDirect(o,null,s,m,n,p)}}else if(u.visible){m=M(n,u,a,c,o.near,o.far);e.renderBufferDirect(o,null,s,m,n,null)}}for(var v=n.children,g=0,y=v.length;g<y;g++)S(v[g],i,o,a)}}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=T,this.renderReverseSided=!0,this.renderSingleSided=!0,this.render=function(t,n,u){if(!1!==E.enabled&&(!1!==E.autoUpdate||!1!==E.needsUpdate)&&0!==t.length){var l,h=e.context,d=e.state;d.disable(h.BLEND),d.buffers.color.setClear(1,1,1,1),d.buffers.depth.setTest(!0),d.setScissorTest(!1);for(var p=0,f=t.length;p<f;p++){var y=t[p],b=y.shadow,x=y&&y.isPointLight;if(void 0!==b){var _=b.camera;if(o.copy(b.mapSize),o.min(a),x){var w=o.x,M=o.y;g[0].set(2*w,M,w,M),g[1].set(0,M,w,M),g[2].set(3*w,M,w,M),g[3].set(w,M,w,M),g[4].set(3*w,0,w,M),g[5].set(w,0,w,M),o.x*=4,o.y*=2}if(null===b.map){var T={minFilter:Le,magFilter:Le,format:Ze};b.map=new Gt(o.x,o.y,T),b.map.texture.name=y.name+".shadowMap",_.updateProjectionMatrix()}b.isSpotLightShadow&&b.update(y);var A=b.map,R=b.matrix;c.setFromMatrixPosition(y.matrixWorld),_.position.copy(c),x?(l=6,R.makeTranslation(-c.x,-c.y,-c.z)):(l=1,s.setFromMatrixPosition(y.target.matrixWorld),_.lookAt(s),_.updateMatrixWorld(),R.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),R.multiply(_.projectionMatrix),R.multiply(_.matrixWorldInverse)),e.setRenderTarget(A),e.clear();for(var P=0;P<l;P++){if(x){s.copy(_.position),s.add(m[P]),_.up.copy(v[P]),_.lookAt(s),_.updateMatrixWorld();var L=g[P];d.viewport(L)}i.multiplyMatrices(_.projectionMatrix,_.matrixWorldInverse),r.setFromMatrix(i),S(n,u,_,x)}}else console.warn("THREE.WebGLShadowMap:",y,"has no shadow.")}E.needsUpdate=!1}}}function ir(e){var t={};return{get:function(e){return e.isInterleavedBufferAttribute&&(e=e.data),t[e.uuid]},remove:function(n){n.isInterleavedBufferAttribute&&(n=n.data);var r=t[n.uuid];r&&(e.deleteBuffer(r.buffer),delete t[n.uuid])},update:function(n,r){n.isInterleavedBufferAttribute&&(n=n.data);var i=t[n.uuid];void 0===i?t[n.uuid]=function(t,n){var r=t.array,i=t.dynamic?e.DYNAMIC_DRAW:e.STATIC_DRAW,o=e.createBuffer();e.bindBuffer(n,o),e.bufferData(n,r,i),t.onUploadCallback();var a=e.FLOAT;return r instanceof Float32Array?a=e.FLOAT:r instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):r instanceof Uint16Array?a=e.UNSIGNED_SHORT:r instanceof Int16Array?a=e.SHORT:r instanceof Uint32Array?a=e.UNSIGNED_INT:r instanceof Int32Array?a=e.INT:r instanceof Int8Array?a=e.BYTE:r instanceof Uint8Array&&(a=e.UNSIGNED_BYTE),{buffer:o,type:a,bytesPerElement:r.BYTES_PER_ELEMENT,version:t.version}}(n,r):i.version<n.version&&(function(t,n,r){var i=n.array,o=n.updateRange;e.bindBuffer(r,t),!1===n.dynamic?e.bufferData(r,i,e.STATIC_DRAW):-1===o.count?e.bufferSubData(r,0,i):0===o.count?console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually."):(e.bufferSubData(r,o.offset*i.BYTES_PER_ELEMENT,i.subarray(o.offset,o.offset+o.count)),o.count=-1)}(i.buffer,n,r),i.version=n.version)}}}function or(e,t,n,r){this._x=e||0,this._y=t||0,this._z=n||0,this._order=r||or.DefaultOrder}function ar(){this.mask=1}Object.assign(Zn.prototype,r.prototype,{isMaterial:!0,onBeforeCompile:function(){},setValues:function(e){if(void 0!==e)for(var t in e){var n=e[t];if(void 0!==n)if("shading"!==t){var r=this[t];void 0!==r?r&&r.isColor?r.set(n):r&&r.isVector3&&n&&n.isVector3?r.copy(n):this[t]="overdraw"===t?Number(n):n:console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.")}else console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=n===L;else console.warn("THREE.Material: '"+t+"' parameter is undefined.")}},toJSON:function(e){var t=void 0===e||"string"==typeof e;t&&(e={textures:{},images:{}});var n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function r(e){var t=[];for(var n in e){var r=e[n];delete r.metadata,t.push(r)}return t}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearCoat&&(n.clearCoat=this.clearCoat),void 0!==this.clearCoatRoughness&&(n.clearCoatRoughness=this.clearCoatRoughness),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,n.reflectivity=this.reflectivity),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),void 0!==this.size&&(n.size=this.size),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==U&&(n.blending=this.blending),!0===this.flatShading&&(n.flatShading=this.flatShading),this.side!==A&&(n.side=this.side),this.vertexColors!==O&&(n.vertexColors=this.vertexColors),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,0!==this.rotation&&(n.rotation=this.rotation),1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(n.morphTargets=!0),!0===this.skinning&&(n.skinning=!0),!1===this.visible&&(n.visible=!1),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),t){var i=r(e.textures),o=r(e.images);i.length>0&&(n.textures=i),o.length>0&&(n.images=o)}return n},clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.name=e.name,this.fog=e.fog,this.lights=e.lights,this.blending=e.blending,this.side=e.side,this.flatShading=e.flatShading,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.premultipliedAlpha=e.premultipliedAlpha,this.overdraw=e.overdraw,this.visible=e.visible,this.userData=JSON.parse(JSON.stringify(e.userData)),this.clipShadows=e.clipShadows,this.clipIntersection=e.clipIntersection;var t=e.clippingPlanes,n=null;if(null!==t){var r=t.length;n=new Array(r);for(var i=0;i!==r;++i)n[i]=t[i].clone()}return this.clippingPlanes=n,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Qn.prototype=Object.create(Zn.prototype),Qn.prototype.constructor=Qn,Qn.prototype.isMeshDepthMaterial=!0,Qn.prototype.copy=function(e){return Zn.prototype.copy.call(this,e),this.depthPacking=e.depthPacking,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this},Jn.prototype=Object.create(Zn.prototype),Jn.prototype.constructor=Jn,Jn.prototype.isMeshDistanceMaterial=!0,Jn.prototype.copy=function(e){return Zn.prototype.copy.call(this,e),this.referencePosition.copy(e.referencePosition),this.nearDistance=e.nearDistance,this.farDistance=e.farDistance,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this},Object.assign($n.prototype,{isBox3:!0,set:function(e,t){return this.min.copy(e),this.max.copy(t),this},setFromArray:function(e){for(var t=1/0,n=1/0,r=1/0,i=-1/0,o=-1/0,a=-1/0,s=0,c=e.length;s<c;s+=3){var u=e[s],l=e[s+1],h=e[s+2];u<t&&(t=u),l<n&&(n=l),h<r&&(r=h),u>i&&(i=u),l>o&&(o=l),h>a&&(a=h)}return this.min.set(t,n,r),this.max.set(i,o,a),this},setFromBufferAttribute:function(e){for(var t=1/0,n=1/0,r=1/0,i=-1/0,o=-1/0,a=-1/0,s=0,c=e.count;s<c;s++){var u=e.getX(s),l=e.getY(s),h=e.getZ(s);u<t&&(t=u),l<n&&(n=l),h<r&&(r=h),u>i&&(i=u),l>o&&(o=l),h>a&&(a=h)}return this.min.set(t,n,r),this.max.set(i,o,a),this},setFromPoints:function(e){this.makeEmpty();for(var t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this},setFromCenterAndSize:function(){var e=new kt;return function(t,n){var r=e.copy(n).multiplyScalar(.5);return this.min.copy(t).sub(r),this.max.copy(t).add(r),this}}(),setFromObject:function(e){return this.makeEmpty(),this.expandByObject(e)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(e){var t=e||new kt;return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(e){var t=e||new kt;return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},expandByObject:function(){var e,t,n,r=new kt;function i(i){var o=i.geometry;if(void 0!==o)if(o.isGeometry){var a=o.vertices;for(t=0,n=a.length;t<n;t++)r.copy(a[t]),r.applyMatrix4(i.matrixWorld),e.expandByPoint(r)}else if(o.isBufferGeometry){var s=o.attributes.position;if(void 0!==s)for(t=0,n=s.count;t<n;t++)r.fromBufferAttribute(s,t).applyMatrix4(i.matrixWorld),e.expandByPoint(r)}}return function(t){return e=this,t.updateMatrixWorld(!0),t.traverse(i),this}}(),containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z},getParameter:function(e,t){return(t||new kt).set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)},intersectsSphere:(Vn=new kt,function(e){return this.clampPoint(e.center,Vn),Vn.distanceToSquared(e.center)<=e.radius*e.radius}),intersectsPlane:function(e){var t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=e.constant&&n>=e.constant},clampPoint:function(e,t){return(t||new kt).copy(e).clamp(this.min,this.max)},distanceToPoint:function(){var e=new kt;return function(t){return e.copy(t).clamp(this.min,this.max).sub(t).length()}}(),getBoundingSphere:function(){var e=new kt;return function(t){var n=t||new er;return this.getCenter(n.center),n.radius=.5*this.getSize(e).length(),n}}(),intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},applyMatrix4:(Gn=[new kt,new kt,new kt,new kt,new kt,new kt,new kt,new kt],function(e){return this.isEmpty()?this:(Gn[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),Gn[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),Gn[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),Gn[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),Gn[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),Gn[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),Gn[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),Gn[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(Gn),this)}),translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}),Object.assign(er.prototype,{set:function(e,t){return this.center.copy(e),this.radius=t,this},setFromPoints:(Hn=new $n,function(e,t){var n=this.center;void 0!==t?n.copy(t):Hn.setFromPoints(e).getCenter(n);for(var r=0,i=0,o=e.length;i<o;i++)r=Math.max(r,n.distanceToSquared(e[i]));return this.radius=Math.sqrt(r),this}),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.center.copy(e.center),this.radius=e.radius,this},empty:function(){return this.radius<=0},containsPoint:function(e){return e.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(e){return e.distanceTo(this.center)-this.radius},intersectsSphere:function(e){var t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t},intersectsBox:function(e){return e.intersectsSphere(this)},intersectsPlane:function(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius},clampPoint:function(e,t){var n=this.center.distanceToSquared(e),r=t||new kt;return r.copy(e),n>this.radius*this.radius&&(r.sub(this.center).normalize(),r.multiplyScalar(this.radius).add(this.center)),r},getBoundingBox:function(e){var t=e||new $n;return t.set(this.center,this.center),t.expandByScalar(this.radius),t},applyMatrix4:function(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this},translate:function(e){return this.center.add(e),this},equals:function(e){return e.center.equals(this.center)&&e.radius===this.radius}}),Object.assign(tr.prototype,{set:function(e,t){return this.normal.copy(e),this.constant=t,this},setComponents:function(e,t,n,r){return this.normal.set(e,t,n),this.constant=r,this},setFromNormalAndCoplanarPoint:function(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this},setFromCoplanarPoints:function(){var e=new kt,t=new kt;return function(n,r,i){var o=e.subVectors(i,r).cross(t.subVectors(n,r)).normalize();return this.setFromNormalAndCoplanarPoint(o,n),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.normal.copy(e.normal),this.constant=e.constant,this},normalize:function(){var e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(e){return this.normal.dot(e)+this.constant},distanceToSphere:function(e){return this.distanceToPoint(e.center)-e.radius},projectPoint:function(e,t){return(t||new kt).copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e)},intersectLine:function(){var e=new kt;return function(t,n){var r=n||new kt,i=t.delta(e),o=this.normal.dot(i);if(0===o)return 0===this.distanceToPoint(t.start)?r.copy(t.start):void 0;var a=-(t.start.dot(this.normal)+this.constant)/o;return a<0||a>1?void 0:r.copy(i).multiplyScalar(a).add(t.start)}}(),intersectsLine:function(e){var t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0},intersectsBox:function(e){return e.intersectsPlane(this)},intersectsSphere:function(e){return e.intersectsPlane(this)},coplanarPoint:function(e){return(e||new kt).copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var e=new kt,t=new Bt;return function(n,r){var i=r||t.getNormalMatrix(n),o=this.coplanarPoint(e).applyMatrix4(n),a=this.normal.applyMatrix3(i).normalize();return this.constant=-o.dot(a),this}}(),translate:function(e){return this.constant-=e.dot(this.normal),this},equals:function(e){return e.normal.equals(this.normal)&&e.constant===this.constant}}),Object.assign(nr.prototype,{set:function(e,t,n,r,i,o){var a=this.planes;return a[0].copy(e),a[1].copy(t),a[2].copy(n),a[3].copy(r),a[4].copy(i),a[5].copy(o),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){for(var t=this.planes,n=0;n<6;n++)t[n].copy(e.planes[n]);return this},setFromMatrix:function(e){var t=this.planes,n=e.elements,r=n[0],i=n[1],o=n[2],a=n[3],s=n[4],c=n[5],u=n[6],l=n[7],h=n[8],d=n[9],p=n[10],f=n[11],m=n[12],v=n[13],g=n[14],y=n[15];return t[0].setComponents(a-r,l-s,f-h,y-m).normalize(),t[1].setComponents(a+r,l+s,f+h,y+m).normalize(),t[2].setComponents(a+i,l+c,f+d,y+v).normalize(),t[3].setComponents(a-i,l-c,f-d,y-v).normalize(),t[4].setComponents(a-o,l-u,f-p,y-g).normalize(),t[5].setComponents(a+o,l+u,f+p,y+g).normalize(),this},intersectsObject:(qn=new er,function(e){var t=e.geometry;return null===t.boundingSphere&&t.computeBoundingSphere(),qn.copy(t.boundingSphere).applyMatrix4(e.matrixWorld),this.intersectsSphere(qn)}),intersectsSprite:function(){var e=new er;return function(t){return e.center.set(0,0,0),e.radius=.7071067811865476,e.applyMatrix4(t.matrixWorld),this.intersectsSphere(e)}}(),intersectsSphere:function(e){for(var t=this.planes,n=e.center,r=-e.radius,i=0;i<6;i++){if(t[i].distanceToPoint(n)<r)return!1}return!0},intersectsBox:(Wn=new kt,Xn=new kt,function(e){for(var t=this.planes,n=0;n<6;n++){var r=t[n];Wn.x=r.normal.x>0?e.min.x:e.max.x,Xn.x=r.normal.x>0?e.max.x:e.min.x,Wn.y=r.normal.y>0?e.min.y:e.max.y,Xn.y=r.normal.y>0?e.max.y:e.min.y,Wn.z=r.normal.z>0?e.min.z:e.max.z,Xn.z=r.normal.z>0?e.max.z:e.min.z;var i=r.distanceToPoint(Wn),o=r.distanceToPoint(Xn);if(i<0&&o<0)return!1}return!0}),containsPoint:function(e){for(var t=this.planes,n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}}),or.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"],or.DefaultOrder="XYZ",Object.defineProperties(or.prototype,{x:{get:function(){return this._x},set:function(e){this._x=e,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(e){this._y=e,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(e){this._z=e,this.onChangeCallback()}},order:{get:function(){return this._order},set:function(e){this._order=e,this.onChangeCallback()}}}),Object.assign(or.prototype,{isEuler:!0,set:function(e,t,n,r){return this._x=e,this._y=t,this._z=n,this._order=r||this._order,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this.onChangeCallback(),this},setFromRotationMatrix:function(e,t,n){var r=It.clamp,i=e.elements,o=i[0],a=i[4],s=i[8],c=i[1],u=i[5],l=i[9],h=i[2],d=i[6],p=i[10];return"XYZ"===(t=t||this._order)?(this._y=Math.asin(r(s,-1,1)),Math.abs(s)<.99999?(this._x=Math.atan2(-l,p),this._z=Math.atan2(-a,o)):(this._x=Math.atan2(d,u),this._z=0)):"YXZ"===t?(this._x=Math.asin(-r(l,-1,1)),Math.abs(l)<.99999?(this._y=Math.atan2(s,p),this._z=Math.atan2(c,u)):(this._y=Math.atan2(-h,o),this._z=0)):"ZXY"===t?(this._x=Math.asin(r(d,-1,1)),Math.abs(d)<.99999?(this._y=Math.atan2(-h,p),this._z=Math.atan2(-a,u)):(this._y=0,this._z=Math.atan2(c,o))):"ZYX"===t?(this._y=Math.asin(-r(h,-1,1)),Math.abs(h)<.99999?(this._x=Math.atan2(d,p),this._z=Math.atan2(c,o)):(this._x=0,this._z=Math.atan2(-a,u))):"YZX"===t?(this._z=Math.asin(r(c,-1,1)),Math.abs(c)<.99999?(this._x=Math.atan2(-l,u),this._y=Math.atan2(-h,o)):(this._x=0,this._y=Math.atan2(s,p))):"XZY"===t?(this._z=Math.asin(-r(a,-1,1)),Math.abs(a)<.99999?(this._x=Math.atan2(d,u),this._y=Math.atan2(s,o)):(this._x=Math.atan2(-l,p),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+t),this._order=t,!1!==n&&this.onChangeCallback(),this},setFromQuaternion:function(){var e=new Dt;return function(t,n,r){return e.makeRotationFromQuaternion(t),this.setFromRotationMatrix(e,n,r)}}(),setFromVector3:function(e,t){return this.set(e.x,e.y,e.z,t||this._order)},reorder:(Yn=new Ut,function(e){return Yn.setFromEuler(this),this.setFromQuaternion(Yn,e)}),equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order},fromArray:function(e){return this._x=e[0],this._y=e[1],this._z=e[2],void 0!==e[3]&&(this._order=e[3]),this.onChangeCallback(),this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e},toVector3:function(e){return e?e.set(this._x,this._y,this._z):new kt(this._x,this._y,this._z)},onChange:function(e){return this.onChangeCallback=e,this},onChangeCallback:function(){}}),Object.assign(ar.prototype,{set:function(e){this.mask=1<<e|0},enable:function(e){this.mask|=1<<e|0},toggle:function(e){this.mask^=1<<e|0},disable:function(e){this.mask&=~(1<<e|0)},test:function(e){return 0!=(this.mask&e.mask)}});var sr,cr,ur,lr,hr=0;function dr(){Object.defineProperty(this,"id",{value:hr++}),this.uuid=It.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=dr.DefaultUp.clone();var e=new kt,t=new or,n=new Ut,r=new kt(1,1,1);t.onChange(function(){n.setFromEuler(t,!1)}),n.onChange(function(){t.setFromQuaternion(n,void 0,!1)}),Object.defineProperties(this,{position:{enumerable:!0,value:e},rotation:{enumerable:!0,value:t},quaternion:{enumerable:!0,value:n},scale:{enumerable:!0,value:r},modelViewMatrix:{value:new Dt},normalMatrix:{value:new Bt}}),this.matrix=new Dt,this.matrixWorld=new Dt,this.matrixAutoUpdate=dr.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new ar,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}}function pr(){dr.call(this),this.type="Camera",this.matrixWorldInverse=new Dt,this.projectionMatrix=new Dt}function fr(e,t,n,r,i,o){pr.call(this),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=r,this.near=void 0!==i?i:.1,this.far=void 0!==o?o:2e3,this.updateProjectionMatrix()}function mr(e,t,n,r,i,o){this.a=e,this.b=t,this.c=n,this.normal=r&&r.isVector3?r:new kt,this.vertexNormals=Array.isArray(r)?r:[],this.color=i&&i.isColor?i:new In,this.vertexColors=Array.isArray(i)?i:[],this.materialIndex=void 0!==o?o:0}dr.DefaultUp=new kt(0,1,0),dr.DefaultMatrixAutoUpdate=!0,Object.assign(dr.prototype,r.prototype,{isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix:function(e){this.matrix.multiplyMatrices(e,this.matrix),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(e){return this.quaternion.premultiply(e),this},setRotationFromAxisAngle:function(e,t){this.quaternion.setFromAxisAngle(e,t)},setRotationFromEuler:function(e){this.quaternion.setFromEuler(e,!0)},setRotationFromMatrix:function(e){this.quaternion.setFromRotationMatrix(e)},setRotationFromQuaternion:function(e){this.quaternion.copy(e)},rotateOnAxis:(lr=new Ut,function(e,t){return lr.setFromAxisAngle(e,t),this.quaternion.multiply(lr),this}),rotateOnWorldAxis:function(){var e=new Ut;return function(t,n){return e.setFromAxisAngle(t,n),this.quaternion.premultiply(e),this}}(),rotateX:function(){var e=new kt(1,0,0);return function(t){return this.rotateOnAxis(e,t)}}(),rotateY:function(){var e=new kt(0,1,0);return function(t){return this.rotateOnAxis(e,t)}}(),rotateZ:function(){var e=new kt(0,0,1);return function(t){return this.rotateOnAxis(e,t)}}(),translateOnAxis:function(){var e=new kt;return function(t,n){return e.copy(t).applyQuaternion(this.quaternion),this.position.add(e.multiplyScalar(n)),this}}(),translateX:function(){var e=new kt(1,0,0);return function(t){return this.translateOnAxis(e,t)}}(),translateY:function(){var e=new kt(0,1,0);return function(t){return this.translateOnAxis(e,t)}}(),translateZ:function(){var e=new kt(0,0,1);return function(t){return this.translateOnAxis(e,t)}}(),localToWorld:function(e){return e.applyMatrix4(this.matrixWorld)},worldToLocal:(ur=new Dt,function(e){return e.applyMatrix4(ur.getInverse(this.matrixWorld))}),lookAt:function(){var e=new Dt,t=new kt;return function(n,r,i){n.isVector3?t.copy(n):t.set(n,r,i),this.isCamera?e.lookAt(this.position,t,this.up):e.lookAt(t,this.position,this.up),this.quaternion.setFromRotationMatrix(e)}}(),add:function(e){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(null!==e.parent&&e.parent.remove(e),e.parent=this,e.dispatchEvent({type:"added"}),this.children.push(e)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)},remove:function(e){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}var n=this.children.indexOf(e);return-1!==n&&(e.parent=null,e.dispatchEvent({type:"removed"}),this.children.splice(n,1)),this},getObjectById:function(e){return this.getObjectByProperty("id",e)},getObjectByName:function(e){return this.getObjectByProperty("name",e)},getObjectByProperty:function(e,t){if(this[e]===t)return this;for(var n=0,r=this.children.length;n<r;n++){var i=this.children[n].getObjectByProperty(e,t);if(void 0!==i)return i}},getWorldPosition:function(e){var t=e||new kt;return this.updateMatrixWorld(!0),t.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:(sr=new kt,cr=new kt,function(e){var t=e||new Ut;return this.updateMatrixWorld(!0),this.matrixWorld.decompose(sr,t,cr),t}),getWorldRotation:function(){var e=new Ut;return function(t){var n=t||new or;return this.getWorldQuaternion(e),n.setFromQuaternion(e,this.rotation.order,!1)}}(),getWorldScale:function(){var e=new kt,t=new Ut;return function(n){var r=n||new kt;return this.updateMatrixWorld(!0),this.matrixWorld.decompose(e,t,r),r}}(),getWorldDirection:function(){var e=new Ut;return function(t){var n=t||new kt;return this.getWorldQuaternion(e),n.set(0,0,1).applyQuaternion(e)}}(),raycast:function(){},traverse:function(e){e(this);for(var t=this.children,n=0,r=t.length;n<r;n++)t[n].traverse(e)},traverseVisible:function(e){if(!1!==this.visible){e(this);for(var t=this.children,n=0,r=t.length;n<r;n++)t[n].traverseVisible(e)}},traverseAncestors:function(e){var t=this.parent;null!==t&&(e(t),t.traverseAncestors(e))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);for(var t=this.children,n=0,r=t.length;n<r;n++)t[n].updateMatrixWorld(e)},toJSON:function(e){var t=void 0===e||"string"==typeof e,n={};t&&(e={geometries:{},materials:{},textures:{},images:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});var r={};function i(t,n){return void 0===t[n.uuid]&&(t[n.uuid]=n.toJSON(e)),n.uuid}if(r.uuid=this.uuid,r.type=this.type,""!==this.name&&(r.name=this.name),!0===this.castShadow&&(r.castShadow=!0),!0===this.receiveShadow&&(r.receiveShadow=!0),!1===this.visible&&(r.visible=!1),"{}"!==JSON.stringify(this.userData)&&(r.userData=this.userData),r.matrix=this.matrix.toArray(),void 0!==this.geometry&&(r.geometry=i(e.geometries,this.geometry)),void 0!==this.material)if(Array.isArray(this.material)){for(var o=[],a=0,s=this.material.length;a<s;a++)o.push(i(e.materials,this.material[a]));r.material=o}else r.material=i(e.materials,this.material);if(this.children.length>0){r.children=[];for(a=0;a<this.children.length;a++)r.children.push(this.children[a].toJSON(e).object)}if(t){var c=d(e.geometries),u=d(e.materials),l=d(e.textures),h=d(e.images);c.length>0&&(n.geometries=c),u.length>0&&(n.materials=u),l.length>0&&(n.textures=l),h.length>0&&(n.images=h)}return n.object=r,n;function d(e){var t=[];for(var n in e){var r=e[n];delete r.metadata,t.push(r)}return t}},clone:function(e){return(new this.constructor).copy(this,e)},copy:function(e,t){if(void 0===t&&(t=!0),this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.userData=JSON.parse(JSON.stringify(e.userData)),!0===t)for(var n=0;n<e.children.length;n++){var r=e.children[n];this.add(r.clone())}return this}}),pr.prototype=Object.assign(Object.create(dr.prototype),{constructor:pr,isCamera:!0,copy:function(e,t){return dr.prototype.copy.call(this,e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this},getWorldDirection:function(){var e=new Ut;return function(t){var n=t||new kt;return this.getWorldQuaternion(e),n.set(0,0,-1).applyQuaternion(e)}}(),updateMatrixWorld:function(e){dr.prototype.updateMatrixWorld.call(this,e),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return(new this.constructor).copy(this)}}),fr.prototype=Object.assign(Object.create(pr.prototype),{constructor:fr,isOrthographicCamera:!0,copy:function(e,t){return pr.prototype.copy.call(this,e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=null===e.view?null:Object.assign({},e.view),this},setViewOffset:function(e,t,n,r,i,o){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=r,this.view.width=i,this.view.height=o,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,r=(this.top+this.bottom)/2,i=n-e,o=n+e,a=r+t,s=r-t;if(null!==this.view&&this.view.enabled){var c=this.zoom/(this.view.width/this.view.fullWidth),u=this.zoom/(this.view.height/this.view.fullHeight),l=(this.right-this.left)/this.view.width,h=(this.top-this.bottom)/this.view.height;o=(i+=l*(this.view.offsetX/c))+l*(this.view.width/c),s=(a-=h*(this.view.offsetY/u))-h*(this.view.height/u)}this.projectionMatrix.makeOrthographic(i,o,a,s,this.near,this.far)},toJSON:function(e){var t=dr.prototype.toJSON.call(this,e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,null!==this.view&&(t.object.view=Object.assign({},this.view)),t}}),Object.assign(mr.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.a=e.a,this.b=e.b,this.c=e.c,this.normal.copy(e.normal),this.color.copy(e.color),this.materialIndex=e.materialIndex;for(var t=0,n=e.vertexNormals.length;t<n;t++)this.vertexNormals[t]=e.vertexNormals[t].clone();for(t=0,n=e.vertexColors.length;t<n;t++)this.vertexColors[t]=e.vertexColors[t].clone();return this}});var vr,gr=0;function yr(){Object.defineProperty(this,"id",{value:gr+=2}),this.uuid=It.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}function br(e,t,n){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.uuid=It.generateUUID(),this.name="",this.array=e,this.itemSize=t,this.count=void 0!==e?e.length/t:0,this.normalized=!0===n,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.onUploadCallback=function(){},this.version=0}function xr(e,t,n){br.call(this,new Int8Array(e),t,n)}function _r(e,t,n){br.call(this,new Uint8Array(e),t,n)}function wr(e,t,n){br.call(this,new Uint8ClampedArray(e),t,n)}function Er(e,t,n){br.call(this,new Int16Array(e),t,n)}function Mr(e,t,n){br.call(this,new Uint16Array(e),t,n)}function Tr(e,t,n){br.call(this,new Int32Array(e),t,n)}function Sr(e,t,n){br.call(this,new Uint32Array(e),t,n)}function Ar(e,t,n){br.call(this,new Float32Array(e),t,n)}function Rr(e,t,n){br.call(this,new Float64Array(e),t,n)}function Pr(){this.indices=[],this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}function Lr(e){if(0===e.length)return-1/0;for(var t=e[0],n=1,r=e.length;n<r;++n)e[n]>t&&(t=e[n]);return t}Object.assign(yr.prototype,r.prototype,{isGeometry:!0,applyMatrix:function(e){for(var t=(new Bt).getNormalMatrix(e),n=0,r=this.vertices.length;n<r;n++){this.vertices[n].applyMatrix4(e)}for(n=0,r=this.faces.length;n<r;n++){var i=this.faces[n];i.normal.applyMatrix3(t).normalize();for(var o=0,a=i.vertexNormals.length;o<a;o++)i.vertexNormals[o].applyMatrix3(t).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(){var e=new Dt;return function(t){return e.makeRotationX(t),this.applyMatrix(e),this}}(),rotateY:function(){var e=new Dt;return function(t){return e.makeRotationY(t),this.applyMatrix(e),this}}(),rotateZ:function(){var e=new Dt;return function(t){return e.makeRotationZ(t),this.applyMatrix(e),this}}(),translate:function(){var e=new Dt;return function(t,n,r){return e.makeTranslation(t,n,r),this.applyMatrix(e),this}}(),scale:function(){var e=new Dt;return function(t,n,r){return e.makeScale(t,n,r),this.applyMatrix(e),this}}(),lookAt:(vr=new dr,function(e){vr.lookAt(e),vr.updateMatrix(),this.applyMatrix(vr.matrix)}),fromBufferGeometry:function(e){var t=this,n=null!==e.index?e.index.array:void 0,r=e.attributes,i=r.position.array,o=void 0!==r.normal?r.normal.array:void 0,a=void 0!==r.color?r.color.array:void 0,s=void 0!==r.uv?r.uv.array:void 0,c=void 0!==r.uv2?r.uv2.array:void 0;void 0!==c&&(this.faceVertexUvs[1]=[]);for(var u=[],l=[],h=[],d=0,p=0;d<i.length;d+=3,p+=2)t.vertices.push(new kt(i[d],i[d+1],i[d+2])),void 0!==o&&u.push(new kt(o[d],o[d+1],o[d+2])),void 0!==a&&t.colors.push(new In(a[d],a[d+1],a[d+2])),void 0!==s&&l.push(new Nt(s[p],s[p+1])),void 0!==c&&h.push(new Nt(c[p],c[p+1]));function f(e,n,r,i){var d=new mr(e,n,r,void 0!==o?[u[e].clone(),u[n].clone(),u[r].clone()]:[],void 0!==a?[t.colors[e].clone(),t.colors[n].clone(),t.colors[r].clone()]:[],i);t.faces.push(d),void 0!==s&&t.faceVertexUvs[0].push([l[e].clone(),l[n].clone(),l[r].clone()]),void 0!==c&&t.faceVertexUvs[1].push([h[e].clone(),h[n].clone(),h[r].clone()])}var m=e.groups;if(m.length>0)for(d=0;d<m.length;d++)for(var v=m[d],g=v.start,y=(p=g,g+v.count);p<y;p+=3)void 0!==n?f(n[p],n[p+1],n[p+2],v.materialIndex):f(p,p+1,p+2,v.materialIndex);else if(void 0!==n)for(d=0;d<n.length;d+=3)f(n[d],n[d+1],n[d+2]);else for(d=0;d<i.length/3;d+=3)f(d,d+1,d+2);return this.computeFaceNormals(),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),this},center:function(){this.computeBoundingBox();var e=this.boundingBox.getCenter().negate();return this.translate(e.x,e.y,e.z),e},normalize:function(){this.computeBoundingSphere();var e=this.boundingSphere.center,t=this.boundingSphere.radius,n=0===t?1:1/t,r=new Dt;return r.set(n,0,0,-n*e.x,0,n,0,-n*e.y,0,0,n,-n*e.z,0,0,0,1),this.applyMatrix(r),this},computeFaceNormals:function(){for(var e=new kt,t=new kt,n=0,r=this.faces.length;n<r;n++){var i=this.faces[n],o=this.vertices[i.a],a=this.vertices[i.b],s=this.vertices[i.c];e.subVectors(s,a),t.subVectors(o,a),e.cross(t),e.normalize(),i.normal.copy(e)}},computeVertexNormals:function(e){var t,n,r,i,o,a;for(void 0===e&&(e=!0),a=new Array(this.vertices.length),t=0,n=this.vertices.length;t<n;t++)a[t]=new kt;if(e){var s,c,u,l=new kt,h=new kt;for(r=0,i=this.faces.length;r<i;r++)o=this.faces[r],s=this.vertices[o.a],c=this.vertices[o.b],u=this.vertices[o.c],l.subVectors(u,c),h.subVectors(s,c),l.cross(h),a[o.a].add(l),a[o.b].add(l),a[o.c].add(l)}else for(this.computeFaceNormals(),r=0,i=this.faces.length;r<i;r++)a[(o=this.faces[r]).a].add(o.normal),a[o.b].add(o.normal),a[o.c].add(o.normal);for(t=0,n=this.vertices.length;t<n;t++)a[t].normalize();for(r=0,i=this.faces.length;r<i;r++){var d=(o=this.faces[r]).vertexNormals;3===d.length?(d[0].copy(a[o.a]),d[1].copy(a[o.b]),d[2].copy(a[o.c])):(d[0]=a[o.a].clone(),d[1]=a[o.b].clone(),d[2]=a[o.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var e,t,n;for(this.computeFaceNormals(),e=0,t=this.faces.length;e<t;e++){var r=(n=this.faces[e]).vertexNormals;3===r.length?(r[0].copy(n.normal),r[1].copy(n.normal),r[2].copy(n.normal)):(r[0]=n.normal.clone(),r[1]=n.normal.clone(),r[2]=n.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var e,t,n,r,i;for(n=0,r=this.faces.length;n<r;n++)for((i=this.faces[n]).__originalFaceNormal?i.__originalFaceNormal.copy(i.normal):i.__originalFaceNormal=i.normal.clone(),i.__originalVertexNormals||(i.__originalVertexNormals=[]),e=0,t=i.vertexNormals.length;e<t;e++)i.__originalVertexNormals[e]?i.__originalVertexNormals[e].copy(i.vertexNormals[e]):i.__originalVertexNormals[e]=i.vertexNormals[e].clone();var o=new yr;for(o.faces=this.faces,e=0,t=this.morphTargets.length;e<t;e++){if(!this.morphNormals[e]){this.morphNormals[e]={},this.morphNormals[e].faceNormals=[],this.morphNormals[e].vertexNormals=[];var a=this.morphNormals[e].faceNormals,s=this.morphNormals[e].vertexNormals;for(n=0,r=this.faces.length;n<r;n++)c=new kt,u={a:new kt,b:new kt,c:new kt},a.push(c),s.push(u)}var c,u,l=this.morphNormals[e];for(o.vertices=this.morphTargets[e].vertices,o.computeFaceNormals(),o.computeVertexNormals(),n=0,r=this.faces.length;n<r;n++)i=this.faces[n],c=l.faceNormals[n],u=l.vertexNormals[n],c.copy(i.normal),u.a.copy(i.vertexNormals[0]),u.b.copy(i.vertexNormals[1]),u.c.copy(i.vertexNormals[2])}for(n=0,r=this.faces.length;n<r;n++)(i=this.faces[n]).normal=i.__originalFaceNormal,i.vertexNormals=i.__originalVertexNormals},computeLineDistances:function(){for(var e=0,t=this.vertices,n=0,r=t.length;n<r;n++)n>0&&(e+=t[n].distanceTo(t[n-1])),this.lineDistances[n]=e},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new $n),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new er),this.boundingSphere.setFromPoints(this.vertices)},merge:function(e,t,n){if(e&&e.isGeometry){var r,i=this.vertices.length,o=this.vertices,a=e.vertices,s=this.faces,c=e.faces,u=this.faceVertexUvs[0],l=e.faceVertexUvs[0],h=this.colors,d=e.colors;void 0===n&&(n=0),void 0!==t&&(r=(new Bt).getNormalMatrix(t));for(var p=0,f=a.length;p<f;p++){var m=a[p].clone();void 0!==t&&m.applyMatrix4(t),o.push(m)}for(p=0,f=d.length;p<f;p++)h.push(d[p].clone());for(p=0,f=c.length;p<f;p++){var v,g,y,b=c[p],x=b.vertexNormals,_=b.vertexColors;(v=new mr(b.a+i,b.b+i,b.c+i)).normal.copy(b.normal),void 0!==r&&v.normal.applyMatrix3(r).normalize();for(var w=0,E=x.length;w<E;w++)g=x[w].clone(),void 0!==r&&g.applyMatrix3(r).normalize(),v.vertexNormals.push(g);v.color.copy(b.color);for(w=0,E=_.length;w<E;w++)y=_[w],v.vertexColors.push(y.clone());v.materialIndex=b.materialIndex+n,s.push(v)}for(p=0,f=l.length;p<f;p++){var M=l[p],T=[];if(void 0!==M){for(w=0,E=M.length;w<E;w++)T.push(M[w].clone());u.push(T)}}}else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",e)},mergeMesh:function(e){e&&e.isMesh?(e.matrixAutoUpdate&&e.updateMatrix(),this.merge(e.geometry,e.matrix)):console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",e)},mergeVertices:function(){var e,t,n,r,i,o,a,s,c={},u=[],l=[],h=Math.pow(10,4);for(n=0,r=this.vertices.length;n<r;n++)e=this.vertices[n],void 0===c[t=Math.round(e.x*h)+"_"+Math.round(e.y*h)+"_"+Math.round(e.z*h)]?(c[t]=n,u.push(this.vertices[n]),l[n]=u.length-1):l[n]=l[c[t]];var d=[];for(n=0,r=this.faces.length;n<r;n++){(i=this.faces[n]).a=l[i.a],i.b=l[i.b],i.c=l[i.c],o=[i.a,i.b,i.c];for(var p=0;p<3;p++)if(o[p]===o[(p+1)%3]){d.push(n);break}}for(n=d.length-1;n>=0;n--){var f=d[n];for(this.faces.splice(f,1),a=0,s=this.faceVertexUvs.length;a<s;a++)this.faceVertexUvs[a].splice(f,1)}var m=this.vertices.length-u.length;return this.vertices=u,m},setFromPoints:function(e){this.vertices=[];for(var t=0,n=e.length;t<n;t++){var r=e[t];this.vertices.push(new kt(r.x,r.y,r.z||0))}return this},sortFacesByMaterialIndex:function(){for(var e=this.faces,t=e.length,n=0;n<t;n++)e[n]._id=n;e.sort(function(e,t){return e.materialIndex-t.materialIndex});var r,i,o=this.faceVertexUvs[0],a=this.faceVertexUvs[1];o&&o.length===t&&(r=[]),a&&a.length===t&&(i=[]);for(n=0;n<t;n++){var s=e[n]._id;r&&r.push(o[s]),i&&i.push(a[s])}r&&(this.faceVertexUvs[0]=r),i&&(this.faceVertexUvs[1]=i)},toJSON:function(){var e={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),void 0!==this.parameters){var t=this.parameters;for(var n in t)void 0!==t[n]&&(e[n]=t[n]);return e}for(var r=[],i=0;i<this.vertices.length;i++){var o=this.vertices[i];r.push(o.x,o.y,o.z)}var a=[],s=[],c={},u=[],l={},h=[],d={};for(i=0;i<this.faces.length;i++){var p=this.faces[i],f=void 0!==this.faceVertexUvs[0][i],m=p.normal.length()>0,v=p.vertexNormals.length>0,g=1!==p.color.r||1!==p.color.g||1!==p.color.b,y=p.vertexColors.length>0,b=0;if(b=E(b=E(b=E(b=E(b=E(b=E(b=E(b=E(b,0,0),1,!0),2,!1),3,f),4,m),5,v),6,g),7,y),a.push(b),a.push(p.a,p.b,p.c),a.push(p.materialIndex),f){var x=this.faceVertexUvs[0][i];a.push(S(x[0]),S(x[1]),S(x[2]))}if(m&&a.push(M(p.normal)),v){var _=p.vertexNormals;a.push(M(_[0]),M(_[1]),M(_[2]))}if(g&&a.push(T(p.color)),y){var w=p.vertexColors;a.push(T(w[0]),T(w[1]),T(w[2]))}}function E(e,t,n){return n?e|1<<t:e&~(1<<t)}function M(e){var t=e.x.toString()+e.y.toString()+e.z.toString();return void 0!==c[t]?c[t]:(c[t]=s.length/3,s.push(e.x,e.y,e.z),c[t])}function T(e){var t=e.r.toString()+e.g.toString()+e.b.toString();return void 0!==l[t]?l[t]:(l[t]=u.length,u.push(e.getHex()),l[t])}function S(e){var t=e.x.toString()+e.y.toString();return void 0!==d[t]?d[t]:(d[t]=h.length/2,h.push(e.x,e.y),d[t])}return e.data={},e.data.vertices=r,e.data.normals=s,u.length>0&&(e.data.colors=u),h.length>0&&(e.data.uvs=[h]),e.data.faces=a,e},clone:function(){return(new yr).copy(this)},copy:function(e){var t,n,r,i,o,a;this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=e.name;var s=e.vertices;for(t=0,n=s.length;t<n;t++)this.vertices.push(s[t].clone());var c=e.colors;for(t=0,n=c.length;t<n;t++)this.colors.push(c[t].clone());var u=e.faces;for(t=0,n=u.length;t<n;t++)this.faces.push(u[t].clone());for(t=0,n=e.faceVertexUvs.length;t<n;t++){var l=e.faceVertexUvs[t];for(void 0===this.faceVertexUvs[t]&&(this.faceVertexUvs[t]=[]),r=0,i=l.length;r<i;r++){var h=l[r],d=[];for(o=0,a=h.length;o<a;o++){var p=h[o];d.push(p.clone())}this.faceVertexUvs[t].push(d)}}var f=e.morphTargets;for(t=0,n=f.length;t<n;t++){var m={};if(m.name=f[t].name,void 0!==f[t].vertices)for(m.vertices=[],r=0,i=f[t].vertices.length;r<i;r++)m.vertices.push(f[t].vertices[r].clone());if(void 0!==f[t].normals)for(m.normals=[],r=0,i=f[t].normals.length;r<i;r++)m.normals.push(f[t].normals[r].clone());this.morphTargets.push(m)}var v=e.morphNormals;for(t=0,n=v.length;t<n;t++){var g={};if(void 0!==v[t].vertexNormals)for(g.vertexNormals=[],r=0,i=v[t].vertexNormals.length;r<i;r++){var y=v[t].vertexNormals[r],b={};b.a=y.a.clone(),b.b=y.b.clone(),b.c=y.c.clone(),g.vertexNormals.push(b)}if(void 0!==v[t].faceNormals)for(g.faceNormals=[],r=0,i=v[t].faceNormals.length;r<i;r++)g.faceNormals.push(v[t].faceNormals[r].clone());this.morphNormals.push(g)}var x=e.skinWeights;for(t=0,n=x.length;t<n;t++)this.skinWeights.push(x[t].clone());var _=e.skinIndices;for(t=0,n=_.length;t<n;t++)this.skinIndices.push(_[t].clone());var w=e.lineDistances;for(t=0,n=w.length;t<n;t++)this.lineDistances.push(w[t]);var E=e.boundingBox;null!==E&&(this.boundingBox=E.clone());var M=e.boundingSphere;return null!==M&&(this.boundingSphere=M.clone()),this.elementsNeedUpdate=e.elementsNeedUpdate,this.verticesNeedUpdate=e.verticesNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.lineDistancesNeedUpdate=e.lineDistancesNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Object.defineProperty(br.prototype,"needsUpdate",{set:function(e){!0===e&&this.version++}}),Object.assign(br.prototype,{isBufferAttribute:!0,setArray:function(e){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.count=void 0!==e?e.length/this.itemSize:0,this.array=e},setDynamic:function(e){return this.dynamic=e,this},copy:function(e){return this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.dynamic=e.dynamic,this},copyAt:function(e,t,n){e*=this.itemSize,n*=t.itemSize;for(var r=0,i=this.itemSize;r<i;r++)this.array[e+r]=t.array[n+r];return this},copyArray:function(e){return this.array.set(e),this},copyColorsArray:function(e){for(var t=this.array,n=0,r=0,i=e.length;r<i;r++){var o=e[r];void 0===o&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",r),o=new In),t[n++]=o.r,t[n++]=o.g,t[n++]=o.b}return this},copyIndicesArray:function(e){for(var t=this.array,n=0,r=0,i=e.length;r<i;r++){var o=e[r];t[n++]=o.a,t[n++]=o.b,t[n++]=o.c}return this},copyVector2sArray:function(e){for(var t=this.array,n=0,r=0,i=e.length;r<i;r++){var o=e[r];void 0===o&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",r),o=new Nt),t[n++]=o.x,t[n++]=o.y}return this},copyVector3sArray:function(e){for(var t=this.array,n=0,r=0,i=e.length;r<i;r++){var o=e[r];void 0===o&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",r),o=new kt),t[n++]=o.x,t[n++]=o.y,t[n++]=o.z}return this},copyVector4sArray:function(e){for(var t=this.array,n=0,r=0,i=e.length;r<i;r++){var o=e[r];void 0===o&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",r),o=new zt),t[n++]=o.x,t[n++]=o.y,t[n++]=o.z,t[n++]=o.w}return this},set:function(e,t){return void 0===t&&(t=0),this.array.set(e,t),this},getX:function(e){return this.array[e*this.itemSize]},setX:function(e,t){return this.array[e*this.itemSize]=t,this},getY:function(e){return this.array[e*this.itemSize+1]},setY:function(e,t){return this.array[e*this.itemSize+1]=t,this},getZ:function(e){return this.array[e*this.itemSize+2]},setZ:function(e,t){return this.array[e*this.itemSize+2]=t,this},getW:function(e){return this.array[e*this.itemSize+3]},setW:function(e,t){return this.array[e*this.itemSize+3]=t,this},setXY:function(e,t,n){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this},setXYZ:function(e,t,n,r){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=r,this},setXYZW:function(e,t,n,r,i){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=r,this.array[e+3]=i,this},onUpload:function(e){return this.onUploadCallback=e,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)}}),xr.prototype=Object.create(br.prototype),xr.prototype.constructor=xr,_r.prototype=Object.create(br.prototype),_r.prototype.constructor=_r,wr.prototype=Object.create(br.prototype),wr.prototype.constructor=wr,Er.prototype=Object.create(br.prototype),Er.prototype.constructor=Er,Mr.prototype=Object.create(br.prototype),Mr.prototype.constructor=Mr,Tr.prototype=Object.create(br.prototype),Tr.prototype.constructor=Tr,Sr.prototype=Object.create(br.prototype),Sr.prototype.constructor=Sr,Ar.prototype=Object.create(br.prototype),Ar.prototype.constructor=Ar,Rr.prototype=Object.create(br.prototype),Rr.prototype.constructor=Rr,Object.assign(Pr.prototype,{computeGroups:function(e){for(var t,n=[],r=void 0,i=e.faces,o=0;o<i.length;o++){var a=i[o];a.materialIndex!==r&&(r=a.materialIndex,void 0!==t&&(t.count=3*o-t.start,n.push(t)),t={start:3*o,materialIndex:r})}void 0!==t&&(t.count=3*o-t.start,n.push(t)),this.groups=n},fromGeometry:function(e){var t,n=e.faces,r=e.vertices,i=e.faceVertexUvs,o=i[0]&&i[0].length>0,a=i[1]&&i[1].length>0,s=e.morphTargets,c=s.length;if(c>0){t=[];for(var u=0;u<c;u++)t[u]=[];this.morphTargets.position=t}var l,h=e.morphNormals,d=h.length;if(d>0){l=[];for(u=0;u<d;u++)l[u]=[];this.morphTargets.normal=l}var p=e.skinIndices,f=e.skinWeights,m=p.length===r.length,v=f.length===r.length;for(u=0;u<n.length;u++){var g=n[u];this.vertices.push(r[g.a],r[g.b],r[g.c]);var y=g.vertexNormals;if(3===y.length)this.normals.push(y[0],y[1],y[2]);else{var b=g.normal;this.normals.push(b,b,b)}var x,_=g.vertexColors;if(3===_.length)this.colors.push(_[0],_[1],_[2]);else{var w=g.color;this.colors.push(w,w,w)}if(!0===o)void 0!==(x=i[0][u])?this.uvs.push(x[0],x[1],x[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",u),this.uvs.push(new Nt,new Nt,new Nt));if(!0===a)void 0!==(x=i[1][u])?this.uvs2.push(x[0],x[1],x[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",u),this.uvs2.push(new Nt,new Nt,new Nt));for(var E=0;E<c;E++){var M=s[E].vertices;t[E].push(M[g.a],M[g.b],M[g.c])}for(E=0;E<d;E++){var T=h[E].vertexNormals[u];l[E].push(T.a,T.b,T.c)}m&&this.skinIndices.push(p[g.a],p[g.b],p[g.c]),v&&this.skinWeights.push(f[g.a],f[g.b],f[g.c])}return this.computeGroups(e),this.verticesNeedUpdate=e.verticesNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,this}});var Cr,Or,Ir,Nr,Dr,Ur,kr,Br=1;function Fr(){Object.defineProperty(this,"id",{value:Br+=2}),this.uuid=It.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0}}function jr(e,t,n,r,i,o){yr.call(this),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:r,heightSegments:i,depthSegments:o},this.fromBufferGeometry(new zr(e,t,n,r,i,o)),this.mergeVertices()}function zr(e,t,n,r,i,o){Fr.call(this),this.type="BoxBufferGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:r,heightSegments:i,depthSegments:o};var a=this;e=e||1,t=t||1,n=n||1,r=Math.floor(r)||1,i=Math.floor(i)||1;var s=[],c=[],u=[],l=[],h=0,d=0;function p(e,t,n,r,i,o,p,f,m,v,g){var y,b,x=o/m,_=p/v,w=o/2,E=p/2,M=f/2,T=m+1,S=v+1,A=0,R=0,P=new kt;for(b=0;b<S;b++){var L=b*_-E;for(y=0;y<T;y++){var C=y*x-w;P[e]=C*r,P[t]=L*i,P[n]=M,c.push(P.x,P.y,P.z),P[e]=0,P[t]=0,P[n]=f>0?1:-1,u.push(P.x,P.y,P.z),l.push(y/m),l.push(1-b/v),A+=1}}for(b=0;b<v;b++)for(y=0;y<m;y++){var O=h+y+T*b,I=h+y+T*(b+1),N=h+(y+1)+T*(b+1),D=h+(y+1)+T*b;s.push(O,I,D),s.push(I,N,D),R+=6}a.addGroup(d,R,g),d+=R,h+=A}p("z","y","x",-1,-1,n,t,e,o=Math.floor(o)||1,i,0),p("z","y","x",1,-1,n,t,-e,o,i,1),p("x","z","y",1,1,e,n,t,r,o,2),p("x","z","y",1,-1,e,n,-t,r,o,3),p("x","y","z",1,-1,e,t,n,r,i,4),p("x","y","z",-1,-1,e,t,-n,r,i,5),this.setIndex(s),this.addAttribute("position",new Ar(c,3)),this.addAttribute("normal",new Ar(u,3)),this.addAttribute("uv",new Ar(l,2))}function Gr(e,t,n,r){yr.call(this),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:r},this.fromBufferGeometry(new Vr(e,t,n,r)),this.mergeVertices()}function Vr(e,t,n,r){Fr.call(this),this.type="PlaneBufferGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:r};var i,o,a=(e=e||1)/2,s=(t=t||1)/2,c=Math.floor(n)||1,u=Math.floor(r)||1,l=c+1,h=u+1,d=e/c,p=t/u,f=[],m=[],v=[],g=[];for(o=0;o<h;o++){var y=o*p-s;for(i=0;i<l;i++){var b=i*d-a;m.push(b,-y,0),v.push(0,0,1),g.push(i/c),g.push(1-o/u)}}for(o=0;o<u;o++)for(i=0;i<c;i++){var x=i+l*o,_=i+l*(o+1),w=i+1+l*(o+1),E=i+1+l*o;f.push(x,_,E),f.push(_,w,E)}this.setIndex(f),this.addAttribute("position",new Ar(m,3)),this.addAttribute("normal",new Ar(v,3)),this.addAttribute("uv",new Ar(g,2))}function Hr(e){Zn.call(this),this.type="MeshBasicMaterial",this.color=new In(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=he,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.lights=!1,this.setValues(e)}function Wr(e){Zn.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,void 0!==e&&(void 0!==e.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(e))}function Xr(e,t){this.origin=void 0!==e?e:new kt,this.direction=void 0!==t?t:new kt}function qr(e,t){this.start=void 0!==e?e:new kt,this.end=void 0!==t?t:new kt}function Yr(e,t,n){this.a=void 0!==e?e:new kt,this.b=void 0!==t?t:new kt,this.c=void 0!==n?n:new kt}function Kr(e,t){dr.call(this),this.type="Mesh",this.geometry=void 0!==e?e:new Fr,this.material=void 0!==t?t:new Hr({color:16777215*Math.random()}),this.drawMode=xt,this.updateMorphTargets()}function Zr(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program&&t.program&&e.program!==t.program?e.program.id-t.program.id:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function Qr(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function Jr(){var e={};return{get:function(t,n){var r=t.id+","+n.id,i=e[r];return void 0===i&&(i=new function(){var e=[],t=0,n=[],r=[];return{opaque:n,transparent:r,init:function(){t=0,n.length=0,r.length=0},push:function(i,o,a,s,c){var u=e[t];void 0===u?(u={id:i.id,object:i,geometry:o,material:a,program:a.program,renderOrder:i.renderOrder,z:s,group:c},e[t]=u):(u.id=i.id,u.object=i,u.geometry=o,u.material=a,u.program=a.program,u.renderOrder=i.renderOrder,u.z=s,u.group=c),(!0===a.transparent?r:n).push(u),t++},sort:function(){n.length>1&&n.sort(Zr),r.length>1&&r.sort(Qr)}}},e[r]=i),i},dispose:function(){e={}}}}function $r(e,t){return Math.abs(t[1])-Math.abs(e[1])}function ei(){var e=new function(){var e={};return{get:function(t){if(void 0!==e[t.id])return e[t.id];var n;switch(t.type){case"DirectionalLight":n={direction:new kt,color:new In,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new Nt};break;case"SpotLight":n={position:new kt,direction:new kt,color:new In,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new Nt};break;case"PointLight":n={position:new kt,color:new In,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new Nt,shadowCameraNear:1,shadowCameraFar:1e3};break;case"HemisphereLight":n={direction:new kt,skyColor:new In,groundColor:new In};break;case"RectAreaLight":n={color:new In,position:new kt,halfWidth:new kt,halfHeight:new kt}}return e[t.id]=n,n}}},t={hash:"",ambient:[0,0,0],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]},n=new kt,r=new Dt,i=new Dt;return{setup:function(o,a,s){for(var c=0,u=0,l=0,h=0,d=0,p=0,f=0,m=0,v=s.matrixWorldInverse,g=0,y=o.length;g<y;g++){var b=o[g],x=b.color,_=b.intensity,w=b.distance,E=b.shadow&&b.shadow.map?b.shadow.map.texture:null;if(b.isAmbientLight)c+=x.r*_,u+=x.g*_,l+=x.b*_;else if(b.isDirectionalLight){if((T=e.get(b)).color.copy(b.color).multiplyScalar(b.intensity),T.direction.setFromMatrixPosition(b.matrixWorld),n.setFromMatrixPosition(b.target.matrixWorld),T.direction.sub(n),T.direction.transformDirection(v),T.shadow=b.castShadow,b.castShadow){var M=b.shadow;T.shadowBias=M.bias,T.shadowRadius=M.radius,T.shadowMapSize=M.mapSize}t.directionalShadowMap[h]=E,t.directionalShadowMatrix[h]=b.shadow.matrix,t.directional[h]=T,h++}else if(b.isSpotLight)(T=e.get(b)).position.setFromMatrixPosition(b.matrixWorld),T.position.applyMatrix4(v),T.color.copy(x).multiplyScalar(_),T.distance=w,T.direction.setFromMatrixPosition(b.matrixWorld),n.setFromMatrixPosition(b.target.matrixWorld),T.direction.sub(n),T.direction.transformDirection(v),T.coneCos=Math.cos(b.angle),T.penumbraCos=Math.cos(b.angle*(1-b.penumbra)),T.decay=0===b.distance?0:b.decay,T.shadow=b.castShadow,b.castShadow&&(M=b.shadow,T.shadowBias=M.bias,T.shadowRadius=M.radius,T.shadowMapSize=M.mapSize),t.spotShadowMap[p]=E,t.spotShadowMatrix[p]=b.shadow.matrix,t.spot[p]=T,p++;else if(b.isRectAreaLight)(T=e.get(b)).color.copy(x).multiplyScalar(_/(b.width*b.height)),T.position.setFromMatrixPosition(b.matrixWorld),T.position.applyMatrix4(v),i.identity(),r.copy(b.matrixWorld),r.premultiply(v),i.extractRotation(r),T.halfWidth.set(.5*b.width,0,0),T.halfHeight.set(0,.5*b.height,0),T.halfWidth.applyMatrix4(i),T.halfHeight.applyMatrix4(i),t.rectArea[f]=T,f++;else if(b.isPointLight)(T=e.get(b)).position.setFromMatrixPosition(b.matrixWorld),T.position.applyMatrix4(v),T.color.copy(b.color).multiplyScalar(b.intensity),T.distance=b.distance,T.decay=0===b.distance?0:b.decay,T.shadow=b.castShadow,b.castShadow&&(M=b.shadow,T.shadowBias=M.bias,T.shadowRadius=M.radius,T.shadowMapSize=M.mapSize,T.shadowCameraNear=M.camera.near,T.shadowCameraFar=M.camera.far),t.pointShadowMap[d]=E,t.pointShadowMatrix[d]=b.shadow.matrix,t.point[d]=T,d++;else if(b.isHemisphereLight){var T;(T=e.get(b)).direction.setFromMatrixPosition(b.matrixWorld),T.direction.transformDirection(v),T.direction.normalize(),T.skyColor.copy(b.color).multiplyScalar(_),T.groundColor.copy(b.groundColor).multiplyScalar(_),t.hemi[m]=T,m++}}t.ambient[0]=c,t.ambient[1]=u,t.ambient[2]=l,t.directional.length=h,t.spot.length=p,t.rectArea.length=f,t.point.length=d,t.hemi.length=m,t.hash=h+","+d+","+p+","+f+","+m+","+a.length},state:t}}function ti(e,t,n){var r=e.createShader(t);return e.shaderSource(r,n),e.compileShader(r),!1===e.getShaderParameter(r,e.COMPILE_STATUS)&&console.error("THREE.WebGLShader: Shader couldn't compile."),""!==e.getShaderInfoLog(r)&&console.warn("THREE.WebGLShader: gl.getShaderInfoLog()",t===e.VERTEX_SHADER?"vertex":"fragment",e.getShaderInfoLog(r),function(e){for(var t=e.split("\n"),n=0;n<t.length;n++)t[n]=n+1+": "+t[n];return t.join("\n")}(n)),r}Object.assign(Fr.prototype,r.prototype,{isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(e){Array.isArray(e)?this.index=new(Lr(e)>65535?Sr:Mr)(e,1):this.index=e},addAttribute:function(e,t){return t&&t.isBufferAttribute||t&&t.isInterleavedBufferAttribute?"index"===e?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),void this.setIndex(t)):(this.attributes[e]=t,this):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),void this.addAttribute(e,new br(arguments[1],arguments[2])))},getAttribute:function(e){return this.attributes[e]},removeAttribute:function(e){return delete this.attributes[e],this},addGroup:function(e,t,n){this.groups.push({start:e,count:t,materialIndex:void 0!==n?n:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(e,t){this.drawRange.start=e,this.drawRange.count=t},applyMatrix:function(e){var t=this.attributes.position;void 0!==t&&(e.applyToBufferAttribute(t),t.needsUpdate=!0);var n=this.attributes.normal;void 0!==n&&((new Bt).getNormalMatrix(e).applyToBufferAttribute(n),n.needsUpdate=!0);return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(){var e=new Dt;return function(t){return e.makeRotationX(t),this.applyMatrix(e),this}}(),rotateY:function(){var e=new Dt;return function(t){return e.makeRotationY(t),this.applyMatrix(e),this}}(),rotateZ:function(){var e=new Dt;return function(t){return e.makeRotationZ(t),this.applyMatrix(e),this}}(),translate:function(){var e=new Dt;return function(t,n,r){return e.makeTranslation(t,n,r),this.applyMatrix(e),this}}(),scale:function(){var e=new Dt;return function(t,n,r){return e.makeScale(t,n,r),this.applyMatrix(e),this}}(),lookAt:function(){var e=new dr;return function(t){e.lookAt(t),e.updateMatrix(),this.applyMatrix(e.matrix)}}(),center:function(){this.computeBoundingBox();var e=this.boundingBox.getCenter().negate();return this.translate(e.x,e.y,e.z),e},setFromObject:function(e){var t=e.geometry;if(e.isPoints||e.isLine){var n=new Ar(3*t.vertices.length,3),r=new Ar(3*t.colors.length,3);if(this.addAttribute("position",n.copyVector3sArray(t.vertices)),this.addAttribute("color",r.copyColorsArray(t.colors)),t.lineDistances&&t.lineDistances.length===t.vertices.length){var i=new Ar(t.lineDistances.length,1);this.addAttribute("lineDistance",i.copyArray(t.lineDistances))}null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone())}else e.isMesh&&t&&t.isGeometry&&this.fromGeometry(t);return this},setFromPoints:function(e){for(var t=[],n=0,r=e.length;n<r;n++){var i=e[n];t.push(i.x,i.y,i.z||0)}return this.addAttribute("position",new Ar(t,3)),this},updateFromObject:function(e){var t,n=e.geometry;if(e.isMesh){var r=n.__directGeometry;if(!0===n.elementsNeedUpdate&&(r=void 0,n.elementsNeedUpdate=!1),void 0===r)return this.fromGeometry(n);r.verticesNeedUpdate=n.verticesNeedUpdate,r.normalsNeedUpdate=n.normalsNeedUpdate,r.colorsNeedUpdate=n.colorsNeedUpdate,r.uvsNeedUpdate=n.uvsNeedUpdate,r.groupsNeedUpdate=n.groupsNeedUpdate,n.verticesNeedUpdate=!1,n.normalsNeedUpdate=!1,n.colorsNeedUpdate=!1,n.uvsNeedUpdate=!1,n.groupsNeedUpdate=!1,n=r}return!0===n.verticesNeedUpdate&&(void 0!==(t=this.attributes.position)&&(t.copyVector3sArray(n.vertices),t.needsUpdate=!0),n.verticesNeedUpdate=!1),!0===n.normalsNeedUpdate&&(void 0!==(t=this.attributes.normal)&&(t.copyVector3sArray(n.normals),t.needsUpdate=!0),n.normalsNeedUpdate=!1),!0===n.colorsNeedUpdate&&(void 0!==(t=this.attributes.color)&&(t.copyColorsArray(n.colors),t.needsUpdate=!0),n.colorsNeedUpdate=!1),n.uvsNeedUpdate&&(void 0!==(t=this.attributes.uv)&&(t.copyVector2sArray(n.uvs),t.needsUpdate=!0),n.uvsNeedUpdate=!1),n.lineDistancesNeedUpdate&&(void 0!==(t=this.attributes.lineDistance)&&(t.copyArray(n.lineDistances),t.needsUpdate=!0),n.lineDistancesNeedUpdate=!1),n.groupsNeedUpdate&&(n.computeGroups(e.geometry),this.groups=n.groups,n.groupsNeedUpdate=!1),this},fromGeometry:function(e){return e.__directGeometry=(new Pr).fromGeometry(e),this.fromDirectGeometry(e.__directGeometry)},fromDirectGeometry:function(e){var t=new Float32Array(3*e.vertices.length);if(this.addAttribute("position",new br(t,3).copyVector3sArray(e.vertices)),e.normals.length>0){var n=new Float32Array(3*e.normals.length);this.addAttribute("normal",new br(n,3).copyVector3sArray(e.normals))}if(e.colors.length>0){var r=new Float32Array(3*e.colors.length);this.addAttribute("color",new br(r,3).copyColorsArray(e.colors))}if(e.uvs.length>0){var i=new Float32Array(2*e.uvs.length);this.addAttribute("uv",new br(i,2).copyVector2sArray(e.uvs))}if(e.uvs2.length>0){var o=new Float32Array(2*e.uvs2.length);this.addAttribute("uv2",new br(o,2).copyVector2sArray(e.uvs2))}if(e.indices.length>0){var a=new(Lr(e.indices)>65535?Uint32Array:Uint16Array)(3*e.indices.length);this.setIndex(new br(a,1).copyIndicesArray(e.indices))}for(var s in this.groups=e.groups,e.morphTargets){for(var c=[],u=e.morphTargets[s],l=0,h=u.length;l<h;l++){var d=u[l],p=new Ar(3*d.length,3);c.push(p.copyVector3sArray(d))}this.morphAttributes[s]=c}if(e.skinIndices.length>0){var f=new Ar(4*e.skinIndices.length,4);this.addAttribute("skinIndex",f.copyVector4sArray(e.skinIndices))}if(e.skinWeights.length>0){var m=new Ar(4*e.skinWeights.length,4);this.addAttribute("skinWeight",m.copyVector4sArray(e.skinWeights))}return null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new $n);var e=this.attributes.position;void 0!==e?this.boundingBox.setFromBufferAttribute(e):this.boundingBox.makeEmpty(),(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){var e=new $n,t=new kt;return function(){null===this.boundingSphere&&(this.boundingSphere=new er);var n=this.attributes.position;if(n){var r=this.boundingSphere.center;e.setFromBufferAttribute(n),e.getCenter(r);for(var i=0,o=0,a=n.count;o<a;o++)t.x=n.getX(o),t.y=n.getY(o),t.z=n.getZ(o),i=Math.max(i,r.distanceToSquared(t));this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var e=this.index,t=this.attributes,n=this.groups;if(t.position){var r=t.position.array;if(void 0===t.normal)this.addAttribute("normal",new br(new Float32Array(r.length),3));else for(var i=t.normal.array,o=0,a=i.length;o<a;o++)i[o]=0;var s,c,u,l=t.normal.array,h=new kt,d=new kt,p=new kt,f=new kt,m=new kt;if(e){var v=e.array;0===n.length&&this.addGroup(0,v.length);for(var g=0,y=n.length;g<y;++g){var b=n[g],x=b.start;for(o=x,a=x+b.count;o<a;o+=3)s=3*v[o+0],c=3*v[o+1],u=3*v[o+2],h.fromArray(r,s),d.fromArray(r,c),p.fromArray(r,u),f.subVectors(p,d),m.subVectors(h,d),f.cross(m),l[s]+=f.x,l[s+1]+=f.y,l[s+2]+=f.z,l[c]+=f.x,l[c+1]+=f.y,l[c+2]+=f.z,l[u]+=f.x,l[u+1]+=f.y,l[u+2]+=f.z}}else for(o=0,a=r.length;o<a;o+=9)h.fromArray(r,o),d.fromArray(r,o+3),p.fromArray(r,o+6),f.subVectors(p,d),m.subVectors(h,d),f.cross(m),l[o]=f.x,l[o+1]=f.y,l[o+2]=f.z,l[o+3]=f.x,l[o+4]=f.y,l[o+5]=f.z,l[o+6]=f.x,l[o+7]=f.y,l[o+8]=f.z;this.normalizeNormals(),t.normal.needsUpdate=!0}},merge:function(e,t){if(e&&e.isBufferGeometry){void 0===t&&(t=0);var n=this.attributes;for(var r in n)if(void 0!==e.attributes[r])for(var i=n[r].array,o=e.attributes[r],a=o.array,s=0,c=o.itemSize*t;s<a.length;s++,c++)i[c]=a[s];return this}console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",e)},normalizeNormals:function(){var e=new kt;return function(){for(var t=this.attributes.normal,n=0,r=t.count;n<r;n++)e.x=t.getX(n),e.y=t.getY(n),e.z=t.getZ(n),e.normalize(),t.setXYZ(n,e.x,e.y,e.z)}}(),toNonIndexed:function(){if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var e=new Fr,t=this.index.array,n=this.attributes;for(var r in n){for(var i=n[r],o=i.array,a=i.itemSize,s=new o.constructor(t.length*a),c=0,u=0,l=0,h=t.length;l<h;l++){c=t[l]*a;for(var d=0;d<a;d++)s[u++]=o[c++]}e.addAttribute(r,new br(s,a))}return e},toJSON:function(){var e={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),void 0!==this.parameters){var t=this.parameters;for(var n in t)void 0!==t[n]&&(e[n]=t[n]);return e}e.data={attributes:{}};var r=this.index;if(null!==r){var i=Array.prototype.slice.call(r.array);e.data.index={type:r.array.constructor.name,array:i}}var o=this.attributes;for(var n in o){var a=o[n];i=Array.prototype.slice.call(a.array);e.data.attributes[n]={itemSize:a.itemSize,type:a.array.constructor.name,array:i,normalized:a.normalized}}var s=this.groups;s.length>0&&(e.data.groups=JSON.parse(JSON.stringify(s)));var c=this.boundingSphere;return null!==c&&(e.data.boundingSphere={center:c.center.toArray(),radius:c.radius}),e},clone:function(){return(new Fr).copy(this)},copy:function(e){var t,n,r;this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.name=e.name;var i=e.index;null!==i&&this.setIndex(i.clone());var o=e.attributes;for(t in o){var a=o[t];this.addAttribute(t,a.clone())}var s=e.morphAttributes;for(t in s){var c=[],u=s[t];for(n=0,r=u.length;n<r;n++)c.push(u[n].clone());this.morphAttributes[t]=c}var l=e.groups;for(n=0,r=l.length;n<r;n++){var h=l[n];this.addGroup(h.start,h.count,h.materialIndex)}var d=e.boundingBox;null!==d&&(this.boundingBox=d.clone());var p=e.boundingSphere;return null!==p&&(this.boundingSphere=p.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),jr.prototype=Object.create(yr.prototype),jr.prototype.constructor=jr,zr.prototype=Object.create(Fr.prototype),zr.prototype.constructor=zr,Gr.prototype=Object.create(yr.prototype),Gr.prototype.constructor=Gr,Vr.prototype=Object.create(Fr.prototype),Vr.prototype.constructor=Vr,Hr.prototype=Object.create(Zn.prototype),Hr.prototype.constructor=Hr,Hr.prototype.isMeshBasicMaterial=!0,Hr.prototype.copy=function(e){return Zn.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this},Wr.prototype=Object.create(Zn.prototype),Wr.prototype.constructor=Wr,Wr.prototype.isShaderMaterial=!0,Wr.prototype.copy=function(e){return Zn.prototype.copy.call(this,e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=Dn.clone(e.uniforms),this.defines=e.defines,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.lights=e.lights,this.clipping=e.clipping,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this.extensions=e.extensions,this},Wr.prototype.toJSON=function(e){var t=Zn.prototype.toJSON.call(this,e);return t.uniforms=this.uniforms,t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t},Object.assign(Xr.prototype,{set:function(e,t){return this.origin.copy(e),this.direction.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this},at:function(e,t){return(t||new kt).copy(this.direction).multiplyScalar(e).add(this.origin)},lookAt:function(e){return this.direction.copy(e).sub(this.origin).normalize(),this},recast:function(){var e=new kt;return function(t){return this.origin.copy(this.at(t,e)),this}}(),closestPointToPoint:function(e,t){var n=t||new kt;n.subVectors(e,this.origin);var r=n.dot(this.direction);return r<0?n.copy(this.origin):n.copy(this.direction).multiplyScalar(r).add(this.origin)},distanceToPoint:function(e){return Math.sqrt(this.distanceSqToPoint(e))},distanceSqToPoint:function(){var e=new kt;return function(t){var n=e.subVectors(t,this.origin).dot(this.direction);return n<0?this.origin.distanceToSquared(t):(e.copy(this.direction).multiplyScalar(n).add(this.origin),e.distanceToSquared(t))}}(),distanceSqToSegment:(Or=new kt,Ir=new kt,Nr=new kt,function(e,t,n,r){Or.copy(e).add(t).multiplyScalar(.5),Ir.copy(t).sub(e).normalize(),Nr.copy(this.origin).sub(Or);var i,o,a,s,c=.5*e.distanceTo(t),u=-this.direction.dot(Ir),l=Nr.dot(this.direction),h=-Nr.dot(Ir),d=Nr.lengthSq(),p=Math.abs(1-u*u);if(p>0)if(o=u*l-h,s=c*p,(i=u*h-l)>=0)if(o>=-s)if(o<=s){var f=1/p;a=(i*=f)*(i+u*(o*=f)+2*l)+o*(u*i+o+2*h)+d}else o=c,a=-(i=Math.max(0,-(u*o+l)))*i+o*(o+2*h)+d;else o=-c,a=-(i=Math.max(0,-(u*o+l)))*i+o*(o+2*h)+d;else o<=-s?a=-(i=Math.max(0,-(-u*c+l)))*i+(o=i>0?-c:Math.min(Math.max(-c,-h),c))*(o+2*h)+d:o<=s?(i=0,a=(o=Math.min(Math.max(-c,-h),c))*(o+2*h)+d):a=-(i=Math.max(0,-(u*c+l)))*i+(o=i>0?c:Math.min(Math.max(-c,-h),c))*(o+2*h)+d;else o=u>0?-c:c,a=-(i=Math.max(0,-(u*o+l)))*i+o*(o+2*h)+d;return n&&n.copy(this.direction).multiplyScalar(i).add(this.origin),r&&r.copy(Ir).multiplyScalar(o).add(Or),a}),intersectSphere:function(){var e=new kt;return function(t,n){e.subVectors(t.center,this.origin);var r=e.dot(this.direction),i=e.dot(e)-r*r,o=t.radius*t.radius;if(i>o)return null;var a=Math.sqrt(o-i),s=r-a,c=r+a;return s<0&&c<0?null:s<0?this.at(c,n):this.at(s,n)}}(),intersectsSphere:function(e){return this.distanceToPoint(e.center)<=e.radius},distanceToPlane:function(e){var t=e.normal.dot(this.direction);if(0===t)return 0===e.distanceToPoint(this.origin)?0:null;var n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null},intersectPlane:function(e,t){var n=this.distanceToPlane(e);return null===n?null:this.at(n,t)},intersectsPlane:function(e){var t=e.distanceToPoint(this.origin);return 0===t||e.normal.dot(this.direction)*t<0},intersectBox:function(e,t){var n,r,i,o,a,s,c=1/this.direction.x,u=1/this.direction.y,l=1/this.direction.z,h=this.origin;return c>=0?(n=(e.min.x-h.x)*c,r=(e.max.x-h.x)*c):(n=(e.max.x-h.x)*c,r=(e.min.x-h.x)*c),u>=0?(i=(e.min.y-h.y)*u,o=(e.max.y-h.y)*u):(i=(e.max.y-h.y)*u,o=(e.min.y-h.y)*u),n>o||i>r?null:((i>n||n!=n)&&(n=i),(o<r||r!=r)&&(r=o),l>=0?(a=(e.min.z-h.z)*l,s=(e.max.z-h.z)*l):(a=(e.max.z-h.z)*l,s=(e.min.z-h.z)*l),n>s||a>r?null:((a>n||n!=n)&&(n=a),(s<r||r!=r)&&(r=s),r<0?null:this.at(n>=0?n:r,t)))},intersectsBox:(Cr=new kt,function(e){return null!==this.intersectBox(e,Cr)}),intersectTriangle:function(){var e=new kt,t=new kt,n=new kt,r=new kt;return function(i,o,a,s,c){t.subVectors(o,i),n.subVectors(a,i),r.crossVectors(t,n);var u,l=this.direction.dot(r);if(l>0){if(s)return null;u=1}else{if(!(l<0))return null;u=-1,l=-l}e.subVectors(this.origin,i);var h=u*this.direction.dot(n.crossVectors(e,n));if(h<0)return null;var d=u*this.direction.dot(t.cross(e));if(d<0)return null;if(h+d>l)return null;var p=-u*e.dot(r);return p<0?null:this.at(p/l,c)}}(),applyMatrix4:function(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this},equals:function(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}}),Object.assign(qr.prototype,{set:function(e,t){return this.start.copy(e),this.end.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.start.copy(e.start),this.end.copy(e.end),this},getCenter:function(e){return(e||new kt).addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(e){return(e||new kt).subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(e,t){var n=t||new kt;return this.delta(n).multiplyScalar(e).add(this.start)},closestPointToPointParameter:(Dr=new kt,Ur=new kt,function(e,t){Dr.subVectors(e,this.start),Ur.subVectors(this.end,this.start);var n=Ur.dot(Ur),r=Ur.dot(Dr)/n;return t&&(r=It.clamp(r,0,1)),r}),closestPointToPoint:function(e,t,n){var r=this.closestPointToPointParameter(e,t),i=n||new kt;return this.delta(i).multiplyScalar(r).add(this.start)},applyMatrix4:function(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this},equals:function(e){return e.start.equals(this.start)&&e.end.equals(this.end)}}),Object.assign(Yr,{normal:(kr=new kt,function(e,t,n,r){var i=r||new kt;i.subVectors(n,t),kr.subVectors(e,t),i.cross(kr);var o=i.lengthSq();return o>0?i.multiplyScalar(1/Math.sqrt(o)):i.set(0,0,0)}),barycoordFromPoint:function(){var e=new kt,t=new kt,n=new kt;return function(r,i,o,a,s){e.subVectors(a,i),t.subVectors(o,i),n.subVectors(r,i);var c=e.dot(e),u=e.dot(t),l=e.dot(n),h=t.dot(t),d=t.dot(n),p=c*h-u*u,f=s||new kt;if(0===p)return f.set(-2,-1,-1);var m=1/p,v=(h*l-u*d)*m,g=(c*d-u*l)*m;return f.set(1-v-g,g,v)}}(),containsPoint:function(){var e=new kt;return function(t,n,r,i){var o=Yr.barycoordFromPoint(t,n,r,i,e);return o.x>=0&&o.y>=0&&o.x+o.y<=1}}()}),Object.assign(Yr.prototype,{set:function(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this},setFromPointsAndIndices:function(e,t,n,r){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[r]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this},area:function(){var e=new kt,t=new kt;return function(){return e.subVectors(this.c,this.b),t.subVectors(this.a,this.b),.5*e.cross(t).length()}}(),midpoint:function(e){return(e||new kt).addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(e){return Yr.normal(this.a,this.b,this.c,e)},plane:function(e){return(e||new tr).setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(e,t){return Yr.barycoordFromPoint(e,this.a,this.b,this.c,t)},containsPoint:function(e){return Yr.containsPoint(e,this.a,this.b,this.c)},closestPointToPoint:function(){var e=new tr,t=[new qr,new qr,new qr],n=new kt,r=new kt;return function(i,o){var a=o||new kt,s=1/0;if(e.setFromCoplanarPoints(this.a,this.b,this.c),e.projectPoint(i,n),!0===this.containsPoint(n))a.copy(n);else{t[0].set(this.a,this.b),t[1].set(this.b,this.c),t[2].set(this.c,this.a);for(var c=0;c<t.length;c++){t[c].closestPointToPoint(n,!0,r);var u=n.distanceToSquared(r);u<s&&(s=u,a.copy(r))}}return a}}(),equals:function(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}),Kr.prototype=Object.assign(Object.create(dr.prototype),{constructor:Kr,isMesh:!0,setDrawMode:function(e){this.drawMode=e},copy:function(e){return dr.prototype.copy.call(this,e),this.drawMode=e.drawMode,void 0!==e.morphTargetInfluences&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),void 0!==e.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this},updateMorphTargets:function(){var e,t,n,r=this.geometry;if(r.isBufferGeometry){var i=r.morphAttributes,o=Object.keys(i);if(o.length>0){var a=i[o[0]];if(void 0!==a)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},e=0,t=a.length;e<t;e++)n=a[e].name||String(e),this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}else{var s=r.morphTargets;if(void 0!==s&&s.length>0)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},e=0,t=s.length;e<t;e++)n=s[e].name||String(e),this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}},raycast:function(){var e=new Dt,t=new Xr,n=new er,r=new kt,i=new kt,o=new kt,a=new kt,s=new kt,c=new kt,u=new Nt,l=new Nt,h=new Nt,d=new kt,p=new kt,f=new kt;function m(e,t,n,r,i,o,a){return Yr.barycoordFromPoint(e,t,n,r,d),i.multiplyScalar(d.x),o.multiplyScalar(d.y),a.multiplyScalar(d.z),i.add(o).add(a),i.clone()}function v(e,t,n,r,i,o,a,s){if(null===(t.side===R?r.intersectTriangle(a,o,i,!0,s):r.intersectTriangle(i,o,a,t.side!==P,s)))return null;f.copy(s),f.applyMatrix4(e.matrixWorld);var c=n.ray.origin.distanceTo(f);return c<n.near||c>n.far?null:{distance:c,point:f.clone(),object:e}}function g(e,t,n,a,s,c,d,f){r.fromBufferAttribute(a,c),i.fromBufferAttribute(a,d),o.fromBufferAttribute(a,f);var g=v(e,e.material,t,n,r,i,o,p);return g&&(s&&(u.fromBufferAttribute(s,c),l.fromBufferAttribute(s,d),h.fromBufferAttribute(s,f),g.uv=m(p,r,i,o,u,l,h)),g.face=new mr(c,d,f,Yr.normal(r,i,o)),g.faceIndex=c),g}return function(d,f){var y,b=this.geometry,x=this.material,_=this.matrixWorld;if(void 0!==x&&(null===b.boundingSphere&&b.computeBoundingSphere(),n.copy(b.boundingSphere),n.applyMatrix4(_),!1!==d.ray.intersectsSphere(n)&&(e.getInverse(_),t.copy(d.ray).applyMatrix4(e),null===b.boundingBox||!1!==t.intersectsBox(b.boundingBox))))if(b.isBufferGeometry){var w,E,M,T,S,A=b.index,R=b.attributes.position,P=b.attributes.uv;if(null!==A)for(T=0,S=A.count;T<S;T+=3)w=A.getX(T),E=A.getX(T+1),M=A.getX(T+2),(y=g(this,d,t,R,P,w,E,M))&&(y.faceIndex=Math.floor(T/3),f.push(y));else if(void 0!==R)for(T=0,S=R.count;T<S;T+=3)(y=g(this,d,t,R,P,w=T,E=T+1,M=T+2))&&(y.index=w,f.push(y))}else if(b.isGeometry){var L,C,O,I,N=Array.isArray(x),D=b.vertices,U=b.faces,k=b.faceVertexUvs[0];k.length>0&&(I=k);for(var B=0,F=U.length;B<F;B++){var j=U[B],z=N?x[j.materialIndex]:x;if(void 0!==z){if(L=D[j.a],C=D[j.b],O=D[j.c],!0===z.morphTargets){var G=b.morphTargets,V=this.morphTargetInfluences;r.set(0,0,0),i.set(0,0,0),o.set(0,0,0);for(var H=0,W=G.length;H<W;H++){var X=V[H];if(0!==X){var q=G[H].vertices;r.addScaledVector(a.subVectors(q[j.a],L),X),i.addScaledVector(s.subVectors(q[j.b],C),X),o.addScaledVector(c.subVectors(q[j.c],O),X)}}r.add(L),i.add(C),o.add(O),L=r,C=i,O=o}if(y=v(this,z,d,t,L,C,O,p)){if(I&&I[B]){var Y=I[B];u.copy(Y[0]),l.copy(Y[1]),h.copy(Y[2]),y.uv=m(p,L,C,O,u,l,h)}y.face=j,y.faceIndex=B,f.push(y)}}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var ni,ri,ii,oi,ai,si,ci=0;function ui(e){switch(e){case Et:return["Linear","( value )"];case Mt:return["sRGB","( value )"];case St:return["RGBE","( value )"];case Rt:return["RGBM","( value, 7.0 )"];case Pt:return["RGBM","( value, 16.0 )"];case Lt:return["RGBD","( value, 256.0 )"];case Tt:return["Gamma","( value, float( GAMMA_FACTOR ) )"];default:throw new Error("unsupported encoding: "+e)}}function li(e,t){var n=ui(t);return"vec4 "+e+"( vec4 value ) { return "+n[0]+"ToLinear"+n[1]+"; }"}function hi(e){return""!==e}function di(e,t){return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights)}function pi(e){return e.replace(/^[ \t]*#include +<([\w\d.]+)>/gm,function(e,t){var n=Un[t];if(void 0===n)throw new Error("Can not resolve #include <"+t+">");return pi(n)})}function fi(e){return e.replace(/for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,function(e,t,n,r){for(var i="",o=parseInt(t);o<parseInt(n);o++)i+=r.replace(/\[ i \]/g,"[ "+o+" ]");return i})}function mi(e,t,n,r,i,o){var a=e.context,s=r.defines,c=i.vertexShader,u=i.fragmentShader,l="SHADOWMAP_TYPE_BASIC";o.shadowMapType===T?l="SHADOWMAP_TYPE_PCF":o.shadowMapType===S&&(l="SHADOWMAP_TYPE_PCF_SOFT");var h="ENVMAP_TYPE_CUBE",d="ENVMAP_MODE_REFLECTION",p="ENVMAP_BLENDING_MULTIPLY";if(o.envMap){switch(r.envMap.mapping){case xe:case _e:h="ENVMAP_TYPE_CUBE";break;case Te:case Se:h="ENVMAP_TYPE_CUBE_UV";break;case we:case Ee:h="ENVMAP_TYPE_EQUIREC";break;case Me:h="ENVMAP_TYPE_SPHERE"}switch(r.envMap.mapping){case _e:case Ee:d="ENVMAP_MODE_REFRACTION"}switch(r.combine){case he:p="ENVMAP_BLENDING_MULTIPLY";break;case de:p="ENVMAP_BLENDING_MIX";break;case pe:p="ENVMAP_BLENDING_ADD"}}var f,m,v,g,y,b=e.gammaFactor>0?e.gammaFactor:1,x=function(e,t,n){return[(e=e||{}).derivatives||t.envMapCubeUV||t.bumpMap||t.normalMap||t.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(e.fragDepth||t.logarithmicDepthBuffer)&&n.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":"",e.drawBuffers&&n.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(e.shaderTextureLOD||t.envMap)&&n.get("EXT_shader_texture_lod")?"#extension GL_EXT_shader_texture_lod : enable":""].filter(hi).join("\n")}(r.extensions,o,t),_=function(e){var t=[];for(var n in e){var r=e[n];!1!==r&&t.push("#define "+n+" "+r)}return t.join("\n")}(s),w=a.createProgram();r.isRawShaderMaterial?((f=[_].filter(hi).join("\n")).length>0&&(f+="\n"),(m=[x,_].filter(hi).join("\n")).length>0&&(m+="\n")):(f=["precision "+o.precision+" float;","precision "+o.precision+" int;","#define SHADER_NAME "+i.name,_,o.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+b,"#define MAX_BONES "+o.maxBones,o.useFog&&o.fog?"#define USE_FOG":"",o.useFog&&o.fogExp?"#define FOG_EXP2":"",o.map?"#define USE_MAP":"",o.envMap?"#define USE_ENVMAP":"",o.envMap?"#define "+d:"",o.lightMap?"#define USE_LIGHTMAP":"",o.aoMap?"#define USE_AOMAP":"",o.emissiveMap?"#define USE_EMISSIVEMAP":"",o.bumpMap?"#define USE_BUMPMAP":"",o.normalMap?"#define USE_NORMALMAP":"",o.displacementMap&&o.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",o.specularMap?"#define USE_SPECULARMAP":"",o.roughnessMap?"#define USE_ROUGHNESSMAP":"",o.metalnessMap?"#define USE_METALNESSMAP":"",o.alphaMap?"#define USE_ALPHAMAP":"",o.vertexColors?"#define USE_COLOR":"",o.flatShading?"#define FLAT_SHADED":"",o.skinning?"#define USE_SKINNING":"",o.useVertexTexture?"#define BONE_TEXTURE":"",o.morphTargets?"#define USE_MORPHTARGETS":"",o.morphNormals&&!1===o.flatShading?"#define USE_MORPHNORMALS":"",o.doubleSided?"#define DOUBLE_SIDED":"",o.flipSided?"#define FLIP_SIDED":"","#define NUM_CLIPPING_PLANES "+o.numClippingPlanes,o.shadowMapEnabled?"#define USE_SHADOWMAP":"",o.shadowMapEnabled?"#define "+l:"",o.sizeAttenuation?"#define USE_SIZEATTENUATION":"",o.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",o.logarithmicDepthBuffer&&t.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(hi).join("\n"),m=[x,"precision "+o.precision+" float;","precision "+o.precision+" int;","#define SHADER_NAME "+i.name,_,o.alphaTest?"#define ALPHATEST "+o.alphaTest:"","#define GAMMA_FACTOR "+b,o.useFog&&o.fog?"#define USE_FOG":"",o.useFog&&o.fogExp?"#define FOG_EXP2":"",o.map?"#define USE_MAP":"",o.envMap?"#define USE_ENVMAP":"",o.envMap?"#define "+h:"",o.envMap?"#define "+d:"",o.envMap?"#define "+p:"",o.lightMap?"#define USE_LIGHTMAP":"",o.aoMap?"#define USE_AOMAP":"",o.emissiveMap?"#define USE_EMISSIVEMAP":"",o.bumpMap?"#define USE_BUMPMAP":"",o.normalMap?"#define USE_NORMALMAP":"",o.specularMap?"#define USE_SPECULARMAP":"",o.roughnessMap?"#define USE_ROUGHNESSMAP":"",o.metalnessMap?"#define USE_METALNESSMAP":"",o.alphaMap?"#define USE_ALPHAMAP":"",o.vertexColors?"#define USE_COLOR":"",o.gradientMap?"#define USE_GRADIENTMAP":"",o.flatShading?"#define FLAT_SHADED":"",o.doubleSided?"#define DOUBLE_SIDED":"",o.flipSided?"#define FLIP_SIDED":"","#define NUM_CLIPPING_PLANES "+o.numClippingPlanes,"#define UNION_CLIPPING_PLANES "+(o.numClippingPlanes-o.numClipIntersection),o.shadowMapEnabled?"#define USE_SHADOWMAP":"",o.shadowMapEnabled?"#define "+l:"",o.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",o.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",o.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",o.logarithmicDepthBuffer&&t.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"",o.envMap&&t.get("EXT_shader_texture_lod")?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;",o.toneMapping!==fe?"#define TONE_MAPPING":"",o.toneMapping!==fe?Un.tonemapping_pars_fragment:"",o.toneMapping!==fe?function(e,t){var n;switch(t){case me:n="Linear";break;case ve:n="Reinhard";break;case ge:n="Uncharted2";break;case ye:n="OptimizedCineon";break;default:throw new Error("unsupported toneMapping: "+t)}return"vec3 "+e+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}("toneMapping",o.toneMapping):"",o.dithering?"#define DITHERING":"",o.outputEncoding||o.mapEncoding||o.envMapEncoding||o.emissiveMapEncoding?Un.encodings_pars_fragment:"",o.mapEncoding?li("mapTexelToLinear",o.mapEncoding):"",o.envMapEncoding?li("envMapTexelToLinear",o.envMapEncoding):"",o.emissiveMapEncoding?li("emissiveMapTexelToLinear",o.emissiveMapEncoding):"",o.outputEncoding?(v="linearToOutputTexel",g=o.outputEncoding,y=ui(g),"vec4 "+v+"( vec4 value ) { return LinearTo"+y[0]+y[1]+"; }"):"",o.depthPacking?"#define DEPTH_PACKING "+r.depthPacking:"","\n"].filter(hi).join("\n")),c=di(c=pi(c),o),u=di(u=pi(u),o),r.isShaderMaterial||(c=fi(c),u=fi(u));var E=f+c,M=m+u,A=ti(a,a.VERTEX_SHADER,E),R=ti(a,a.FRAGMENT_SHADER,M);a.attachShader(w,A),a.attachShader(w,R),void 0!==r.index0AttributeName?a.bindAttribLocation(w,0,r.index0AttributeName):!0===o.morphTargets&&a.bindAttribLocation(w,0,"position"),a.linkProgram(w);var P,L,C=a.getProgramInfoLog(w),O=a.getShaderInfoLog(A),I=a.getShaderInfoLog(R),N=!0,D=!0;return!1===a.getProgramParameter(w,a.LINK_STATUS)?(N=!1,console.error("THREE.WebGLProgram: shader error: ",a.getError(),"gl.VALIDATE_STATUS",a.getProgramParameter(w,a.VALIDATE_STATUS),"gl.getProgramInfoLog",C,O,I)):""!==C?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",C):""!==O&&""!==I||(D=!1),D&&(this.diagnostics={runnable:N,material:r,programLog:C,vertexShader:{log:O,prefix:f},fragmentShader:{log:I,prefix:m}}),a.deleteShader(A),a.deleteShader(R),this.getUniforms=function(){return void 0===P&&(P=new Cn(a,w,e)),P},this.getAttributes=function(){return void 0===L&&(L=function(e,t){for(var n={},r=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),i=0;i<r;i++){var o=e.getActiveAttrib(t,i).name;n[o]=e.getAttribLocation(t,o)}return n}(a,w)),L},this.destroy=function(){a.deleteProgram(w),this.program=void 0},Object.defineProperties(this,{uniforms:{get:function(){return console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms()."),this.getUniforms()}},attributes:{get:function(){return console.warn("THREE.WebGLProgram: .attributes is now .getAttributes()."),this.getAttributes()}}}),this.id=ci++,this.code=n,this.usedTimes=1,this.program=w,this.vertexShader=A,this.fragmentShader=R,this}function vi(e,t,n){var r=[],i={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow"},o=["precision","supportsVertexTextures","map","mapEncoding","envMap","envMapMode","envMapEncoding","lightMap","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","fog","useFog","fogExp","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering"];function a(e,t){var n;return e?e.isTexture?n=e.encoding:e.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),n=e.texture.encoding):n=Et,n===Et&&t&&(n=Tt),n}this.getParameters=function(t,r,o,s,c,u,l){var h=i[t.type],d=l.isSkinnedMesh?function(e){var t=e.skeleton.bones;if(n.floatVertexTextures)return 1024;var r=n.maxVertexUniforms,i=Math.floor((r-20)/4),o=Math.min(i,t.length);return o<t.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+t.length+" bones. This GPU supports "+o+"."),0):o}(l):0,p=n.precision;null!==t.precision&&(p=n.getMaxPrecision(t.precision))!==t.precision&&console.warn("THREE.WebGLProgram.getParameters:",t.precision,"not supported, using",p,"instead.");var f=e.getRenderTarget();return{shaderID:h,precision:p,supportsVertexTextures:n.vertexTextures,outputEncoding:a(f?f.texture:null,e.gammaOutput),map:!!t.map,mapEncoding:a(t.map,e.gammaInput),envMap:!!t.envMap,envMapMode:t.envMap&&t.envMap.mapping,envMapEncoding:a(t.envMap,e.gammaInput),envMapCubeUV:!!t.envMap&&(t.envMap.mapping===Te||t.envMap.mapping===Se),lightMap:!!t.lightMap,aoMap:!!t.aoMap,emissiveMap:!!t.emissiveMap,emissiveMapEncoding:a(t.emissiveMap,e.gammaInput),bumpMap:!!t.bumpMap,normalMap:!!t.normalMap,displacementMap:!!t.displacementMap,roughnessMap:!!t.roughnessMap,metalnessMap:!!t.metalnessMap,specularMap:!!t.specularMap,alphaMap:!!t.alphaMap,gradientMap:!!t.gradientMap,combine:t.combine,vertexColors:t.vertexColors,fog:!!s,useFog:t.fog,fogExp:s&&s.isFogExp2,flatShading:t.flatShading,sizeAttenuation:t.sizeAttenuation,logarithmicDepthBuffer:n.logarithmicDepthBuffer,skinning:t.skinning&&d>0,maxBones:d,useVertexTexture:n.floatVertexTextures,morphTargets:t.morphTargets,morphNormals:t.morphNormals,maxMorphTargets:e.maxMorphTargets,maxMorphNormals:e.maxMorphNormals,numDirLights:r.directional.length,numPointLights:r.point.length,numSpotLights:r.spot.length,numRectAreaLights:r.rectArea.length,numHemiLights:r.hemi.length,numClippingPlanes:c,numClipIntersection:u,dithering:t.dithering,shadowMapEnabled:e.shadowMap.enabled&&l.receiveShadow&&o.length>0,shadowMapType:e.shadowMap.type,toneMapping:e.toneMapping,physicallyCorrectLights:e.physicallyCorrectLights,premultipliedAlpha:t.premultipliedAlpha,alphaTest:t.alphaTest,doubleSided:t.side===P,flipSided:t.side===R,depthPacking:void 0!==t.depthPacking&&t.depthPacking}},this.getProgramCode=function(t,n){var r=[];if(n.shaderID?r.push(n.shaderID):(r.push(t.fragmentShader),r.push(t.vertexShader)),void 0!==t.defines)for(var i in t.defines)r.push(i),r.push(t.defines[i]);for(var a=0;a<o.length;a++)r.push(n[o[a]]);return r.push(t.onBeforeCompile.toString()),r.push(e.gammaOutput),r.join()},this.acquireProgram=function(n,i,o,a){for(var s,c=0,u=r.length;c<u;c++){var l=r[c];if(l.code===a){++(s=l).usedTimes;break}}return void 0===s&&(s=new mi(e,t,a,n,i,o),r.push(s)),s},this.releaseProgram=function(e){if(0==--e.usedTimes){var t=r.indexOf(e);r[t]=r[r.length-1],r.pop(),e.destroy()}},this.programs=r}function gi(e,t,n,r,i,o,a){var s="undefined"!=typeof WebGL2RenderingContext&&e instanceof window.WebGL2RenderingContext;function c(e,t){if(e.width>t||e.height>t){var n=t/Math.max(e.width,e.height),r=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");return r.width=Math.floor(e.width*n),r.height=Math.floor(e.height*n),r.getContext("2d").drawImage(e,0,0,e.width,e.height,0,0,r.width,r.height),console.warn("THREE.WebGLRenderer: image is too big ("+e.width+"x"+e.height+"). Resized to "+r.width+"x"+r.height,e),r}return e}function u(e){return It.isPowerOfTwo(e.width)&&It.isPowerOfTwo(e.height)}function l(e,t){return e.generateMipmaps&&t&&e.minFilter!==Le&&e.minFilter!==Ie}function h(t){return t===Le||t===Ce||t===Oe?e.NEAREST:e.LINEAR}function d(t){var n=t.target;n.removeEventListener("dispose",d),function(t){var n=r.get(t);if(t.image&&n.__image__webglTextureCube)e.deleteTexture(n.__image__webglTextureCube);else{if(void 0===n.__webglInit)return;e.deleteTexture(n.__webglTexture)}r.remove(t)}(n),a.textures--}function p(t){var n=t.target;n.removeEventListener("dispose",p),function(t){var n=r.get(t),i=r.get(t.texture);if(!t)return;void 0!==i.__webglTexture&&e.deleteTexture(i.__webglTexture);t.depthTexture&&t.depthTexture.dispose();if(t.isWebGLRenderTargetCube)for(var o=0;o<6;o++)e.deleteFramebuffer(n.__webglFramebuffer[o]),n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer[o]);else e.deleteFramebuffer(n.__webglFramebuffer),n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer);r.remove(t.texture),r.remove(t)}(n),a.textures--}function f(t,h){var p=r.get(t);if(t.version>0&&p.__version!==t.version){var f=t.image;if(void 0===f)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined",t);else{if(!1!==f.complete)return void function(t,r,h){void 0===t.__webglInit&&(t.__webglInit=!0,r.addEventListener("dispose",d),t.__webglTexture=e.createTexture(),a.textures++);n.activeTexture(e.TEXTURE0+h),n.bindTexture(e.TEXTURE_2D,t.__webglTexture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,r.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,r.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,r.unpackAlignment);var p=c(r.image,i.maxTextureSize);(function(e){return e.wrapS!==Re||e.wrapT!==Re||e.minFilter!==Le&&e.minFilter!==Ie})(r)&&!1===u(p)&&(p=function(e){if(e instanceof HTMLImageElement||e instanceof HTMLCanvasElement||e instanceof ImageBitmap){var t=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");return t.width=It.floorPowerOfTwo(e.width),t.height=It.floorPowerOfTwo(e.height),t.getContext("2d").drawImage(e,0,0,t.width,t.height),console.warn("THREE.WebGLRenderer: image is not power of two ("+e.width+"x"+e.height+"). Resized to "+t.width+"x"+t.height,e),t}return e}(p));var f=u(p),v=o.convert(r.format),g=o.convert(r.type);m(e.TEXTURE_2D,r,f);var y,b=r.mipmaps;if(r.isDepthTexture){var x=e.DEPTH_COMPONENT;if(r.type===Ge){if(!s)throw new Error("Float Depth Texture only supported in WebGL2.0");x=e.DEPTH_COMPONENT32F}else s&&(x=e.DEPTH_COMPONENT16);r.format===et&&x===e.DEPTH_COMPONENT&&r.type!==Fe&&r.type!==ze&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),r.type=Fe,g=o.convert(r.type)),r.format===tt&&(x=e.DEPTH_STENCIL,r.type!==qe&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),r.type=qe,g=o.convert(r.type))),n.texImage2D(e.TEXTURE_2D,0,x,p.width,p.height,0,v,g,null)}else if(r.isDataTexture)if(b.length>0&&f){for(var _=0,w=b.length;_<w;_++)y=b[_],n.texImage2D(e.TEXTURE_2D,_,v,y.width,y.height,0,v,g,y.data);r.generateMipmaps=!1}else n.texImage2D(e.TEXTURE_2D,0,v,p.width,p.height,0,v,g,p.data);else if(r.isCompressedTexture)for(var _=0,w=b.length;_<w;_++)y=b[_],r.format!==Ze&&r.format!==Ke?n.getCompressedTextureFormats().indexOf(v)>-1?n.compressedTexImage2D(e.TEXTURE_2D,_,v,y.width,y.height,0,y.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):n.texImage2D(e.TEXTURE_2D,_,v,y.width,y.height,0,v,g,y.data);else if(b.length>0&&f){for(var _=0,w=b.length;_<w;_++)y=b[_],n.texImage2D(e.TEXTURE_2D,_,v,v,g,y);r.generateMipmaps=!1}else n.texImage2D(e.TEXTURE_2D,0,v,v,g,p);l(r,f)&&e.generateMipmap(e.TEXTURE_2D);t.__version=r.version,r.onUpdate&&r.onUpdate(r)}(p,t,h);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete",t)}}n.activeTexture(e.TEXTURE0+h),n.bindTexture(e.TEXTURE_2D,p.__webglTexture)}function m(n,a,s){var c;if(s?(e.texParameteri(n,e.TEXTURE_WRAP_S,o.convert(a.wrapS)),e.texParameteri(n,e.TEXTURE_WRAP_T,o.convert(a.wrapT)),e.texParameteri(n,e.TEXTURE_MAG_FILTER,o.convert(a.magFilter)),e.texParameteri(n,e.TEXTURE_MIN_FILTER,o.convert(a.minFilter))):(e.texParameteri(n,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(n,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),a.wrapS===Re&&a.wrapT===Re||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.",a),e.texParameteri(n,e.TEXTURE_MAG_FILTER,h(a.magFilter)),e.texParameteri(n,e.TEXTURE_MIN_FILTER,h(a.minFilter)),a.minFilter!==Le&&a.minFilter!==Ie&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.",a)),c=t.get("EXT_texture_filter_anisotropic")){if(a.type===Ge&&null===t.get("OES_texture_float_linear"))return;if(a.type===Ve&&null===t.get("OES_texture_half_float_linear"))return;(a.anisotropy>1||r.get(a).__currentAnisotropy)&&(e.texParameterf(n,c.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,i.getMaxAnisotropy())),r.get(a).__currentAnisotropy=a.anisotropy)}}function v(t,i,a,s){var c=o.convert(i.texture.format),u=o.convert(i.texture.type);n.texImage2D(s,0,c,i.width,i.height,0,c,u,null),e.bindFramebuffer(e.FRAMEBUFFER,t),e.framebufferTexture2D(e.FRAMEBUFFER,a,s,r.get(i.texture).__webglTexture,0),e.bindFramebuffer(e.FRAMEBUFFER,null)}function g(t,n){e.bindRenderbuffer(e.RENDERBUFFER,t),n.depthBuffer&&!n.stencilBuffer?(e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_COMPONENT16,n.width,n.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,t)):n.depthBuffer&&n.stencilBuffer?(e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_STENCIL,n.width,n.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.RENDERBUFFER,t)):e.renderbufferStorage(e.RENDERBUFFER,e.RGBA4,n.width,n.height),e.bindRenderbuffer(e.RENDERBUFFER,null)}function y(t){var n=r.get(t),i=!0===t.isWebGLRenderTargetCube;if(t.depthTexture){if(i)throw new Error("target.depthTexture not supported in Cube render targets");!function(t,n){if(n&&n.isWebGLRenderTargetCube)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(e.FRAMEBUFFER,t),!n.depthTexture||!n.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");r.get(n.depthTexture).__webglTexture&&n.depthTexture.image.width===n.width&&n.depthTexture.image.height===n.height||(n.depthTexture.image.width=n.width,n.depthTexture.image.height=n.height,n.depthTexture.needsUpdate=!0),f(n.depthTexture,0);var i=r.get(n.depthTexture).__webglTexture;if(n.depthTexture.format===et)e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,i,0);else{if(n.depthTexture.format!==tt)throw new Error("Unknown depthTexture format");e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,i,0)}}(n.__webglFramebuffer,t)}else if(i){n.__webglDepthbuffer=[];for(var o=0;o<6;o++)e.bindFramebuffer(e.FRAMEBUFFER,n.__webglFramebuffer[o]),n.__webglDepthbuffer[o]=e.createRenderbuffer(),g(n.__webglDepthbuffer[o],t)}else e.bindFramebuffer(e.FRAMEBUFFER,n.__webglFramebuffer),n.__webglDepthbuffer=e.createRenderbuffer(),g(n.__webglDepthbuffer,t);e.bindFramebuffer(e.FRAMEBUFFER,null)}this.setTexture2D=f,this.setTextureCube=function(t,s){var h=r.get(t);if(6===t.image.length)if(t.version>0&&h.__version!==t.version){h.__image__webglTextureCube||(t.addEventListener("dispose",d),h.__image__webglTextureCube=e.createTexture(),a.textures++),n.activeTexture(e.TEXTURE0+s),n.bindTexture(e.TEXTURE_CUBE_MAP,h.__image__webglTextureCube),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,t.flipY);for(var p=t&&t.isCompressedTexture,f=t.image[0]&&t.image[0].isDataTexture,v=[],g=0;g<6;g++)v[g]=p||f?f?t.image[g].image:t.image[g]:c(t.image[g],i.maxCubemapSize);var y=u(v[0]),b=o.convert(t.format),x=o.convert(t.type);for(m(e.TEXTURE_CUBE_MAP,t,y),g=0;g<6;g++)if(p)for(var _,w=v[g].mipmaps,E=0,M=w.length;E<M;E++)_=w[E],t.format!==Ze&&t.format!==Ke?n.getCompressedTextureFormats().indexOf(b)>-1?n.compressedTexImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+g,E,b,_.width,_.height,0,_.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+g,E,b,_.width,_.height,0,b,x,_.data);else f?n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+g,0,b,v[g].width,v[g].height,0,b,x,v[g].data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+g,0,b,b,x,v[g]);l(t,y)&&e.generateMipmap(e.TEXTURE_CUBE_MAP),h.__version=t.version,t.onUpdate&&t.onUpdate(t)}else n.activeTexture(e.TEXTURE0+s),n.bindTexture(e.TEXTURE_CUBE_MAP,h.__image__webglTextureCube)},this.setTextureCubeDynamic=function(t,i){n.activeTexture(e.TEXTURE0+i),n.bindTexture(e.TEXTURE_CUBE_MAP,r.get(t).__webglTexture)},this.setupRenderTarget=function(t){var i=r.get(t),o=r.get(t.texture);t.addEventListener("dispose",p),o.__webglTexture=e.createTexture(),a.textures++;var s=!0===t.isWebGLRenderTargetCube,c=u(t);if(s){i.__webglFramebuffer=[];for(var h=0;h<6;h++)i.__webglFramebuffer[h]=e.createFramebuffer()}else i.__webglFramebuffer=e.createFramebuffer();if(s){for(n.bindTexture(e.TEXTURE_CUBE_MAP,o.__webglTexture),m(e.TEXTURE_CUBE_MAP,t.texture,c),h=0;h<6;h++)v(i.__webglFramebuffer[h],t,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+h);l(t.texture,c)&&e.generateMipmap(e.TEXTURE_CUBE_MAP),n.bindTexture(e.TEXTURE_CUBE_MAP,null)}else n.bindTexture(e.TEXTURE_2D,o.__webglTexture),m(e.TEXTURE_2D,t.texture,c),v(i.__webglFramebuffer,t,e.COLOR_ATTACHMENT0,e.TEXTURE_2D),l(t.texture,c)&&e.generateMipmap(e.TEXTURE_2D),n.bindTexture(e.TEXTURE_2D,null);t.depthBuffer&&y(t)},this.updateRenderTargetMipmap=function(t){var i=t.texture;if(l(i,u(t))){var o=t.isWebGLRenderTargetCube?e.TEXTURE_CUBE_MAP:e.TEXTURE_2D,a=r.get(i).__webglTexture;n.bindTexture(o,a),e.generateMipmap(o),n.bindTexture(o,null)}}}function yi(e,t,n,r){pr.call(this),this.type="PerspectiveCamera",this.fov=void 0!==e?e:50,this.zoom=1,this.near=void 0!==n?n:.1,this.far=void 0!==r?r:2e3,this.focus=10,this.aspect=void 0!==t?t:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}function bi(e){yi.call(this),this.cameras=e||[]}function xi(e,t){return{convert:function(n){var r;if(n===Ae)return e.REPEAT;if(n===Re)return e.CLAMP_TO_EDGE;if(n===Pe)return e.MIRRORED_REPEAT;if(n===Le)return e.NEAREST;if(n===Ce)return e.NEAREST_MIPMAP_NEAREST;if(n===Oe)return e.NEAREST_MIPMAP_LINEAR;if(n===Ie)return e.LINEAR;if(n===Ne)return e.LINEAR_MIPMAP_NEAREST;if(n===De)return e.LINEAR_MIPMAP_LINEAR;if(n===Ue)return e.UNSIGNED_BYTE;if(n===He)return e.UNSIGNED_SHORT_4_4_4_4;if(n===We)return e.UNSIGNED_SHORT_5_5_5_1;if(n===Xe)return e.UNSIGNED_SHORT_5_6_5;if(n===ke)return e.BYTE;if(n===Be)return e.SHORT;if(n===Fe)return e.UNSIGNED_SHORT;if(n===je)return e.INT;if(n===ze)return e.UNSIGNED_INT;if(n===Ge)return e.FLOAT;if(n===Ve&&null!==(r=t.get("OES_texture_half_float")))return r.HALF_FLOAT_OES;if(n===Ye)return e.ALPHA;if(n===Ke)return e.RGB;if(n===Ze)return e.RGBA;if(n===Qe)return e.LUMINANCE;if(n===Je)return e.LUMINANCE_ALPHA;if(n===et)return e.DEPTH_COMPONENT;if(n===tt)return e.DEPTH_STENCIL;if(n===z)return e.FUNC_ADD;if(n===G)return e.FUNC_SUBTRACT;if(n===V)return e.FUNC_REVERSE_SUBTRACT;if(n===X)return e.ZERO;if(n===q)return e.ONE;if(n===Y)return e.SRC_COLOR;if(n===K)return e.ONE_MINUS_SRC_COLOR;if(n===Z)return e.SRC_ALPHA;if(n===Q)return e.ONE_MINUS_SRC_ALPHA;if(n===J)return e.DST_ALPHA;if(n===$)return e.ONE_MINUS_DST_ALPHA;if(n===ee)return e.DST_COLOR;if(n===te)return e.ONE_MINUS_DST_COLOR;if(n===ne)return e.SRC_ALPHA_SATURATE;if((n===nt||n===rt||n===it||n===ot)&&null!==(r=t.get("WEBGL_compressed_texture_s3tc"))){if(n===nt)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===rt)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===it)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===ot)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}if((n===at||n===st||n===ct||n===ut)&&null!==(r=t.get("WEBGL_compressed_texture_pvrtc"))){if(n===at)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===st)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===ct)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===ut)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(n===lt&&null!==(r=t.get("WEBGL_compressed_texture_etc1")))return r.COMPRESSED_RGB_ETC1_WEBGL;if((n===H||n===W)&&null!==(r=t.get("EXT_blend_minmax"))){if(n===H)return r.MIN_EXT;if(n===W)return r.MAX_EXT}return n===qe&&null!==(r=t.get("WEBGL_depth_texture"))?r.UNSIGNED_INT_24_8_WEBGL:0}}}function _i(e){console.log("THREE.WebGLRenderer",v);var t=void 0!==(e=e||{}).canvas?e.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),n=void 0!==e.context?e.context:null,r=void 0!==e.alpha&&e.alpha,i=void 0===e.depth||e.depth,o=void 0===e.stencil||e.stencil,a=void 0!==e.antialias&&e.antialias,s=void 0===e.premultipliedAlpha||e.premultipliedAlpha,c=void 0!==e.preserveDrawingBuffer&&e.preserveDrawingBuffer,u=[],l=[],h=null,d=[],p=[];this.domElement=t,this.context=null,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.gammaInput=!1,this.gammaOutput=!1,this.physicallyCorrectLights=!1,this.toneMapping=me,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var f,m,g,_,E,M,T,S,A,L,C,I,N,z,G,V,H,W,X,q=this,Y=!1,K=null,Z=null,Q=-1,J="",$=null,ee=null,te=new zt,ne=new zt,he=null,de=0,pe=t.width,fe=t.height,ve=1,ge=new zt(0,0,pe,fe),ye=new zt(0,0,pe,fe),be=!1,xe=new nr,_e=new function(){var e=this,t=null,n=0,r=!1,i=!1,o=new tr,a=new Bt,s={value:null,needsUpdate:!1};function c(){s.value!==t&&(s.value=t,s.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function u(t,n,r,i){var c=null!==t?t.length:0,u=null;if(0!==c){if(u=s.value,!0!==i||null===u){var l=r+4*c,h=n.matrixWorldInverse;a.getNormalMatrix(h),(null===u||u.length<l)&&(u=new Float32Array(l));for(var d=0,p=r;d!==c;++d,p+=4)o.copy(t[d]).applyMatrix4(h,a),o.normal.toArray(u,p),u[p+3]=o.constant}s.value=u,s.needsUpdate=!0}return e.numPlanes=c,u}this.uniform=s,this.numPlanes=0,this.numIntersection=0,this.init=function(e,i,o){var a=0!==e.length||i||0!==n||r;return r=i,t=u(e,o,0),n=e.length,a},this.beginShadows=function(){i=!0,u(null)},this.endShadows=function(){i=!1,c()},this.setState=function(e,o,a,l,h,d){if(!r||null===e||0===e.length||i&&!a)i?u(null):c();else{var p=i?0:n,f=4*p,m=h.clippingState||null;s.value=m,m=u(e,l,f,d);for(var v=0;v!==f;++v)m[v]=t[v];h.clippingState=m,this.numIntersection=o?this.numPlanes:0,this.numPlanes+=p}}},we=!1,Ee=!1,Me=new Dt,Te=new kt,Se={geometries:0,textures:0},Ae={frame:0,calls:0,vertices:0,faces:0,points:0};function Re(){return null===K?ve:1}this.info={render:Ae,memory:Se,programs:null};try{var Pe={alpha:r,depth:i,stencil:o,antialias:a,premultipliedAlpha:s,preserveDrawingBuffer:c};if(null===(f=n||t.getContext("webgl",Pe)||t.getContext("experimental-webgl",Pe)))throw null!==t.getContext("webgl")?"Error creating WebGL context with your selected attributes.":"Error creating WebGL context.";void 0===f.getShaderPrecisionFormat&&(f.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}}),t.addEventListener("webglcontextlost",Ie,!1),t.addEventListener("webglcontextrestored",Ne,!1)}catch(e){console.error("THREE.WebGLRenderer: "+e)}function Le(){(m=new function(e){var t={};return{get:function(n){if(void 0!==t[n])return t[n];var r;switch(n){case"WEBGL_depth_texture":r=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":r=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":r=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":r=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;case"WEBGL_compressed_texture_etc1":r=e.getExtension("WEBGL_compressed_texture_etc1");break;default:r=e.getExtension(n)}return null===r&&console.warn("THREE.WebGLRenderer: "+n+" extension not supported."),t[n]=r,r}}}(f)).get("WEBGL_depth_texture"),m.get("OES_texture_float"),m.get("OES_texture_float_linear"),m.get("OES_texture_half_float"),m.get("OES_texture_half_float_linear"),m.get("OES_standard_derivatives"),m.get("OES_element_index_uint"),m.get("ANGLE_instanced_arrays"),X=new xi(f,m),g=new function(e,t,n){var r;function i(t){if("highp"===t){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}var o=void 0!==n.precision?n.precision:"highp",a=i(o);a!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",a,"instead."),o=a);var s=!0===n.logarithmicDepthBuffer,c=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),u=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),l=e.getParameter(e.MAX_TEXTURE_SIZE),h=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),d=e.getParameter(e.MAX_VERTEX_ATTRIBS),p=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),f=e.getParameter(e.MAX_VARYING_VECTORS),m=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),v=u>0,g=!!t.get("OES_texture_float");return{getMaxAnisotropy:function(){if(void 0!==r)return r;var n=t.get("EXT_texture_filter_anisotropic");return r=null!==n?e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0},getMaxPrecision:i,precision:o,logarithmicDepthBuffer:s,maxTextures:c,maxVertexTextures:u,maxTextureSize:l,maxCubemapSize:h,maxAttributes:d,maxVertexUniforms:p,maxVaryings:f,maxFragmentUniforms:m,vertexTextures:v,floatFragmentTextures:g,floatVertexTextures:v&&g}}(f,m,e),(_=new function(e,t,n){var r=new function(){var t=!1,n=new zt,r=null,i=new zt(0,0,0,0);return{setMask:function(n){r===n||t||(e.colorMask(n,n,n,n),r=n)},setLocked:function(e){t=e},setClear:function(t,r,o,a,s){!0===s&&(t*=a,r*=a,o*=a),n.set(t,r,o,a),!1===i.equals(n)&&(e.clearColor(t,r,o,a),i.copy(n))},reset:function(){t=!1,r=null,i.set(-1,0,0,0)}}},i=new function(){var t=!1,n=null,r=null,i=null;return{setTest:function(t){t?X(e.DEPTH_TEST):q(e.DEPTH_TEST)},setMask:function(r){n===r||t||(e.depthMask(r),n=r)},setFunc:function(t){if(r!==t){if(t)switch(t){case re:e.depthFunc(e.NEVER);break;case ie:e.depthFunc(e.ALWAYS);break;case oe:e.depthFunc(e.LESS);break;case ae:e.depthFunc(e.LEQUAL);break;case se:e.depthFunc(e.EQUAL);break;case ce:e.depthFunc(e.GEQUAL);break;case ue:e.depthFunc(e.GREATER);break;case le:e.depthFunc(e.NOTEQUAL);break;default:e.depthFunc(e.LEQUAL)}else e.depthFunc(e.LEQUAL);r=t}},setLocked:function(e){t=e},setClear:function(t){i!==t&&(e.clearDepth(t),i=t)},reset:function(){t=!1,n=null,r=null,i=null}}},o=new function(){var t=!1,n=null,r=null,i=null,o=null,a=null,s=null,c=null,u=null;return{setTest:function(t){t?X(e.STENCIL_TEST):q(e.STENCIL_TEST)},setMask:function(r){n===r||t||(e.stencilMask(r),n=r)},setFunc:function(t,n,a){r===t&&i===n&&o===a||(e.stencilFunc(t,n,a),r=t,i=n,o=a)},setOp:function(t,n,r){a===t&&s===n&&c===r||(e.stencilOp(t,n,r),a=t,s=n,c=r)},setLocked:function(e){t=e},setClear:function(t){u!==t&&(e.clearStencil(t),u=t)},reset:function(){t=!1,n=null,r=null,i=null,o=null,a=null,s=null,c=null,u=null}}},a=e.getParameter(e.MAX_VERTEX_ATTRIBS),s=new Uint8Array(a),c=new Uint8Array(a),u=new Uint8Array(a),l={},h=null,d=null,p=null,f=null,m=null,v=null,g=null,_=null,w=null,E=!1,M=null,T=null,S=null,A=null,L=null,C=e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS),O=parseFloat(/^WebGL\ ([0-9])/.exec(e.getParameter(e.VERSION))[1]),I=parseFloat(O)>=1,N=null,z={},G=new zt,V=new zt;function H(t,n,r){var i=new Uint8Array(4),o=e.createTexture();e.bindTexture(t,o),e.texParameteri(t,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(t,e.TEXTURE_MAG_FILTER,e.NEAREST);for(var a=0;a<r;a++)e.texImage2D(n+a,0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,i);return o}var W={};function X(t){!0!==l[t]&&(e.enable(t),l[t]=!0)}function q(t){!1!==l[t]&&(e.disable(t),l[t]=!1)}function Y(t,r,i,o,a,s,c,u){if(t!==D?X(e.BLEND):q(e.BLEND),t!==j){if(t!==p||u!==E)switch(t){case k:u?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ONE,e.ONE,e.ONE,e.ONE)):(e.blendEquation(e.FUNC_ADD),e.blendFunc(e.SRC_ALPHA,e.ONE));break;case B:u?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ZERO,e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ONE_MINUS_SRC_ALPHA)):(e.blendEquation(e.FUNC_ADD),e.blendFunc(e.ZERO,e.ONE_MINUS_SRC_COLOR));break;case F:u?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ZERO,e.SRC_COLOR,e.ZERO,e.SRC_ALPHA)):(e.blendEquation(e.FUNC_ADD),e.blendFunc(e.ZERO,e.SRC_COLOR));break;default:u?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ONE,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA)):(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA))}f=null,m=null,v=null,g=null,_=null,w=null}else a=a||r,s=s||i,c=c||o,r===f&&a===g||(e.blendEquationSeparate(n.convert(r),n.convert(a)),f=r,g=a),i===m&&o===v&&s===_&&c===w||(e.blendFuncSeparate(n.convert(i),n.convert(o),n.convert(s),n.convert(c)),m=i,v=o,_=s,w=c);p=t,E=u}function K(t){M!==t&&(t?e.frontFace(e.CW):e.frontFace(e.CCW),M=t)}function Z(t){t!==y?(X(e.CULL_FACE),t!==T&&(t===b?e.cullFace(e.BACK):t===x?e.cullFace(e.FRONT):e.cullFace(e.FRONT_AND_BACK))):q(e.CULL_FACE),T=t}function Q(t,n,r){t?(X(e.POLYGON_OFFSET_FILL),A===n&&L===r||(e.polygonOffset(n,r),A=n,L=r)):q(e.POLYGON_OFFSET_FILL)}function J(t){void 0===t&&(t=e.TEXTURE0+C-1),N!==t&&(e.activeTexture(t),N=t)}return W[e.TEXTURE_2D]=H(e.TEXTURE_2D,e.TEXTURE_2D,1),W[e.TEXTURE_CUBE_MAP]=H(e.TEXTURE_CUBE_MAP,e.TEXTURE_CUBE_MAP_POSITIVE_X,6),r.setClear(0,0,0,1),i.setClear(1),o.setClear(0),X(e.DEPTH_TEST),i.setFunc(ae),K(!1),Z(b),X(e.CULL_FACE),X(e.BLEND),Y(U),{buffers:{color:r,depth:i,stencil:o},initAttributes:function(){for(var e=0,t=s.length;e<t;e++)s[e]=0},enableAttribute:function(n){s[n]=1,0===c[n]&&(e.enableVertexAttribArray(n),c[n]=1),0!==u[n]&&(t.get("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(n,0),u[n]=0)},enableAttributeAndDivisor:function(n,r){s[n]=1,0===c[n]&&(e.enableVertexAttribArray(n),c[n]=1),u[n]!==r&&(t.get("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(n,r),u[n]=r)},disableUnusedAttributes:function(){for(var t=0,n=c.length;t!==n;++t)c[t]!==s[t]&&(e.disableVertexAttribArray(t),c[t]=0)},enable:X,disable:q,getCompressedTextureFormats:function(){if(null===h&&(h=[],t.get("WEBGL_compressed_texture_pvrtc")||t.get("WEBGL_compressed_texture_s3tc")||t.get("WEBGL_compressed_texture_etc1")))for(var n=e.getParameter(e.COMPRESSED_TEXTURE_FORMATS),r=0;r<n.length;r++)h.push(n[r]);return h},useProgram:function(t){return d!==t&&(e.useProgram(t),d=t,!0)},setBlending:Y,setMaterial:function(t){t.side===P?q(e.CULL_FACE):X(e.CULL_FACE),K(t.side===R),!0===t.transparent?Y(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha):Y(D),i.setFunc(t.depthFunc),i.setTest(t.depthTest),i.setMask(t.depthWrite),r.setMask(t.colorWrite),Q(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits)},setFlipSided:K,setCullFace:Z,setLineWidth:function(t){t!==S&&(I&&e.lineWidth(t),S=t)},setPolygonOffset:Q,setScissorTest:function(t){t?X(e.SCISSOR_TEST):q(e.SCISSOR_TEST)},activeTexture:J,bindTexture:function(t,n){null===N&&J();var r=z[N];void 0===r&&(r={type:void 0,texture:void 0},z[N]=r),r.type===t&&r.texture===n||(e.bindTexture(t,n||W[t]),r.type=t,r.texture=n)},compressedTexImage2D:function(){try{e.compressedTexImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage2D:function(){try{e.texImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},scissor:function(t){!1===G.equals(t)&&(e.scissor(t.x,t.y,t.z,t.w),G.copy(t))},viewport:function(t){!1===V.equals(t)&&(e.viewport(t.x,t.y,t.z,t.w),V.copy(t))},reset:function(){for(var t=0;t<c.length;t++)1===c[t]&&(e.disableVertexAttribArray(t),c[t]=0);l={},h=null,N=null,z={},d=null,p=null,M=null,T=null,r.reset(),i.reset(),o.reset()}}}(f,m,X)).scissor(ne.copy(ye).multiplyScalar(ve)),_.viewport(te.copy(ge).multiplyScalar(ve)),E=new function(){var e={};return{get:function(t){var n=t.uuid,r=e[n];return void 0===r&&(r={},e[n]=r),r},remove:function(t){delete e[t.uuid]},clear:function(){e={}}}},M=new gi(f,m,_,E,g,X,Se),T=new ir(f),S=new function(e,t,n){var r={},i={};function o(e){var a=e.target,s=r[a.id];for(var c in null!==s.index&&t.remove(s.index),s.attributes)t.remove(s.attributes[c]);a.removeEventListener("dispose",o),delete r[a.id];var u=i[a.id];u&&(t.remove(u),delete i[a.id]),(u=i[s.id])&&(t.remove(u),delete i[s.id]),n.geometries--}return{get:function(e,t){var i=r[t.id];return i||(t.addEventListener("dispose",o),t.isBufferGeometry?i=t:t.isGeometry&&(void 0===t._bufferGeometry&&(t._bufferGeometry=(new Fr).setFromObject(e)),i=t._bufferGeometry),r[t.id]=i,n.geometries++,i)},update:function(n){var r=n.index,i=n.attributes;for(var o in null!==r&&t.update(r,e.ELEMENT_ARRAY_BUFFER),i)t.update(i[o],e.ARRAY_BUFFER);var a=n.morphAttributes;for(var o in a)for(var s=a[o],c=0,u=s.length;c<u;c++)t.update(s[c],e.ARRAY_BUFFER)},getWireframeAttribute:function(n){var r=i[n.id];if(r)return r;var o,a=[],s=n.index,c=n.attributes;if(null!==s)for(var u=0,l=(o=s.array).length;u<l;u+=3){var h=o[u+0],d=o[u+1],p=o[u+2];a.push(h,d,d,p,p,h)}else for(u=0,l=(o=c.position.array).length/3-1;u<l;u+=3)h=u+0,d=u+1,p=u+2,a.push(h,d,d,p,p,h);return r=new(Lr(a)>65535?Sr:Mr)(a,1),t.update(r,e.ELEMENT_ARRAY_BUFFER),i[n.id]=r,r}}}(f,T,Se),A=new function(e,t){var n={};return{update:function(r){var i=t.frame,o=r.geometry,a=e.get(r,o);return n[a.id]!==i&&(o.isGeometry&&a.updateFromObject(r),e.update(a),n[a.id]=i),a},clear:function(){n={}}}}(S,Ae),z=new function(e){var t={},n=new Float32Array(8);return{update:function(r,i,o,a){var s=r.morphTargetInfluences,c=s.length,u=t[i.id];if(void 0===u){u=[];for(var l=0;l<c;l++)u[l]=[l,0];t[i.id]=u}var h=o.morphTargets&&i.morphAttributes.position,d=o.morphNormals&&i.morphAttributes.normal;for(l=0;l<c;l++)0!==(p=u[l])[1]&&(h&&i.removeAttribute("morphTarget"+l),d&&i.removeAttribute("morphNormal"+l));for(l=0;l<c;l++)(p=u[l])[0]=l,p[1]=s[l];for(u.sort($r),l=0;l<8;l++){var p;if(p=u[l]){var f=p[0],m=p[1];if(m){h&&i.addAttribute("morphTarget"+l,h[f]),d&&i.addAttribute("morphNormal"+l,d[f]),n[l]=m;continue}}n[l]=0}a.getUniforms().setValue(e,"morphTargetInfluences",n)}}}(f),C=new vi(q,m,g),L=new ei,I=new Jr,N=new function(e,t,n,r){var i,o,a,s=new In(0),c=0;function u(e,n){t.buffers.color.setClear(e.r,e.g,e.b,n,r)}return{getClearColor:function(){return s},setClearColor:function(e,t){s.set(e),u(s,c=void 0!==t?t:1)},getClearAlpha:function(){return c},setClearAlpha:function(e){u(s,c=e)},render:function(t,r,l,h){var d=r.background;null===d?u(s,c):d&&d.isColor&&(u(d,1),h=!0),(e.autoClear||h)&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),d&&d.isCubeTexture?(void 0===a&&((a=new Kr(new zr(1,1,1),new Wr({uniforms:kn.cube.uniforms,vertexShader:kn.cube.vertexShader,fragmentShader:kn.cube.fragmentShader,side:R,depthTest:!0,depthWrite:!1,fog:!1}))).geometry.removeAttribute("normal"),a.geometry.removeAttribute("uv"),a.onBeforeRender=function(e,t,n){this.matrixWorld.copyPosition(n.matrixWorld)},n.update(a.geometry)),a.material.uniforms.tCube.value=d,t.push(a,a.geometry,a.material,0,null)):d&&d.isTexture&&(void 0===i&&(i=new fr(-1,1,1,-1,0,1),o=new Kr(new Vr(2,2),new Hr({depthTest:!1,depthWrite:!1,fog:!1})),n.update(o.geometry)),o.material.map=d,e.renderBufferDirect(i,null,o.geometry,o.material,o,null))}}}(q,_,S,s),G=new function(e,t,n){var r;this.setMode=function(e){r=e},this.render=function(t,i){e.drawArrays(r,t,i),n.calls++,n.vertices+=i,r===e.TRIANGLES?n.faces+=i/3:r===e.POINTS&&(n.points+=i)},this.renderInstances=function(i,o,a){var s=t.get("ANGLE_instanced_arrays");if(null!==s){var c=i.attributes.position;c.isInterleavedBufferAttribute?(a=c.data.count,s.drawArraysInstancedANGLE(r,0,a,i.maxInstancedCount)):s.drawArraysInstancedANGLE(r,o,a,i.maxInstancedCount),n.calls++,n.vertices+=a*i.maxInstancedCount,r===e.TRIANGLES?n.faces+=i.maxInstancedCount*a/3:r===e.POINTS&&(n.points+=i.maxInstancedCount*a)}else console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.")}}(f,m,Ae),V=new function(e,t,n){var r,i,o;this.setMode=function(e){r=e},this.setIndex=function(e){i=e.type,o=e.bytesPerElement},this.render=function(t,a){e.drawElements(r,a,i,t*o),n.calls++,n.vertices+=a,r===e.TRIANGLES?n.faces+=a/3:r===e.POINTS&&(n.points+=a)},this.renderInstances=function(a,s,c){var u=t.get("ANGLE_instanced_arrays");null!==u?(u.drawElementsInstancedANGLE(r,c,i,s*o,a.maxInstancedCount),n.calls++,n.vertices+=c*a.maxInstancedCount,r===e.TRIANGLES?n.faces+=a.maxInstancedCount*c/3:r===e.POINTS&&(n.points+=a.maxInstancedCount*c)):console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.")}}(f,m,Ae),H=new Fn(q,f,_,M,g),W=new zn(q,f,_,M,g),q.info.programs=C.programs,q.context=f,q.capabilities=g,q.extensions=m,q.properties=E,q.renderLists=I,q.state=_}Le();var Ce=new function(e){var t=this,n=null,r=null;"undefined"!=typeof window&&"VRFrameData"in window&&(r=new window.VRFrameData);var i=new Dt,o=new Dt,a=new Dt,s=new yi;s.bounds=new zt(0,0,.5,1),s.layers.enable(1);var c=new yi;c.bounds=new zt(.5,0,.5,1),c.layers.enable(2);var u,l,h=new bi([s,c]);function d(){if(null!==n&&n.isPresenting){var r=n.getEyeParameters("left"),i=r.renderWidth,o=r.renderHeight;l=e.getPixelRatio(),u=e.getSize(),e.setDrawingBufferSize(2*i,o,1)}else t.enabled&&e.setDrawingBufferSize(u.width,u.height,l)}h.layers.enable(1),h.layers.enable(2),"undefined"!=typeof window&&window.addEventListener("vrdisplaypresentchange",d,!1),this.enabled=!1,this.standing=!1,this.getDevice=function(){return n},this.setDevice=function(e){void 0!==e&&(n=e)},this.getCamera=function(e){if(null===n)return e;n.depthNear=e.near,n.depthFar=e.far,n.getFrameData(r);var t=r.pose;null!==t.position?e.position.fromArray(t.position):e.position.set(0,0,0),null!==t.orientation&&e.quaternion.fromArray(t.orientation),e.updateMatrixWorld();var u=n.stageParameters;if(this.standing&&u&&(o.fromArray(u.sittingToStandingTransform),a.getInverse(o),e.matrixWorld.multiply(o),e.matrixWorldInverse.multiply(a)),!1===n.isPresenting)return e;s.near=e.near,c.near=e.near,s.far=e.far,c.far=e.far,h.matrixWorld.copy(e.matrixWorld),h.matrixWorldInverse.copy(e.matrixWorldInverse),s.matrixWorldInverse.fromArray(r.leftViewMatrix),c.matrixWorldInverse.fromArray(r.rightViewMatrix),this.standing&&u&&(s.matrixWorldInverse.multiply(a),c.matrixWorldInverse.multiply(a));var l=e.parent;null!==l&&(i.getInverse(l.matrixWorld),s.matrixWorldInverse.multiply(i),c.matrixWorldInverse.multiply(i)),s.matrixWorld.getInverse(s.matrixWorldInverse),c.matrixWorld.getInverse(c.matrixWorldInverse),s.projectionMatrix.fromArray(r.leftProjectionMatrix),c.projectionMatrix.fromArray(r.rightProjectionMatrix),h.projectionMatrix.copy(s.projectionMatrix);var d=n.getLayers();if(d.length){var p=d[0];null!==p.leftBounds&&4===p.leftBounds.length&&s.bounds.fromArray(p.leftBounds),null!==p.rightBounds&&4===p.rightBounds.length&&c.bounds.fromArray(p.rightBounds)}return h},this.getStandingMatrix=function(){return o},this.submitFrame=function(){n&&n.isPresenting&&n.submitFrame()},this.dispose=function(){"undefined"!=typeof window&&window.removeEventListener("vrdisplaypresentchange",d)}}(q);this.vr=Ce;var Oe=new rr(q,A,g.maxTextureSize);function Ie(e){e.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),Y=!0}function Ne(){console.log("THREE.WebGLRenderer: Context Restored."),Y=!1,Le()}function De(e){var t=e.target;t.removeEventListener("dispose",De),function(e){ke(e),E.remove(e)}(t)}function ke(e){var t=E.get(e).program;e.program=void 0,void 0!==t&&C.releaseProgram(t)}this.shadowMap=Oe,this.getContext=function(){return f},this.getContextAttributes=function(){return f.getContextAttributes()},this.forceContextLoss=function(){var e=m.get("WEBGL_lose_context");e&&e.loseContext()},this.forceContextRestore=function(){var e=m.get("WEBGL_lose_context");e&&e.restoreContext()},this.getPixelRatio=function(){return ve},this.setPixelRatio=function(e){void 0!==e&&(ve=e,this.setSize(pe,fe,!1))},this.getSize=function(){return{width:pe,height:fe}},this.setSize=function(e,n,r){var i=Ce.getDevice();i&&i.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(pe=e,fe=n,t.width=e*ve,t.height=n*ve,!1!==r&&(t.style.width=e+"px",t.style.height=n+"px"),this.setViewport(0,0,e,n))},this.getDrawingBufferSize=function(){return{width:pe*ve,height:fe*ve}},this.setDrawingBufferSize=function(e,n,r){pe=e,fe=n,ve=r,t.width=e*r,t.height=n*r,this.setViewport(0,0,e,n)},this.setViewport=function(e,t,n,r){ge.set(e,fe-t-r,n,r),_.viewport(te.copy(ge).multiplyScalar(ve))},this.setScissor=function(e,t,n,r){ye.set(e,fe-t-r,n,r),_.scissor(ne.copy(ye).multiplyScalar(ve))},this.setScissorTest=function(e){_.setScissorTest(be=e)},this.getClearColor=function(){return N.getClearColor()},this.setClearColor=function(){N.setClearColor.apply(N,arguments)},this.getClearAlpha=function(){return N.getClearAlpha()},this.setClearAlpha=function(){N.setClearAlpha.apply(N,arguments)},this.clear=function(e,t,n){var r=0;(void 0===e||e)&&(r|=f.COLOR_BUFFER_BIT),(void 0===t||t)&&(r|=f.DEPTH_BUFFER_BIT),(void 0===n||n)&&(r|=f.STENCIL_BUFFER_BIT),f.clear(r)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.clearTarget=function(e,t,n,r){this.setRenderTarget(e),this.clear(t,n,r)},this.dispose=function(){t.removeEventListener("webglcontextlost",Ie,!1),t.removeEventListener("webglcontextrestored",Ne,!1),I.dispose(),Ce.dispose()},this.renderBufferImmediate=function(e,t,n){_.initAttributes();var r=E.get(e);e.hasPositions&&!r.position&&(r.position=f.createBuffer()),e.hasNormals&&!r.normal&&(r.normal=f.createBuffer()),e.hasUvs&&!r.uv&&(r.uv=f.createBuffer()),e.hasColors&&!r.color&&(r.color=f.createBuffer());var i=t.getAttributes();if(e.hasPositions&&(f.bindBuffer(f.ARRAY_BUFFER,r.position),f.bufferData(f.ARRAY_BUFFER,e.positionArray,f.DYNAMIC_DRAW),_.enableAttribute(i.position),f.vertexAttribPointer(i.position,3,f.FLOAT,!1,0,0)),e.hasNormals){if(f.bindBuffer(f.ARRAY_BUFFER,r.normal),!n.isMeshPhongMaterial&&!n.isMeshStandardMaterial&&!n.isMeshNormalMaterial&&!0===n.flatShading)for(var o=0,a=3*e.count;o<a;o+=9){var s=e.normalArray,c=(s[o+0]+s[o+3]+s[o+6])/3,u=(s[o+1]+s[o+4]+s[o+7])/3,l=(s[o+2]+s[o+5]+s[o+8])/3;s[o+0]=c,s[o+1]=u,s[o+2]=l,s[o+3]=c,s[o+4]=u,s[o+5]=l,s[o+6]=c,s[o+7]=u,s[o+8]=l}f.bufferData(f.ARRAY_BUFFER,e.normalArray,f.DYNAMIC_DRAW),_.enableAttribute(i.normal),f.vertexAttribPointer(i.normal,3,f.FLOAT,!1,0,0)}e.hasUvs&&n.map&&(f.bindBuffer(f.ARRAY_BUFFER,r.uv),f.bufferData(f.ARRAY_BUFFER,e.uvArray,f.DYNAMIC_DRAW),_.enableAttribute(i.uv),f.vertexAttribPointer(i.uv,2,f.FLOAT,!1,0,0)),e.hasColors&&n.vertexColors!==O&&(f.bindBuffer(f.ARRAY_BUFFER,r.color),f.bufferData(f.ARRAY_BUFFER,e.colorArray,f.DYNAMIC_DRAW),_.enableAttribute(i.color),f.vertexAttribPointer(i.color,3,f.FLOAT,!1,0,0)),_.disableUnusedAttributes(),f.drawArrays(f.TRIANGLES,0,e.count),e.count=0},this.renderBufferDirect=function(e,t,n,r,i,o){_.setMaterial(r);var a=qe(e,t,r,i),s=n.id+"_"+a.id+"_"+(!0===r.wireframe),c=!1;s!==J&&(J=s,c=!0),i.morphTargetInfluences&&(z.update(i,n,r,a),c=!0);var u,l=n.index,h=n.attributes.position,d=1;!0===r.wireframe&&(l=S.getWireframeAttribute(n),d=2);var p=G;null!==l&&(u=T.get(l),(p=V).setIndex(u)),c&&(!function(e,t,n,r){if(n&&n.isInstancedBufferGeometry&&null===m.get("ANGLE_instanced_arrays"))return void console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");void 0===r&&(r=0);_.initAttributes();var i=n.attributes,o=t.getAttributes(),a=e.defaultAttributeValues;for(var s in o){var c=o[s];if(c>=0){var u=i[s];if(void 0!==u){var l=u.normalized,h=u.itemSize,d=T.get(u);if(void 0===d)continue;var p=d.buffer,v=d.type,g=d.bytesPerElement;if(u.isInterleavedBufferAttribute){var y=u.data,b=y.stride,x=u.offset;y&&y.isInstancedInterleavedBuffer?(_.enableAttributeAndDivisor(c,y.meshPerAttribute),void 0===n.maxInstancedCount&&(n.maxInstancedCount=y.meshPerAttribute*y.count)):_.enableAttribute(c),f.bindBuffer(f.ARRAY_BUFFER,p),f.vertexAttribPointer(c,h,v,l,b*g,(r*b+x)*g)}else u.isInstancedBufferAttribute?(_.enableAttributeAndDivisor(c,u.meshPerAttribute),void 0===n.maxInstancedCount&&(n.maxInstancedCount=u.meshPerAttribute*u.count)):_.enableAttribute(c),f.bindBuffer(f.ARRAY_BUFFER,p),f.vertexAttribPointer(c,h,v,l,0,r*h*g)}else if(void 0!==a){var w=a[s];if(void 0!==w)switch(w.length){case 2:f.vertexAttrib2fv(c,w);break;case 3:f.vertexAttrib3fv(c,w);break;case 4:f.vertexAttrib4fv(c,w);break;default:f.vertexAttrib1fv(c,w)}}}}_.disableUnusedAttributes()}(r,a,n),null!==l&&f.bindBuffer(f.ELEMENT_ARRAY_BUFFER,u.buffer));var v=0;null!==l?v=l.count:void 0!==h&&(v=h.count);var g=n.drawRange.start*d,y=n.drawRange.count*d,b=null!==o?o.start*d:0,x=null!==o?o.count*d:1/0,w=Math.max(g,b),E=Math.min(v,g+y,b+x)-1,M=Math.max(0,E-w+1);if(0!==M){if(i.isMesh)if(!0===r.wireframe)_.setLineWidth(r.wireframeLinewidth*Re()),p.setMode(f.LINES);else switch(i.drawMode){case xt:p.setMode(f.TRIANGLES);break;case _t:p.setMode(f.TRIANGLE_STRIP);break;case wt:p.setMode(f.TRIANGLE_FAN)}else if(i.isLine){var A=r.linewidth;void 0===A&&(A=1),_.setLineWidth(A*Re()),i.isLineSegments?p.setMode(f.LINES):i.isLineLoop?p.setMode(f.LINE_LOOP):p.setMode(f.LINE_STRIP)}else i.isPoints&&p.setMode(f.POINTS);n&&n.isInstancedBufferGeometry?n.maxInstancedCount>0&&p.renderInstances(n,w,M):p.render(w,M)}},this.compile=function(e,t){u.length=0,l.length=0,e.traverse(function(e){e.isLight&&(u.push(e),e.castShadow&&l.push(e))}),L.setup(u,l,t),e.traverse(function(t){if(t.material)if(Array.isArray(t.material))for(var n=0;n<t.material.length;n++)Xe(t.material[n],e.fog,t);else Xe(t.material,e.fog,t)})};var Be,Fe=!1,je=null;function ze(e){null!==je&&je(e);var t=Ce.getDevice();t&&t.isPresenting?t.requestAnimationFrame(ze):window.requestAnimationFrame(ze)}function He(e,t,n,r){for(var i=0,o=e.length;i<o;i++){var a=e[i],s=a.object,c=a.geometry,u=void 0===r?a.material:r,l=a.group;if(n.isArrayCamera){ee=n;for(var h=n.cameras,d=0,p=h.length;d<p;d++){var f=h[d];if(s.layers.test(f.layers)){var m=f.bounds,v=m.x*pe,g=m.y*fe,y=m.z*pe,b=m.w*fe;_.viewport(te.set(v,g,y,b).multiplyScalar(ve)),We(s,t,f,c,u,l)}}}else ee=null,We(s,t,n,c,u,l)}}function We(e,t,n,r,i,o){if(e.onBeforeRender(q,t,n,r,i,o),e.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix),e.isImmediateRenderObject){_.setMaterial(i);var a=qe(n,t.fog,i,e);J="",function(e,t,n){e.render(function(e){q.renderBufferImmediate(e,t,n)})}(e,a,i)}else q.renderBufferDirect(n,t.fog,r,i,e,o);e.onAfterRender(q,t,n,r,i,o)}function Xe(e,t,n){var r=E.get(e),i=C.getParameters(e,L.state,l,t,_e.numPlanes,_e.numIntersection,n),o=C.getProgramCode(e,i),a=r.program,s=!0;if(void 0===a)e.addEventListener("dispose",De);else if(a.code!==o)ke(e);else{if(void 0!==i.shaderID)return;s=!1}if(s){if(i.shaderID){var c=kn[i.shaderID];r.shader={name:e.type,uniforms:Dn.clone(c.uniforms),vertexShader:c.vertexShader,fragmentShader:c.fragmentShader}}else r.shader={name:e.type,uniforms:e.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader};e.onBeforeCompile(r.shader),a=C.acquireProgram(e,r.shader,i,o),r.program=a,e.program=a}var u=a.getAttributes();if(e.morphTargets){e.numSupportedMorphTargets=0;for(var h=0;h<q.maxMorphTargets;h++)u["morphTarget"+h]>=0&&e.numSupportedMorphTargets++}if(e.morphNormals){e.numSupportedMorphNormals=0;for(h=0;h<q.maxMorphNormals;h++)u["morphNormal"+h]>=0&&e.numSupportedMorphNormals++}var d=r.shader.uniforms;(e.isShaderMaterial||e.isRawShaderMaterial)&&!0!==e.clipping||(r.numClippingPlanes=_e.numPlanes,r.numIntersection=_e.numIntersection,d.clippingPlanes=_e.uniform),r.fog=t,r.lightsHash=L.state.hash,e.lights&&(d.ambientLightColor.value=L.state.ambient,d.directionalLights.value=L.state.directional,d.spotLights.value=L.state.spot,d.rectAreaLights.value=L.state.rectArea,d.pointLights.value=L.state.point,d.hemisphereLights.value=L.state.hemi,d.directionalShadowMap.value=L.state.directionalShadowMap,d.directionalShadowMatrix.value=L.state.directionalShadowMatrix,d.spotShadowMap.value=L.state.spotShadowMap,d.spotShadowMatrix.value=L.state.spotShadowMatrix,d.pointShadowMap.value=L.state.pointShadowMap,d.pointShadowMatrix.value=L.state.pointShadowMatrix);var p=r.program.getUniforms(),f=Cn.seqWithValue(p.seq,d);r.uniformsList=f}function qe(e,t,n,r){de=0;var i=E.get(n);if(we&&(Ee||e!==$)){var o=e===$&&n.id===Q;_e.setState(n.clippingPlanes,n.clipIntersection,n.clipShadows,e,i,o)}!1===n.needsUpdate&&(void 0===i.program?n.needsUpdate=!0:n.fog&&i.fog!==t?n.needsUpdate=!0:n.lights&&i.lightsHash!==L.state.hash?n.needsUpdate=!0:void 0===i.numClippingPlanes||i.numClippingPlanes===_e.numPlanes&&i.numIntersection===_e.numIntersection||(n.needsUpdate=!0)),n.needsUpdate&&(Xe(n,t,r),n.needsUpdate=!1);var a,s,c=!1,u=!1,l=!1,h=i.program,d=h.getUniforms(),p=i.shader.uniforms;if(_.useProgram(h.program)&&(c=!0,u=!0,l=!0),n.id!==Q&&(Q=n.id,u=!0),c||e!==$){if(d.setValue(f,"projectionMatrix",e.projectionMatrix),g.logarithmicDepthBuffer&&d.setValue(f,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),$!==(ee||e)&&($=ee||e,u=!0,l=!0),n.isShaderMaterial||n.isMeshPhongMaterial||n.isMeshStandardMaterial||n.envMap){var m=d.map.cameraPosition;void 0!==m&&m.setValue(f,Te.setFromMatrixPosition(e.matrixWorld))}(n.isMeshPhongMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial||n.skinning)&&d.setValue(f,"viewMatrix",e.matrixWorldInverse)}if(n.skinning){d.setOptional(f,r,"bindMatrix"),d.setOptional(f,r,"bindMatrixInverse");var v=r.skeleton;if(v){var y=v.bones;if(g.floatVertexTextures){if(void 0===v.boneTexture){var b=Math.sqrt(4*y.length);b=It.ceilPowerOfTwo(b),b=Math.max(b,4);var x=new Float32Array(b*b*4);x.set(v.boneMatrices);var w=new Ht(x,b,b,Ze,Ge);v.boneMatrices=x,v.boneTexture=w,v.boneTextureSize=b}d.setValue(f,"boneTexture",v.boneTexture),d.setValue(f,"boneTextureSize",v.boneTextureSize)}else d.setOptional(f,v,"boneMatrices")}}return u&&(d.setValue(f,"toneMappingExposure",q.toneMappingExposure),d.setValue(f,"toneMappingWhitePoint",q.toneMappingWhitePoint),n.lights&&(s=l,(a=p).ambientLightColor.needsUpdate=s,a.directionalLights.needsUpdate=s,a.pointLights.needsUpdate=s,a.spotLights.needsUpdate=s,a.rectAreaLights.needsUpdate=s,a.hemisphereLights.needsUpdate=s),t&&n.fog&&function(e,t){e.fogColor.value=t.color,t.isFog?(e.fogNear.value=t.near,e.fogFar.value=t.far):t.isFogExp2&&(e.fogDensity.value=t.density)}(p,t),n.isMeshBasicMaterial?Ye(p,n):n.isMeshLambertMaterial?(Ye(p,n),function(e,t){t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap)}(p,n)):n.isMeshPhongMaterial?(Ye(p,n),n.isMeshToonMaterial?function(e,t){Ke(e,t),t.gradientMap&&(e.gradientMap.value=t.gradientMap)}(p,n):Ke(p,n)):n.isMeshStandardMaterial?(Ye(p,n),n.isMeshPhysicalMaterial?function(e,t){e.clearCoat.value=t.clearCoat,e.clearCoatRoughness.value=t.clearCoatRoughness,Qe(e,t)}(p,n):Qe(p,n)):n.isMeshDepthMaterial?(Ye(p,n),function(e,t){t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(p,n)):n.isMeshDistanceMaterial?(Ye(p,n),function(e,t){t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias);e.referencePosition.value.copy(t.referencePosition),e.nearDistance.value=t.nearDistance,e.farDistance.value=t.farDistance}(p,n)):n.isMeshNormalMaterial?(Ye(p,n),function(e,t){t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale);t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale));t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(p,n)):n.isLineBasicMaterial?(function(e,t){e.diffuse.value=t.color,e.opacity.value=t.opacity}(p,n),n.isLineDashedMaterial&&function(e,t){e.dashSize.value=t.dashSize,e.totalSize.value=t.dashSize+t.gapSize,e.scale.value=t.scale}(p,n)):n.isPointsMaterial?function(e,t){if(e.diffuse.value=t.color,e.opacity.value=t.opacity,e.size.value=t.size*ve,e.scale.value=.5*fe,e.map.value=t.map,null!==t.map){if(!0===t.map.matrixAutoUpdate){var n=t.map.offset,r=t.map.repeat,i=t.map.rotation,o=t.map.center;t.map.matrix.setUvTransform(n.x,n.y,r.x,r.y,i,o.x,o.y)}e.uvTransform.value.copy(t.map.matrix)}}(p,n):n.isShadowMaterial&&(p.color.value=n.color,p.opacity.value=n.opacity),void 0!==p.ltcMat&&(p.ltcMat.value=Nn.LTC_MAT_TEXTURE),void 0!==p.ltcMag&&(p.ltcMag.value=Nn.LTC_MAG_TEXTURE),Cn.upload(f,i.uniformsList,p,q)),d.setValue(f,"modelViewMatrix",r.modelViewMatrix),d.setValue(f,"normalMatrix",r.normalMatrix),d.setValue(f,"modelMatrix",r.matrixWorld),h}function Ye(e,t){var n;if(e.opacity.value=t.opacity,t.color&&(e.diffuse.value=t.color),t.emissive&&e.emissive.value.copy(t.emissive).multiplyScalar(t.emissiveIntensity),t.map&&(e.map.value=t.map),t.alphaMap&&(e.alphaMap.value=t.alphaMap),t.specularMap&&(e.specularMap.value=t.specularMap),t.envMap&&(e.envMap.value=t.envMap,e.flipEnvMap.value=t.envMap&&t.envMap.isCubeTexture?-1:1,e.reflectivity.value=t.reflectivity,e.refractionRatio.value=t.refractionRatio),t.lightMap&&(e.lightMap.value=t.lightMap,e.lightMapIntensity.value=t.lightMapIntensity),t.aoMap&&(e.aoMap.value=t.aoMap,e.aoMapIntensity.value=t.aoMapIntensity),t.map?n=t.map:t.specularMap?n=t.specularMap:t.displacementMap?n=t.displacementMap:t.normalMap?n=t.normalMap:t.bumpMap?n=t.bumpMap:t.roughnessMap?n=t.roughnessMap:t.metalnessMap?n=t.metalnessMap:t.alphaMap?n=t.alphaMap:t.emissiveMap&&(n=t.emissiveMap),void 0!==n){if(n.isWebGLRenderTarget&&(n=n.texture),!0===n.matrixAutoUpdate){var r=n.offset,i=n.repeat,o=n.rotation,a=n.center;n.matrix.setUvTransform(r.x,r.y,i.x,i.y,o,a.x,a.y)}e.uvTransform.value.copy(n.matrix)}}function Ke(e,t){e.specular.value=t.specular,e.shininess.value=Math.max(t.shininess,1e-4),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap),t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale),t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale)),t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}function Qe(e,t){e.roughness.value=t.roughness,e.metalness.value=t.metalness,t.roughnessMap&&(e.roughnessMap.value=t.roughnessMap),t.metalnessMap&&(e.metalnessMap.value=t.metalnessMap),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap),t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale),t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale)),t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias),t.envMap&&(e.envMapIntensity.value=t.envMapIntensity)}this.animate=function(e){je=e,function(){if(!Fe){var e=Ce.getDevice();e&&e.isPresenting?e.requestAnimationFrame(ze):window.requestAnimationFrame(ze),Fe=!0}}()},this.render=function(e,t,n,r){if(t&&t.isCamera){if(!Y){J="",Q=-1,$=null,!0===e.autoUpdate&&e.updateMatrixWorld(),null===t.parent&&t.updateMatrixWorld(),Ce.enabled&&(t=Ce.getCamera(t)),Me.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),xe.setFromMatrix(Me),u.length=0,l.length=0,d.length=0,p.length=0,Ee=this.localClippingEnabled,we=_e.init(this.clippingPlanes,Ee,t),(h=I.get(e,t)).init(),function e(t,n,r){if(!1===t.visible)return;var i=t.layers.test(n.layers);if(i)if(t.isLight)u.push(t),t.castShadow&&l.push(t);else if(t.isSprite)t.frustumCulled&&!xe.intersectsSprite(t)||d.push(t);else if(t.isLensFlare)p.push(t);else if(t.isImmediateRenderObject)r&&Te.setFromMatrixPosition(t.matrixWorld).applyMatrix4(Me),h.push(t,null,t.material,Te.z,null);else if((t.isMesh||t.isLine||t.isPoints)&&(t.isSkinnedMesh&&t.skeleton.update(),!t.frustumCulled||xe.intersectsObject(t))){r&&Te.setFromMatrixPosition(t.matrixWorld).applyMatrix4(Me);var o=A.update(t),a=t.material;if(Array.isArray(a))for(var s=o.groups,c=0,f=s.length;c<f;c++){var m=s[c],v=a[m.materialIndex];v&&v.visible&&h.push(t,o,v,Te.z,m)}else a.visible&&h.push(t,o,a,Te.z,null)}var g=t.children;for(var c=0,f=g.length;c<f;c++)e(g[c],n,r)}(e,t,q.sortObjects),!0===q.sortObjects&&h.sort(),we&&_e.beginShadows(),Oe.render(l,e,t),L.setup(u,l,t),we&&_e.endShadows(),Ae.frame++,Ae.calls=0,Ae.vertices=0,Ae.faces=0,Ae.points=0,void 0===n&&(n=null),this.setRenderTarget(n),N.render(h,e,t,r);var i=h.opaque,o=h.transparent;if(e.overrideMaterial){var a=e.overrideMaterial;i.length&&He(i,e,t,a),o.length&&He(o,e,t,a)}else i.length&&He(i,e,t),o.length&&He(o,e,t);W.render(d,e,t),H.render(p,e,t,te),n&&M.updateRenderTargetMipmap(n),_.buffers.depth.setTest(!0),_.buffers.depth.setMask(!0),_.buffers.color.setMask(!0),_.setPolygonOffset(!1),Ce.enabled&&Ce.submitFrame()}}else console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.")},this.setFaceCulling=function(e,t){_.setCullFace(e),_.setFlipSided(t===w)},this.allocTextureUnit=function(){var e=de;return e>=g.maxTextures&&console.warn("THREE.WebGLRenderer: Trying to use "+e+" texture units while this GPU supports only "+g.maxTextures),de+=1,e},this.setTexture2D=(Be=!1,function(e,t){e&&e.isWebGLRenderTarget&&(Be||(console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."),Be=!0),e=e.texture),M.setTexture2D(e,t)}),this.setTexture=function(){var e=!1;return function(t,n){e||(console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."),e=!0),M.setTexture2D(t,n)}}(),this.setTextureCube=function(){var e=!1;return function(t,n){t&&t.isWebGLRenderTargetCube&&(e||(console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."),e=!0),t=t.texture),t&&t.isCubeTexture||Array.isArray(t.image)&&6===t.image.length?M.setTextureCube(t,n):M.setTextureCubeDynamic(t,n)}}(),this.getRenderTarget=function(){return K},this.setRenderTarget=function(e){K=e,e&&void 0===E.get(e).__webglFramebuffer&&M.setupRenderTarget(e);var t=null,n=!1;if(e){var r=E.get(e).__webglFramebuffer;e.isWebGLRenderTargetCube?(t=r[e.activeCubeFace],n=!0):t=r,te.copy(e.viewport),ne.copy(e.scissor),he=e.scissorTest}else te.copy(ge).multiplyScalar(ve),ne.copy(ye).multiplyScalar(ve),he=be;if(Z!==t&&(f.bindFramebuffer(f.FRAMEBUFFER,t),Z=t),_.viewport(te),_.scissor(ne),_.setScissorTest(he),n){var i=E.get(e.texture);f.framebufferTexture2D(f.FRAMEBUFFER,f.COLOR_ATTACHMENT0,f.TEXTURE_CUBE_MAP_POSITIVE_X+e.activeCubeFace,i.__webglTexture,e.activeMipMapLevel)}},this.readRenderTargetPixels=function(e,t,n,r,i,o){if(e&&e.isWebGLRenderTarget){var a=E.get(e).__webglFramebuffer;if(a){var s=!1;a!==Z&&(f.bindFramebuffer(f.FRAMEBUFFER,a),s=!0);try{var c=e.texture,u=c.format,l=c.type;if(u!==Ze&&X.convert(u)!==f.getParameter(f.IMPLEMENTATION_COLOR_READ_FORMAT))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!(l===Ue||X.convert(l)===f.getParameter(f.IMPLEMENTATION_COLOR_READ_TYPE)||l===Ge&&(m.get("OES_texture_float")||m.get("WEBGL_color_buffer_float"))||l===Ve&&m.get("EXT_color_buffer_half_float")))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");f.checkFramebufferStatus(f.FRAMEBUFFER)===f.FRAMEBUFFER_COMPLETE?t>=0&&t<=e.width-r&&n>=0&&n<=e.height-i&&f.readPixels(t,n,r,i,X.convert(u),X.convert(l),o):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{s&&f.bindFramebuffer(f.FRAMEBUFFER,Z)}}}else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")}}function wi(e,t){this.name="",this.color=new In(e),this.density=void 0!==t?t:25e-5}function Ei(e,t,n){this.name="",this.color=new In(e),this.near=void 0!==t?t:1,this.far=void 0!==n?n:1e3}function Mi(){dr.call(this),this.type="Scene",this.background=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0}function Ti(e,t,n,r,i){dr.call(this),this.lensFlares=[],this.positionScreen=new kt,this.customUpdateCallback=void 0,void 0!==e&&this.add(e,t,n,r,i)}function Si(e){Zn.call(this),this.type="SpriteMaterial",this.color=new In(16777215),this.map=null,this.rotation=0,this.fog=!1,this.lights=!1,this.setValues(e)}function Ai(e){dr.call(this),this.type="Sprite",this.material=void 0!==e?e:new Si}function Ri(){dr.call(this),this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}})}function Pi(e,t){if(e=e||[],this.bones=e.slice(0),this.boneMatrices=new Float32Array(16*this.bones.length),void 0===t)this.calculateInverses();else if(this.bones.length===t.length)this.boneInverses=t.slice(0);else{console.warn("THREE.Skeleton boneInverses is the wrong length."),this.boneInverses=[];for(var n=0,r=this.bones.length;n<r;n++)this.boneInverses.push(new Dt)}}function Li(){dr.call(this),this.type="Bone"}function Ci(e,t){Kr.call(this,e,t),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Dt,this.bindMatrixInverse=new Dt;var n=new Pi(this.initBones());this.bind(n,this.matrixWorld),this.normalizeSkinWeights()}function Oi(e){Zn.call(this),this.type="LineBasicMaterial",this.color=new In(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.lights=!1,this.setValues(e)}function Ii(e,t,n){if(1===n)return console.warn("THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead."),new Ni(e,t);dr.call(this),this.type="Line",this.geometry=void 0!==e?e:new Fr,this.material=void 0!==t?t:new Oi({color:16777215*Math.random()})}function Ni(e,t){Ii.call(this,e,t),this.type="LineSegments"}function Di(e,t){Ii.call(this,e,t),this.type="LineLoop"}function Ui(e){Zn.call(this),this.type="PointsMaterial",this.color=new In(16777215),this.map=null,this.size=1,this.sizeAttenuation=!0,this.lights=!1,this.setValues(e)}function ki(e,t){dr.call(this),this.type="Points",this.geometry=void 0!==e?e:new Fr,this.material=void 0!==t?t:new Ui({color:16777215*Math.random()})}function Bi(){dr.call(this),this.type="Group"}function Fi(e,t,n,r,i,o,a,s,c){jt.call(this,e,t,n,r,i,o,a,s,c),this.generateMipmaps=!1;var u=this;requestAnimationFrame(function e(){var t=u.image;t.readyState>=t.HAVE_CURRENT_DATA&&(u.needsUpdate=!0),requestAnimationFrame(e)})}function ji(e,t,n,r,i,o,a,s,c,u,l,h){jt.call(this,null,o,a,s,c,u,r,i,l,h),this.image={width:t,height:n},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}function zi(e,t,n,r,i,o,a,s,c,u){if((u=void 0!==u?u:et)!==et&&u!==tt)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===n&&u===et&&(n=Fe),void 0===n&&u===tt&&(n=qe),jt.call(this,null,r,i,o,a,s,u,n,c),this.image={width:e,height:t},this.magFilter=void 0!==a?a:Le,this.minFilter=void 0!==s?s:Le,this.flipY=!1,this.generateMipmaps=!1}function Gi(e){Fr.call(this),this.type="WireframeGeometry";var t,n,r,i,o,a,s,c,u,l,h=[],d=[0,0],p={},f=["a","b","c"];if(e&&e.isGeometry){var m=e.faces;for(t=0,r=m.length;t<r;t++){var v=m[t];for(n=0;n<3;n++)s=v[f[n]],c=v[f[(n+1)%3]],d[0]=Math.min(s,c),d[1]=Math.max(s,c),void 0===p[u=d[0]+","+d[1]]&&(p[u]={index1:d[0],index2:d[1]})}for(u in p)a=p[u],l=e.vertices[a.index1],h.push(l.x,l.y,l.z),l=e.vertices[a.index2],h.push(l.x,l.y,l.z)}else if(e&&e.isBufferGeometry){var g,y,b,x,_,w,E;if(l=new kt,null!==e.index){for(g=e.attributes.position,y=e.index,0===(b=e.groups).length&&(b=[{start:0,count:y.count,materialIndex:0}]),i=0,o=b.length;i<o;++i)for(t=_=(x=b[i]).start,r=_+x.count;t<r;t+=3)for(n=0;n<3;n++)s=y.getX(t+n),c=y.getX(t+(n+1)%3),d[0]=Math.min(s,c),d[1]=Math.max(s,c),void 0===p[u=d[0]+","+d[1]]&&(p[u]={index1:d[0],index2:d[1]});for(u in p)a=p[u],l.fromBufferAttribute(g,a.index1),h.push(l.x,l.y,l.z),l.fromBufferAttribute(g,a.index2),h.push(l.x,l.y,l.z)}else for(t=0,r=(g=e.attributes.position).count/3;t<r;t++)for(n=0;n<3;n++)w=3*t+n,l.fromBufferAttribute(g,w),h.push(l.x,l.y,l.z),E=3*t+(n+1)%3,l.fromBufferAttribute(g,E),h.push(l.x,l.y,l.z)}this.addAttribute("position",new Ar(h,3))}function Vi(e,t,n){yr.call(this),this.type="ParametricGeometry",this.parameters={func:e,slices:t,stacks:n},this.fromBufferGeometry(new Hi(e,t,n)),this.mergeVertices()}function Hi(e,t,n){Fr.call(this),this.type="ParametricBufferGeometry",this.parameters={func:e,slices:t,stacks:n};var r,i,o=[],a=[],s=[],c=[],u=new kt,l=new kt,h=new kt,d=new kt,p=new kt,f=t+1;for(r=0;r<=n;r++){var m=r/n;for(i=0;i<=t;i++){var v=i/t;l=e(v,m,l),a.push(l.x,l.y,l.z),v-1e-5>=0?(h=e(v-1e-5,m,h),d.subVectors(l,h)):(h=e(v+1e-5,m,h),d.subVectors(h,l)),m-1e-5>=0?(h=e(v,m-1e-5,h),p.subVectors(l,h)):(h=e(v,m+1e-5,h),p.subVectors(h,l)),u.crossVectors(d,p).normalize(),s.push(u.x,u.y,u.z),c.push(v,m)}}for(r=0;r<n;r++)for(i=0;i<t;i++){var g=r*f+i,y=r*f+i+1,b=(r+1)*f+i+1,x=(r+1)*f+i;o.push(g,y,x),o.push(y,b,x)}this.setIndex(o),this.addAttribute("position",new Ar(a,3)),this.addAttribute("normal",new Ar(s,3)),this.addAttribute("uv",new Ar(c,2))}function Wi(e,t,n,r){yr.call(this),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:t,radius:n,detail:r},this.fromBufferGeometry(new Xi(e,t,n,r)),this.mergeVertices()}function Xi(e,t,n,r){Fr.call(this),this.type="PolyhedronBufferGeometry",this.parameters={vertices:e,indices:t,radius:n,detail:r},n=n||1;var i=[],o=[];function a(e,t,n,r){var i,o,a=Math.pow(2,r),c=[];for(i=0;i<=a;i++){c[i]=[];var u=e.clone().lerp(n,i/a),l=t.clone().lerp(n,i/a),h=a-i;for(o=0;o<=h;o++)c[i][o]=0===o&&i===a?u:u.clone().lerp(l,o/h)}for(i=0;i<a;i++)for(o=0;o<2*(a-i)-1;o++){var d=Math.floor(o/2);o%2==0?(s(c[i][d+1]),s(c[i+1][d]),s(c[i][d])):(s(c[i][d+1]),s(c[i+1][d+1]),s(c[i+1][d]))}}function s(e){i.push(e.x,e.y,e.z)}function c(t,n){var r=3*t;n.x=e[r+0],n.y=e[r+1],n.z=e[r+2]}function u(e,t,n,r){r<0&&1===e.x&&(o[t]=e.x-1),0===n.x&&0===n.z&&(o[t]=r/2/Math.PI+.5)}function l(e){return Math.atan2(e.z,-e.x)}!function(e){for(var n=new kt,r=new kt,i=new kt,o=0;o<t.length;o+=3)c(t[o+0],n),c(t[o+1],r),c(t[o+2],i),a(n,r,i,e)}(r=r||0),function(e){for(var t=new kt,n=0;n<i.length;n+=3)t.x=i[n+0],t.y=i[n+1],t.z=i[n+2],t.normalize().multiplyScalar(e),i[n+0]=t.x,i[n+1]=t.y,i[n+2]=t.z}(n),function(){for(var e=new kt,t=0;t<i.length;t+=3){e.x=i[t+0],e.y=i[t+1],e.z=i[t+2];var n=l(e)/2/Math.PI+.5,r=(a=e,Math.atan2(-a.y,Math.sqrt(a.x*a.x+a.z*a.z))/Math.PI+.5);o.push(n,1-r)}var a;(function(){for(var e=new kt,t=new kt,n=new kt,r=new kt,a=new Nt,s=new Nt,c=new Nt,h=0,d=0;h<i.length;h+=9,d+=6){e.set(i[h+0],i[h+1],i[h+2]),t.set(i[h+3],i[h+4],i[h+5]),n.set(i[h+6],i[h+7],i[h+8]),a.set(o[d+0],o[d+1]),s.set(o[d+2],o[d+3]),c.set(o[d+4],o[d+5]),r.copy(e).add(t).add(n).divideScalar(3);var p=l(r);u(a,d+0,e,p),u(s,d+2,t,p),u(c,d+4,n,p)}})(),function(){for(var e=0;e<o.length;e+=6){var t=o[e+0],n=o[e+2],r=o[e+4],i=Math.max(t,n,r),a=Math.min(t,n,r);i>.9&&a<.1&&(t<.2&&(o[e+0]+=1),n<.2&&(o[e+2]+=1),r<.2&&(o[e+4]+=1))}}()}(),this.addAttribute("position",new Ar(i,3)),this.addAttribute("normal",new Ar(i.slice(),3)),this.addAttribute("uv",new Ar(o,2)),0===r?this.computeVertexNormals():this.normalizeNormals()}function qi(e,t){yr.call(this),this.type="TetrahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new Yi(e,t)),this.mergeVertices()}function Yi(e,t){Xi.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],e,t),this.type="TetrahedronBufferGeometry",this.parameters={radius:e,detail:t}}function Ki(e,t){yr.call(this),this.type="OctahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new Zi(e,t)),this.mergeVertices()}function Zi(e,t){Xi.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],e,t),this.type="OctahedronBufferGeometry",this.parameters={radius:e,detail:t}}function Qi(e,t){yr.call(this),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new Ji(e,t)),this.mergeVertices()}function Ji(e,t){var n=(1+Math.sqrt(5))/2,r=[-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1];Xi.call(this,r,[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],e,t),this.type="IcosahedronBufferGeometry",this.parameters={radius:e,detail:t}}function $i(e,t){yr.call(this),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new eo(e,t)),this.mergeVertices()}function eo(e,t){var n=(1+Math.sqrt(5))/2,r=1/n,i=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-r,-n,0,-r,n,0,r,-n,0,r,n,-r,-n,0,-r,n,0,r,-n,0,r,n,0,-n,0,-r,n,0,-r,-n,0,r,n,0,r];Xi.call(this,i,[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],e,t),this.type="DodecahedronBufferGeometry",this.parameters={radius:e,detail:t}}function to(e,t,n,r,i,o){yr.call(this),this.type="TubeGeometry",this.parameters={path:e,tubularSegments:t,radius:n,radialSegments:r,closed:i},void 0!==o&&console.warn("THREE.TubeGeometry: taper has been removed.");var a=new no(e,t,n,r,i);this.tangents=a.tangents,this.normals=a.normals,this.binormals=a.binormals,this.fromBufferGeometry(a),this.mergeVertices()}function no(e,t,n,r,i){Fr.call(this),this.type="TubeBufferGeometry",this.parameters={path:e,tubularSegments:t,radius:n,radialSegments:r,closed:i},t=t||64,n=n||1,r=r||8,i=i||!1;var o=e.computeFrenetFrames(t,i);this.tangents=o.tangents,this.normals=o.normals,this.binormals=o.binormals;var a,s,c=new kt,u=new kt,l=new Nt,h=new kt,d=[],p=[],f=[],m=[];function v(i){h=e.getPointAt(i/t,h);var a=o.normals[i],l=o.binormals[i];for(s=0;s<=r;s++){var f=s/r*Math.PI*2,m=Math.sin(f),v=-Math.cos(f);u.x=v*a.x+m*l.x,u.y=v*a.y+m*l.y,u.z=v*a.z+m*l.z,u.normalize(),p.push(u.x,u.y,u.z),c.x=h.x+n*u.x,c.y=h.y+n*u.y,c.z=h.z+n*u.z,d.push(c.x,c.y,c.z)}}!function(){for(a=0;a<t;a++)v(a);v(!1===i?t:0),function(){for(a=0;a<=t;a++)for(s=0;s<=r;s++)l.x=a/t,l.y=s/r,f.push(l.x,l.y)}(),function(){for(s=1;s<=t;s++)for(a=1;a<=r;a++){var e=(r+1)*(s-1)+(a-1),n=(r+1)*s+(a-1),i=(r+1)*s+a,o=(r+1)*(s-1)+a;m.push(e,n,o),m.push(n,i,o)}}()}(),this.setIndex(m),this.addAttribute("position",new Ar(d,3)),this.addAttribute("normal",new Ar(p,3)),this.addAttribute("uv",new Ar(f,2))}function ro(e,t,n,r,i,o,a){yr.call(this),this.type="TorusKnotGeometry",this.parameters={radius:e,tube:t,tubularSegments:n,radialSegments:r,p:i,q:o},void 0!==a&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),this.fromBufferGeometry(new io(e,t,n,r,i,o)),this.mergeVertices()}function io(e,t,n,r,i,o){Fr.call(this),this.type="TorusKnotBufferGeometry",this.parameters={radius:e,tube:t,tubularSegments:n,radialSegments:r,p:i,q:o},e=e||1,t=t||.4,n=Math.floor(n)||64,r=Math.floor(r)||8,i=i||2,o=o||3;var a,s,c=[],u=[],l=[],h=[],d=new kt,p=new kt,f=new kt,m=new kt,v=new kt,g=new kt,y=new kt;for(a=0;a<=n;++a){var b=a/n*i*Math.PI*2;for(A(b,i,o,e,f),A(b+.01,i,o,e,m),g.subVectors(m,f),y.addVectors(m,f),v.crossVectors(g,y),y.crossVectors(v,g),v.normalize(),y.normalize(),s=0;s<=r;++s){var x=s/r*Math.PI*2,_=-t*Math.cos(x),w=t*Math.sin(x);d.x=f.x+(_*y.x+w*v.x),d.y=f.y+(_*y.y+w*v.y),d.z=f.z+(_*y.z+w*v.z),u.push(d.x,d.y,d.z),p.subVectors(d,f).normalize(),l.push(p.x,p.y,p.z),h.push(a/n),h.push(s/r)}}for(s=1;s<=n;s++)for(a=1;a<=r;a++){var E=(r+1)*(s-1)+(a-1),M=(r+1)*s+(a-1),T=(r+1)*s+a,S=(r+1)*(s-1)+a;c.push(E,M,S),c.push(M,T,S)}function A(e,t,n,r,i){var o=Math.cos(e),a=Math.sin(e),s=n/t*e,c=Math.cos(s);i.x=r*(2+c)*.5*o,i.y=r*(2+c)*a*.5,i.z=r*Math.sin(s)*.5}this.setIndex(c),this.addAttribute("position",new Ar(u,3)),this.addAttribute("normal",new Ar(l,3)),this.addAttribute("uv",new Ar(h,2))}function oo(e,t,n,r,i){yr.call(this),this.type="TorusGeometry",this.parameters={radius:e,tube:t,radialSegments:n,tubularSegments:r,arc:i},this.fromBufferGeometry(new ao(e,t,n,r,i)),this.mergeVertices()}function ao(e,t,n,r,i){Fr.call(this),this.type="TorusBufferGeometry",this.parameters={radius:e,tube:t,radialSegments:n,tubularSegments:r,arc:i},e=e||1,t=t||.4,n=Math.floor(n)||8,r=Math.floor(r)||6,i=i||2*Math.PI;var o,a,s=[],c=[],u=[],l=[],h=new kt,d=new kt,p=new kt;for(o=0;o<=n;o++)for(a=0;a<=r;a++){var f=a/r*i,m=o/n*Math.PI*2;d.x=(e+t*Math.cos(m))*Math.cos(f),d.y=(e+t*Math.cos(m))*Math.sin(f),d.z=t*Math.sin(m),c.push(d.x,d.y,d.z),h.x=e*Math.cos(f),h.y=e*Math.sin(f),p.subVectors(d,h).normalize(),u.push(p.x,p.y,p.z),l.push(a/r),l.push(o/n)}for(o=1;o<=n;o++)for(a=1;a<=r;a++){var v=(r+1)*o+a-1,g=(r+1)*(o-1)+a-1,y=(r+1)*(o-1)+a,b=(r+1)*o+a;s.push(v,g,b),s.push(g,y,b)}this.setIndex(s),this.addAttribute("position",new Ar(c,3)),this.addAttribute("normal",new Ar(u,3)),this.addAttribute("uv",new Ar(l,2))}yi.prototype=Object.assign(Object.create(pr.prototype),{constructor:yi,isPerspectiveCamera:!0,copy:function(e,t){return pr.prototype.copy.call(this,e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=null===e.view?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this},setFocalLength:function(e){var t=.5*this.getFilmHeight()/e;this.fov=2*It.RAD2DEG*Math.atan(t),this.updateProjectionMatrix()},getFocalLength:function(){var e=Math.tan(.5*It.DEG2RAD*this.fov);return.5*this.getFilmHeight()/e},getEffectiveFOV:function(){return 2*It.RAD2DEG*Math.atan(Math.tan(.5*It.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(e,t,n,r,i,o){this.aspect=e/t,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=r,this.view.width=i,this.view.height=o,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var e=this.near,t=e*Math.tan(.5*It.DEG2RAD*this.fov)/this.zoom,n=2*t,r=this.aspect*n,i=-.5*r,o=this.view;if(null!==this.view&&this.view.enabled){var a=o.fullWidth,s=o.fullHeight;i+=o.offsetX*r/a,t-=o.offsetY*n/s,r*=o.width/a,n*=o.height/s}var c=this.filmOffset;0!==c&&(i+=e*c/this.getFilmWidth()),this.projectionMatrix.makePerspective(i,i+r,t,t-n,e,this.far)},toJSON:function(e){var t=dr.prototype.toJSON.call(this,e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,null!==this.view&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}),bi.prototype=Object.assign(Object.create(yi.prototype),{constructor:bi,isArrayCamera:!0}),wi.prototype.isFogExp2=!0,wi.prototype.clone=function(){return new wi(this.color.getHex(),this.density)},wi.prototype.toJSON=function(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}},Ei.prototype.isFog=!0,Ei.prototype.clone=function(){return new Ei(this.color.getHex(),this.near,this.far)},Ei.prototype.toJSON=function(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}},Mi.prototype=Object.assign(Object.create(dr.prototype),{constructor:Mi,copy:function(e,t){return dr.prototype.copy.call(this,e,t),null!==e.background&&(this.background=e.background.clone()),null!==e.fog&&(this.fog=e.fog.clone()),null!==e.overrideMaterial&&(this.overrideMaterial=e.overrideMaterial.clone()),this.autoUpdate=e.autoUpdate,this.matrixAutoUpdate=e.matrixAutoUpdate,this},toJSON:function(e){var t=dr.prototype.toJSON.call(this,e);return null!==this.background&&(t.object.background=this.background.toJSON(e)),null!==this.fog&&(t.object.fog=this.fog.toJSON()),t}}),Ti.prototype=Object.assign(Object.create(dr.prototype),{constructor:Ti,isLensFlare:!0,copy:function(e){dr.prototype.copy.call(this,e),this.positionScreen.copy(e.positionScreen),this.customUpdateCallback=e.customUpdateCallback;for(var t=0,n=e.lensFlares.length;t<n;t++)this.lensFlares.push(e.lensFlares[t]);return this},add:function(e,t,n,r,i,o){void 0===t&&(t=-1),void 0===n&&(n=0),void 0===o&&(o=1),void 0===i&&(i=new In(16777215)),void 0===r&&(r=U),n=Math.min(n,Math.max(0,n)),this.lensFlares.push({texture:e,size:t,distance:n,x:0,y:0,z:0,scale:1,rotation:0,opacity:o,color:i,blending:r})},updateLensFlares:function(){var e,t,n=this.lensFlares.length,r=2*-this.positionScreen.x,i=2*-this.positionScreen.y;for(e=0;e<n;e++)(t=this.lensFlares[e]).x=this.positionScreen.x+r*t.distance,t.y=this.positionScreen.y+i*t.distance,t.wantedRotation=t.x*Math.PI*.25,t.rotation+=.25*(t.wantedRotation-t.rotation)}}),Si.prototype=Object.create(Zn.prototype),Si.prototype.constructor=Si,Si.prototype.isSpriteMaterial=!0,Si.prototype.copy=function(e){return Zn.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.rotation=e.rotation,this},Ai.prototype=Object.assign(Object.create(dr.prototype),{constructor:Ai,isSprite:!0,raycast:(ni=new kt,ri=new kt,ii=new kt,function(e,t){ri.setFromMatrixPosition(this.matrixWorld),e.ray.closestPointToPoint(ri,ni),ii.setFromMatrixScale(this.matrixWorld);var n=ii.x*ii.y/4;if(!(ri.distanceToSquared(ni)>n)){var r=e.ray.origin.distanceTo(ni);r<e.near||r>e.far||t.push({distance:r,point:ni.clone(),face:null,object:this})}}),clone:function(){return new this.constructor(this.material).copy(this)}}),Ri.prototype=Object.assign(Object.create(dr.prototype),{constructor:Ri,copy:function(e){dr.prototype.copy.call(this,e,!1);for(var t=e.levels,n=0,r=t.length;n<r;n++){var i=t[n];this.addLevel(i.object.clone(),i.distance)}return this},addLevel:function(e,t){void 0===t&&(t=0),t=Math.abs(t);for(var n=this.levels,r=0;r<n.length&&!(t<n[r].distance);r++);n.splice(r,0,{distance:t,object:e}),this.add(e)},getObjectForDistance:function(e){for(var t=this.levels,n=1,r=t.length;n<r&&!(e<t[n].distance);n++);return t[n-1].object},raycast:(oi=new kt,function(e,t){oi.setFromMatrixPosition(this.matrixWorld);var n=e.ray.origin.distanceTo(oi);this.getObjectForDistance(n).raycast(e,t)}),update:function(){var e=new kt,t=new kt;return function(n){var r=this.levels;if(r.length>1){e.setFromMatrixPosition(n.matrixWorld),t.setFromMatrixPosition(this.matrixWorld);var i=e.distanceTo(t);r[0].object.visible=!0;for(var o=1,a=r.length;o<a&&i>=r[o].distance;o++)r[o-1].object.visible=!1,r[o].object.visible=!0;for(;o<a;o++)r[o].object.visible=!1}}}(),toJSON:function(e){var t=dr.prototype.toJSON.call(this,e);t.object.levels=[];for(var n=this.levels,r=0,i=n.length;r<i;r++){var o=n[r];t.object.levels.push({object:o.object.uuid,distance:o.distance})}return t}}),Object.assign(Pi.prototype,{calculateInverses:function(){this.boneInverses=[];for(var e=0,t=this.bones.length;e<t;e++){var n=new Dt;this.bones[e]&&n.getInverse(this.bones[e].matrixWorld),this.boneInverses.push(n)}},pose:function(){var e,t,n;for(t=0,n=this.bones.length;t<n;t++)(e=this.bones[t])&&e.matrixWorld.getInverse(this.boneInverses[t]);for(t=0,n=this.bones.length;t<n;t++)(e=this.bones[t])&&(e.parent&&e.parent.isBone?(e.matrix.getInverse(e.parent.matrixWorld),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))},update:(ai=new Dt,si=new Dt,function(){for(var e=this.bones,t=this.boneInverses,n=this.boneMatrices,r=this.boneTexture,i=0,o=e.length;i<o;i++){var a=e[i]?e[i].matrixWorld:si;ai.multiplyMatrices(a,t[i]),ai.toArray(n,16*i)}void 0!==r&&(r.needsUpdate=!0)}),clone:function(){return new Pi(this.bones,this.boneInverses)}}),Li.prototype=Object.assign(Object.create(dr.prototype),{constructor:Li,isBone:!0}),Ci.prototype=Object.assign(Object.create(Kr.prototype),{constructor:Ci,isSkinnedMesh:!0,initBones:function(){var e,t,n,r,i=[];if(this.geometry&&void 0!==this.geometry.bones){for(n=0,r=this.geometry.bones.length;n<r;n++)t=this.geometry.bones[n],e=new Li,i.push(e),e.name=t.name,e.position.fromArray(t.pos),e.quaternion.fromArray(t.rotq),void 0!==t.scl&&e.scale.fromArray(t.scl);for(n=0,r=this.geometry.bones.length;n<r;n++)-1!==(t=this.geometry.bones[n]).parent&&null!==t.parent&&void 0!==i[t.parent]?i[t.parent].add(i[n]):this.add(i[n])}return this.updateMatrixWorld(!0),i},bind:function(e,t){this.skeleton=e,void 0===t&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.getInverse(t)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){var e,t;if(this.geometry&&this.geometry.isGeometry)for(t=0;t<this.geometry.skinWeights.length;t++){var n=this.geometry.skinWeights[t];(e=1/n.manhattanLength())!==1/0?n.multiplyScalar(e):n.set(1,0,0,0)}else if(this.geometry&&this.geometry.isBufferGeometry){var r=new zt,i=this.geometry.attributes.skinWeight;for(t=0;t<i.count;t++)r.x=i.getX(t),r.y=i.getY(t),r.z=i.getZ(t),r.w=i.getW(t),(e=1/r.manhattanLength())!==1/0?r.multiplyScalar(e):r.set(1,0,0,0),i.setXYZW(t,r.x,r.y,r.z,r.w)}},updateMatrixWorld:function(e){Kr.prototype.updateMatrixWorld.call(this,e),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Oi.prototype=Object.create(Zn.prototype),Oi.prototype.constructor=Oi,Oi.prototype.isLineBasicMaterial=!0,Oi.prototype.copy=function(e){return Zn.prototype.copy.call(this,e),this.color.copy(e.color),this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this},Ii.prototype=Object.assign(Object.create(dr.prototype),{constructor:Ii,isLine:!0,raycast:function(){var e=new Dt,t=new Xr,n=new er;return function(r,i){var o=r.linePrecision,a=o*o,s=this.geometry,c=this.matrixWorld;if(null===s.boundingSphere&&s.computeBoundingSphere(),n.copy(s.boundingSphere),n.applyMatrix4(c),!1!==r.ray.intersectsSphere(n)){e.getInverse(c),t.copy(r.ray).applyMatrix4(e);var u=new kt,l=new kt,h=new kt,d=new kt,p=this&&this.isLineSegments?2:1;if(s.isBufferGeometry){var f=s.index,m=s.attributes.position.array;if(null!==f)for(var v=f.array,g=0,y=v.length-1;g<y;g+=p){var b=v[g],x=v[g+1];if(u.fromArray(m,3*b),l.fromArray(m,3*x),!(t.distanceSqToSegment(u,l,d,h)>a))d.applyMatrix4(this.matrixWorld),(E=r.ray.origin.distanceTo(d))<r.near||E>r.far||i.push({distance:E,point:h.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this})}else for(g=0,y=m.length/3-1;g<y;g+=p){if(u.fromArray(m,3*g),l.fromArray(m,3*g+3),!(t.distanceSqToSegment(u,l,d,h)>a))d.applyMatrix4(this.matrixWorld),(E=r.ray.origin.distanceTo(d))<r.near||E>r.far||i.push({distance:E,point:h.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this})}}else if(s.isGeometry){var _=s.vertices,w=_.length;for(g=0;g<w-1;g+=p){var E;if(!(t.distanceSqToSegment(_[g],_[g+1],d,h)>a))d.applyMatrix4(this.matrixWorld),(E=r.ray.origin.distanceTo(d))<r.near||E>r.far||i.push({distance:E,point:h.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this})}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Ni.prototype=Object.assign(Object.create(Ii.prototype),{constructor:Ni,isLineSegments:!0}),Di.prototype=Object.assign(Object.create(Ii.prototype),{constructor:Di,isLineLoop:!0}),Ui.prototype=Object.create(Zn.prototype),Ui.prototype.constructor=Ui,Ui.prototype.isPointsMaterial=!0,Ui.prototype.copy=function(e){return Zn.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this},ki.prototype=Object.assign(Object.create(dr.prototype),{constructor:ki,isPoints:!0,raycast:function(){var e=new Dt,t=new Xr,n=new er;return function(r,i){var o=this,a=this.geometry,s=this.matrixWorld,c=r.params.Points.threshold;if(null===a.boundingSphere&&a.computeBoundingSphere(),n.copy(a.boundingSphere),n.applyMatrix4(s),n.radius+=c,!1!==r.ray.intersectsSphere(n)){e.getInverse(s),t.copy(r.ray).applyMatrix4(e);var u=c/((this.scale.x+this.scale.y+this.scale.z)/3),l=u*u,h=new kt;if(a.isBufferGeometry){var d=a.index,p=a.attributes.position.array;if(null!==d)for(var f=d.array,m=0,v=f.length;m<v;m++){var g=f[m];h.fromArray(p,3*g),x(h,g)}else{m=0;for(var y=p.length/3;m<y;m++)h.fromArray(p,3*m),x(h,m)}}else{var b=a.vertices;for(m=0,y=b.length;m<y;m++)x(b[m],m)}}function x(e,n){var a=t.distanceSqToPoint(e);if(a<l){var c=t.closestPointToPoint(e);c.applyMatrix4(s);var u=r.ray.origin.distanceTo(c);if(u<r.near||u>r.far)return;i.push({distance:u,distanceToRay:Math.sqrt(a),point:c.clone(),index:n,face:null,object:o})}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Bi.prototype=Object.assign(Object.create(dr.prototype),{constructor:Bi}),Fi.prototype=Object.create(jt.prototype),Fi.prototype.constructor=Fi,ji.prototype=Object.create(jt.prototype),ji.prototype.constructor=ji,ji.prototype.isCompressedTexture=!0,zi.prototype=Object.create(jt.prototype),zi.prototype.constructor=zi,zi.prototype.isDepthTexture=!0,Gi.prototype=Object.create(Fr.prototype),Gi.prototype.constructor=Gi,Vi.prototype=Object.create(yr.prototype),Vi.prototype.constructor=Vi,Hi.prototype=Object.create(Fr.prototype),Hi.prototype.constructor=Hi,Wi.prototype=Object.create(yr.prototype),Wi.prototype.constructor=Wi,Xi.prototype=Object.create(Fr.prototype),Xi.prototype.constructor=Xi,qi.prototype=Object.create(yr.prototype),qi.prototype.constructor=qi,Yi.prototype=Object.create(Xi.prototype),Yi.prototype.constructor=Yi,Ki.prototype=Object.create(yr.prototype),Ki.prototype.constructor=Ki,Zi.prototype=Object.create(Xi.prototype),Zi.prototype.constructor=Zi,Qi.prototype=Object.create(yr.prototype),Qi.prototype.constructor=Qi,Ji.prototype=Object.create(Xi.prototype),Ji.prototype.constructor=Ji,$i.prototype=Object.create(yr.prototype),$i.prototype.constructor=$i,eo.prototype=Object.create(Xi.prototype),eo.prototype.constructor=eo,to.prototype=Object.create(yr.prototype),to.prototype.constructor=to,no.prototype=Object.create(Fr.prototype),no.prototype.constructor=no,ro.prototype=Object.create(yr.prototype),ro.prototype.constructor=ro,io.prototype=Object.create(Fr.prototype),io.prototype.constructor=io,oo.prototype=Object.create(yr.prototype),oo.prototype.constructor=oo,ao.prototype=Object.create(Fr.prototype),ao.prototype.constructor=ao;var so={area:function(e){for(var t=e.length,n=0,r=t-1,i=0;i<t;r=i++)n+=e[r].x*e[i].y-e[i].x*e[r].y;return.5*n},triangulate:function(){function e(e,t,n,r,i,o){var a,s,c,u,l,h,d,p,f,m,v,g,y,b,x,_,w;if(s=e[o[t]].x,c=e[o[t]].y,u=e[o[n]].x,l=e[o[n]].y,h=e[o[r]].x,(u-s)*((d=e[o[r]].y)-c)-(l-c)*(h-s)<=0)return!1;for(m=h-u,v=d-l,g=s-h,y=c-d,b=u-s,x=l-c,a=0;a<i;a++)if(p=e[o[a]].x,f=e[o[a]].y,!(p===s&&f===c||p===u&&f===l||p===h&&f===d)&&(_=b*(f-c)-x*(p-s),w=g*(f-d)-y*(p-h),m*(f-l)-v*(p-u)>=-Number.EPSILON&&w>=-Number.EPSILON&&_>=-Number.EPSILON))return!1;return!0}return function(t,n){var r=t.length;if(r<3)return null;var i,o,a,s=[],c=[],u=[];if(so.area(t)>0)for(o=0;o<r;o++)c[o]=o;else for(o=0;o<r;o++)c[o]=r-1-o;var l=r,h=2*l;for(o=l-1;l>2;){if(h--<=0)return console.warn("THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()"),n?u:s;if(l<=(i=o)&&(i=0),l<=(o=i+1)&&(o=0),l<=(a=o+1)&&(a=0),e(t,i,o,a,l,c)){var d,p,f,m,v;for(d=c[i],p=c[o],f=c[a],s.push([t[d],t[p],t[f]]),u.push([c[i],c[o],c[a]]),m=o,v=o+1;v<l;m++,v++)c[m]=c[v];h=2*--l}}return n?u:s}}(),triangulateShape:function(e,t){function n(e){var t=e.length;t>2&&e[t-1].equals(e[0])&&e.pop()}function r(e,t,n){return e.x!==t.x?e.x<t.x?e.x<=n.x&&n.x<=t.x:t.x<=n.x&&n.x<=e.x:e.y<t.y?e.y<=n.y&&n.y<=t.y:t.y<=n.y&&n.y<=e.y}function i(e,t,n,i,o){var a=t.x-e.x,s=t.y-e.y,c=i.x-n.x,u=i.y-n.y,l=e.x-n.x,h=e.y-n.y,d=s*c-a*u,p=s*l-a*h;if(Math.abs(d)>Number.EPSILON){var f;if(d>0){if(p<0||p>d)return[];if((f=u*l-c*h)<0||f>d)return[]}else{if(p>0||p<d)return[];if((f=u*l-c*h)>0||f<d)return[]}if(0===f)return!o||0!==p&&p!==d?[e]:[];if(f===d)return!o||0!==p&&p!==d?[t]:[];if(0===p)return[n];if(p===d)return[i];var m=f/d;return[{x:e.x+m*a,y:e.y+m*s}]}if(0!==p||u*l!=c*h)return[];var v,g,y,b,x,_,w,E,M=0===a&&0===s,T=0===c&&0===u;return M&&T?e.x!==n.x||e.y!==n.y?[]:[e]:M?r(n,i,e)?[e]:[]:T?r(e,t,n)?[n]:[]:(0!==a?(e.x<t.x?(v=e,y=e.x,g=t,b=t.x):(v=t,y=t.x,g=e,b=e.x),n.x<i.x?(x=n,w=n.x,_=i,E=i.x):(x=i,w=i.x,_=n,E=n.x)):(e.y<t.y?(v=e,y=e.y,g=t,b=t.y):(v=t,y=t.y,g=e,b=e.y),n.y<i.y?(x=n,w=n.y,_=i,E=i.y):(x=i,w=i.y,_=n,E=n.y)),y<=w?b<w?[]:b===w?o?[]:[x]:b<=E?[x,g]:[x,_]:y>E?[]:y===E?o?[]:[v]:b<=E?[v,g]:[v,_])}function o(e,t,n,r){var i=t.x-e.x,o=t.y-e.y,a=n.x-e.x,s=n.y-e.y,c=r.x-e.x,u=r.y-e.y,l=i*s-o*a,h=i*u-o*c;if(Math.abs(l)>Number.EPSILON){var d=c*s-u*a;return l>0?h>=0&&d>=0:h>=0||d>=0}return h>0}n(e),t.forEach(n);for(var a,s,c,u,l,h,d={},p=e.concat(),f=0,m=t.length;f<m;f++)Array.prototype.push.apply(p,t[f]);for(a=0,s=p.length;a<s;a++)void 0!==d[l=p[a].x+":"+p[a].y]&&console.warn("THREE.ShapeUtils: Duplicate point",l,a),d[l]=a;var v=function(e,t){var n,r=e.concat();function a(e,t){var i=r.length-1,a=e-1;a<0&&(a=i);var s=e+1;s>i&&(s=0);var c=o(r[e],r[a],r[s],n[t]);if(!c)return!1;var u=n.length-1,l=t-1;l<0&&(l=u);var h=t+1;return h>u&&(h=0),!!(c=o(n[t],n[l],n[h],r[e]))}function s(e,t){var n,o;for(n=0;n<r.length;n++)if(o=n+1,o%=r.length,i(e,t,r[n],r[o],!0).length>0)return!0;return!1}var c=[];function u(e,n){var r,o,a,s;for(r=0;r<c.length;r++)for(o=t[c[r]],a=0;a<o.length;a++)if(s=a+1,s%=o.length,i(e,n,o[a],o[s],!0).length>0)return!0;return!1}for(var l,h,d,p,f,m,v,g,y,b,x=[],_=0,w=t.length;_<w;_++)c.push(_);for(var E=0,M=2*c.length;c.length>0;){if(--M<0){console.log('THREE.ShapeUtils: Infinite Loop! Holes left:" + indepHoles.length + ", Probably Hole outside Shape!');break}for(h=E;h<r.length;h++){for(d=r[h],l=-1,_=0;_<c.length;_++)if(f=c[_],void 0===x[m=d.x+":"+d.y+":"+f]){n=t[f];for(var T=0;T<n.length;T++)if(p=n[T],a(h,T)&&!s(d,p)&&!u(d,p)){l=T,c.splice(_,1),v=r.slice(0,h+1),g=r.slice(h),y=n.slice(l),b=n.slice(0,l+1),r=v.concat(y).concat(b).concat(g),E=h;break}if(l>=0)break;x[m]=!0}if(l>=0)break}}return r}(e,t),g=so.triangulate(v,!1);for(a=0,s=g.length;a<s;a++)for(u=g[a],c=0;c<3;c++)void 0!==(h=d[l=u[c].x+":"+u[c].y])&&(u[c]=h);return g.concat()},isClockWise:function(e){return so.area(e)<0}};function co(e,t){yr.call(this),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:t},this.fromBufferGeometry(new uo(e,t)),this.mergeVertices()}function uo(e,t){void 0!==e&&(Fr.call(this),this.type="ExtrudeBufferGeometry",e=Array.isArray(e)?e:[e],this.addShapeList(e,t),this.computeVertexNormals())}function lo(e,t){yr.call(this),this.type="TextGeometry",this.parameters={text:e,parameters:t},this.fromBufferGeometry(new ho(e,t)),this.mergeVertices()}function ho(e,t){var n=(t=t||{}).font;if(!n||!n.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new yr;var r=n.generateShapes(e,t.size,t.curveSegments);t.amount=void 0!==t.height?t.height:50,void 0===t.bevelThickness&&(t.bevelThickness=10),void 0===t.bevelSize&&(t.bevelSize=8),void 0===t.bevelEnabled&&(t.bevelEnabled=!1),uo.call(this,r,t),this.type="TextBufferGeometry"}function po(e,t,n,r,i,o,a){yr.call(this),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:r,phiLength:i,thetaStart:o,thetaLength:a},this.fromBufferGeometry(new fo(e,t,n,r,i,o,a)),this.mergeVertices()}function fo(e,t,n,r,i,o,a){Fr.call(this),this.type="SphereBufferGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:r,phiLength:i,thetaStart:o,thetaLength:a},e=e||1,t=Math.max(3,Math.floor(t)||8),n=Math.max(2,Math.floor(n)||6),r=void 0!==r?r:0,i=void 0!==i?i:2*Math.PI;var s,c,u=(o=void 0!==o?o:0)+(a=void 0!==a?a:Math.PI),l=0,h=[],d=new kt,p=new kt,f=[],m=[],v=[],g=[];for(c=0;c<=n;c++){var y=[],b=c/n;for(s=0;s<=t;s++){var x=s/t;d.x=-e*Math.cos(r+x*i)*Math.sin(o+b*a),d.y=e*Math.cos(o+b*a),d.z=e*Math.sin(r+x*i)*Math.sin(o+b*a),m.push(d.x,d.y,d.z),p.set(d.x,d.y,d.z).normalize(),v.push(p.x,p.y,p.z),g.push(x,1-b),y.push(l++)}h.push(y)}for(c=0;c<n;c++)for(s=0;s<t;s++){var _=h[c][s+1],w=h[c][s],E=h[c+1][s],M=h[c+1][s+1];(0!==c||o>0)&&f.push(_,w,M),(c!==n-1||u<Math.PI)&&f.push(w,E,M)}this.setIndex(f),this.addAttribute("position",new Ar(m,3)),this.addAttribute("normal",new Ar(v,3)),this.addAttribute("uv",new Ar(g,2))}function mo(e,t,n,r,i,o){yr.call(this),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:n,phiSegments:r,thetaStart:i,thetaLength:o},this.fromBufferGeometry(new vo(e,t,n,r,i,o)),this.mergeVertices()}function vo(e,t,n,r,i,o){Fr.call(this),this.type="RingBufferGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:n,phiSegments:r,thetaStart:i,thetaLength:o},e=e||.5,t=t||1,i=void 0!==i?i:0,o=void 0!==o?o:2*Math.PI,n=void 0!==n?Math.max(3,n):8;var a,s,c,u=[],l=[],h=[],d=[],p=e,f=(t-e)/(r=void 0!==r?Math.max(1,r):1),m=new kt,v=new Nt;for(s=0;s<=r;s++){for(c=0;c<=n;c++)a=i+c/n*o,m.x=p*Math.cos(a),m.y=p*Math.sin(a),l.push(m.x,m.y,m.z),h.push(0,0,1),v.x=(m.x/t+1)/2,v.y=(m.y/t+1)/2,d.push(v.x,v.y);p+=f}for(s=0;s<r;s++){var g=s*(n+1);for(c=0;c<n;c++){var y=a=c+g,b=a+n+1,x=a+n+2,_=a+1;u.push(y,b,_),u.push(b,x,_)}}this.setIndex(u),this.addAttribute("position",new Ar(l,3)),this.addAttribute("normal",new Ar(h,3)),this.addAttribute("uv",new Ar(d,2))}function go(e,t,n,r){yr.call(this),this.type="LatheGeometry",this.parameters={points:e,segments:t,phiStart:n,phiLength:r},this.fromBufferGeometry(new yo(e,t,n,r)),this.mergeVertices()}function yo(e,t,n,r){Fr.call(this),this.type="LatheBufferGeometry",this.parameters={points:e,segments:t,phiStart:n,phiLength:r},t=Math.floor(t)||12,n=n||0,r=r||2*Math.PI,r=It.clamp(r,0,2*Math.PI);var i,o,a,s=[],c=[],u=[],l=1/t,h=new kt,d=new Nt;for(o=0;o<=t;o++){var p=n+o*l*r,f=Math.sin(p),m=Math.cos(p);for(a=0;a<=e.length-1;a++)h.x=e[a].x*f,h.y=e[a].y,h.z=e[a].x*m,c.push(h.x,h.y,h.z),d.x=o/t,d.y=a/(e.length-1),u.push(d.x,d.y)}for(o=0;o<t;o++)for(a=0;a<e.length-1;a++){var v=i=a+o*e.length,g=i+e.length,y=i+e.length+1,b=i+1;s.push(v,g,b),s.push(g,y,b)}if(this.setIndex(s),this.addAttribute("position",new Ar(c,3)),this.addAttribute("uv",new Ar(u,2)),this.computeVertexNormals(),r===2*Math.PI){var x=this.attributes.normal.array,_=new kt,w=new kt,E=new kt;for(i=t*e.length*3,o=0,a=0;o<e.length;o++,a+=3)_.x=x[a+0],_.y=x[a+1],_.z=x[a+2],w.x=x[i+a+0],w.y=x[i+a+1],w.z=x[i+a+2],E.addVectors(_,w).normalize(),x[a+0]=x[i+a+0]=E.x,x[a+1]=x[i+a+1]=E.y,x[a+2]=x[i+a+2]=E.z}}function bo(e,t){yr.call(this),this.type="ShapeGeometry","object"==typeof t&&(console.warn("THREE.ShapeGeometry: Options parameter has been removed."),t=t.curveSegments),this.parameters={shapes:e,curveSegments:t},this.fromBufferGeometry(new xo(e,t)),this.mergeVertices()}function xo(e,t){Fr.call(this),this.type="ShapeBufferGeometry",this.parameters={shapes:e,curveSegments:t},t=t||12;var n=[],r=[],i=[],o=[],a=0,s=0;if(!1===Array.isArray(e))u(e);else for(var c=0;c<e.length;c++)u(e[c]),this.addGroup(a,s,c),a+=s,s=0;function u(e){var a,c,u,l=r.length/3,h=e.extractPoints(t),d=h.shape,p=h.holes;if(!1===so.isClockWise(d))for(d=d.reverse(),a=0,c=p.length;a<c;a++)u=p[a],!0===so.isClockWise(u)&&(p[a]=u.reverse());var f=so.triangulateShape(d,p);for(a=0,c=p.length;a<c;a++)u=p[a],d=d.concat(u);for(a=0,c=d.length;a<c;a++){var m=d[a];r.push(m.x,m.y,0),i.push(0,0,1),o.push(m.x,m.y)}for(a=0,c=f.length;a<c;a++){var v=f[a],g=v[0]+l,y=v[1]+l,b=v[2]+l;n.push(g,y,b),s+=3}}this.setIndex(n),this.addAttribute("position",new Ar(r,3)),this.addAttribute("normal",new Ar(i,3)),this.addAttribute("uv",new Ar(o,2))}function _o(e,t){Fr.call(this),this.type="EdgesGeometry",this.parameters={thresholdAngle:t},t=void 0!==t?t:1;var n,r,i,o,a=[],s=Math.cos(It.DEG2RAD*t),c=[0,0],u={},l=["a","b","c"];e.isBufferGeometry?(o=new yr).fromBufferGeometry(e):o=e.clone(),o.mergeVertices(),o.computeFaceNormals();for(var h=o.vertices,d=o.faces,p=0,f=d.length;p<f;p++)for(var m=d[p],v=0;v<3;v++)n=m[l[v]],r=m[l[(v+1)%3]],c[0]=Math.min(n,r),c[1]=Math.max(n,r),void 0===u[i=c[0]+","+c[1]]?u[i]={index1:c[0],index2:c[1],face1:p,face2:void 0}:u[i].face2=p;for(i in u){var g=u[i];if(void 0===g.face2||d[g.face1].normal.dot(d[g.face2].normal)<=s){var y=h[g.index1];a.push(y.x,y.y,y.z),y=h[g.index2],a.push(y.x,y.y,y.z)}}this.addAttribute("position",new Ar(a,3))}function wo(e,t,n,r,i,o,a,s){yr.call(this),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:r,heightSegments:i,openEnded:o,thetaStart:a,thetaLength:s},this.fromBufferGeometry(new Eo(e,t,n,r,i,o,a,s)),this.mergeVertices()}function Eo(e,t,n,r,i,o,a,s){Fr.call(this),this.type="CylinderBufferGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:r,heightSegments:i,openEnded:o,thetaStart:a,thetaLength:s};var c=this;e=void 0!==e?e:1,t=void 0!==t?t:1,n=n||1,r=Math.floor(r)||8,i=Math.floor(i)||1,o=void 0!==o&&o,a=void 0!==a?a:0,s=void 0!==s?s:2*Math.PI;var u=[],l=[],h=[],d=[],p=0,f=[],m=n/2,v=0;function g(n){var i,o,f,g=new Nt,y=new kt,b=0,x=!0===n?e:t,_=!0===n?1:-1;for(o=p,i=1;i<=r;i++)l.push(0,m*_,0),h.push(0,_,0),d.push(.5,.5),p++;for(f=p,i=0;i<=r;i++){var w=i/r*s+a,E=Math.cos(w),M=Math.sin(w);y.x=x*M,y.y=m*_,y.z=x*E,l.push(y.x,y.y,y.z),h.push(0,_,0),g.x=.5*E+.5,g.y=.5*M*_+.5,d.push(g.x,g.y),p++}for(i=0;i<r;i++){var T=o+i,S=f+i;!0===n?u.push(S,S+1,T):u.push(S+1,S,T),b+=3}c.addGroup(v,b,!0===n?1:2),v+=b}!function(){var o,g,y=new kt,b=new kt,x=0,_=(t-e)/n;for(g=0;g<=i;g++){var w=[],E=g/i,M=E*(t-e)+e;for(o=0;o<=r;o++){var T=o/r,S=T*s+a,A=Math.sin(S),R=Math.cos(S);b.x=M*A,b.y=-E*n+m,b.z=M*R,l.push(b.x,b.y,b.z),y.set(A,_,R).normalize(),h.push(y.x,y.y,y.z),d.push(T,1-E),w.push(p++)}f.push(w)}for(o=0;o<r;o++)for(g=0;g<i;g++){var P=f[g][o],L=f[g+1][o],C=f[g+1][o+1],O=f[g][o+1];u.push(P,L,O),u.push(L,C,O),x+=6}c.addGroup(v,x,0),v+=x}(),!1===o&&(e>0&&g(!0),t>0&&g(!1)),this.setIndex(u),this.addAttribute("position",new Ar(l,3)),this.addAttribute("normal",new Ar(h,3)),this.addAttribute("uv",new Ar(d,2))}function Mo(e,t,n,r,i,o,a){wo.call(this,0,e,t,n,r,i,o,a),this.type="ConeGeometry",this.parameters={radius:e,height:t,radialSegments:n,heightSegments:r,openEnded:i,thetaStart:o,thetaLength:a}}function To(e,t,n,r,i,o,a){Eo.call(this,0,e,t,n,r,i,o,a),this.type="ConeBufferGeometry",this.parameters={radius:e,height:t,radialSegments:n,heightSegments:r,openEnded:i,thetaStart:o,thetaLength:a}}function So(e,t,n,r){yr.call(this),this.type="CircleGeometry",this.parameters={radius:e,segments:t,thetaStart:n,thetaLength:r},this.fromBufferGeometry(new Ao(e,t,n,r)),this.mergeVertices()}function Ao(e,t,n,r){Fr.call(this),this.type="CircleBufferGeometry",this.parameters={radius:e,segments:t,thetaStart:n,thetaLength:r},e=e||1,t=void 0!==t?Math.max(3,t):8,n=void 0!==n?n:0,r=void 0!==r?r:2*Math.PI;var i,o,a=[],s=[],c=[],u=[],l=new kt,h=new Nt;for(s.push(0,0,0),c.push(0,0,1),u.push(.5,.5),o=0,i=3;o<=t;o++,i+=3){var d=n+o/t*r;l.x=e*Math.cos(d),l.y=e*Math.sin(d),s.push(l.x,l.y,l.z),c.push(0,0,1),h.x=(s[i]/e+1)/2,h.y=(s[i+1]/e+1)/2,u.push(h.x,h.y)}for(i=1;i<=t;i++)a.push(i,i+1,0);this.setIndex(a),this.addAttribute("position",new Ar(s,3)),this.addAttribute("normal",new Ar(c,3)),this.addAttribute("uv",new Ar(u,2))}co.prototype=Object.create(yr.prototype),co.prototype.constructor=co,uo.prototype=Object.create(Fr.prototype),uo.prototype.constructor=uo,uo.prototype.getArrays=function(){var e=this.getAttribute("position"),t=e?Array.prototype.slice.call(e.array):[],n=this.getAttribute("uv"),r=n?Array.prototype.slice.call(n.array):[],i=this.index;return{position:t,uv:r,index:i?Array.prototype.slice.call(i.array):[]}},uo.prototype.addShapeList=function(e,t){var n=e.length;t.arrays=this.getArrays();for(var r=0;r<n;r++){var i=e[r];this.addShape(i,t)}this.setIndex(t.arrays.index),this.addAttribute("position",new Ar(t.arrays.position,3)),this.addAttribute("uv",new Ar(t.arrays.uv,2))},uo.prototype.addShape=function(e,t){var n,r,i,o,a,s,c,u,l=t.arrays?t.arrays:this.getArrays(),h=l.position,d=l.index,p=l.uv,f=[],m=void 0!==t.amount?t.amount:100,v=void 0!==t.bevelThickness?t.bevelThickness:6,g=void 0!==t.bevelSize?t.bevelSize:v-2,y=void 0!==t.bevelSegments?t.bevelSegments:3,b=void 0===t.bevelEnabled||t.bevelEnabled,x=void 0!==t.curveSegments?t.curveSegments:12,_=void 0!==t.steps?t.steps:1,w=t.extrudePath,E=!1,M=void 0!==t.UVGenerator?t.UVGenerator:co.WorldUVGenerator;w&&(n=w.getSpacedPoints(_),E=!0,b=!1,r=void 0!==t.frames?t.frames:w.computeFrenetFrames(_,!1),i=new kt,o=new kt,a=new kt),b||(y=0,v=0,g=0);var T=this,S=e.extractPoints(x),A=S.shape,R=S.holes;if(!so.isClockWise(A))for(A=A.reverse(),c=0,u=R.length;c<u;c++)s=R[c],so.isClockWise(s)&&(R[c]=s.reverse());var P=so.triangulateShape(A,R),L=A;for(c=0,u=R.length;c<u;c++)s=R[c],A=A.concat(s);function C(e,t,n){return t||console.error("THREE.ExtrudeGeometry: vec does not exist"),t.clone().multiplyScalar(n).add(e)}var O,I,N,D,U,k,B=A.length,F=P.length;function j(e,t,n){var r,i,o,a=e.x-t.x,s=e.y-t.y,c=n.x-e.x,u=n.y-e.y,l=a*a+s*s,h=a*u-s*c;if(Math.abs(h)>Number.EPSILON){var d=Math.sqrt(l),p=Math.sqrt(c*c+u*u),f=t.x-s/d,m=t.y+a/d,v=((n.x-u/p-f)*u-(n.y+c/p-m)*c)/(a*u-s*c),g=(r=f+a*v-e.x)*r+(i=m+s*v-e.y)*i;if(g<=2)return new Nt(r,i);o=Math.sqrt(g/2)}else{var y=!1;a>Number.EPSILON?c>Number.EPSILON&&(y=!0):a<-Number.EPSILON?c<-Number.EPSILON&&(y=!0):Math.sign(s)===Math.sign(u)&&(y=!0),y?(r=-s,i=a,o=Math.sqrt(l)):(r=a,i=s,o=Math.sqrt(l/2))}return new Nt(r/o,i/o)}for(var z=[],G=0,V=L.length,H=V-1,W=G+1;G<V;G++,H++,W++)H===V&&(H=0),W===V&&(W=0),z[G]=j(L[G],L[H],L[W]);var X,q,Y=[],K=z.concat();for(c=0,u=R.length;c<u;c++){for(s=R[c],X=[],G=0,H=(V=s.length)-1,W=G+1;G<V;G++,H++,W++)H===V&&(H=0),W===V&&(W=0),X[G]=j(s[G],s[H],s[W]);Y.push(X),K=K.concat(X)}for(O=0;O<y;O++){for(N=O/y,D=v*Math.cos(N*Math.PI/2),I=g*Math.sin(N*Math.PI/2),G=0,V=L.length;G<V;G++)Q((U=C(L[G],z[G],I)).x,U.y,-D);for(c=0,u=R.length;c<u;c++)for(s=R[c],X=Y[c],G=0,V=s.length;G<V;G++)Q((U=C(s[G],X[G],I)).x,U.y,-D)}for(I=g,G=0;G<B;G++)U=b?C(A[G],K[G],I):A[G],E?(o.copy(r.normals[0]).multiplyScalar(U.x),i.copy(r.binormals[0]).multiplyScalar(U.y),a.copy(n[0]).add(o).add(i),Q(a.x,a.y,a.z)):Q(U.x,U.y,0);for(q=1;q<=_;q++)for(G=0;G<B;G++)U=b?C(A[G],K[G],I):A[G],E?(o.copy(r.normals[q]).multiplyScalar(U.x),i.copy(r.binormals[q]).multiplyScalar(U.y),a.copy(n[q]).add(o).add(i),Q(a.x,a.y,a.z)):Q(U.x,U.y,m/_*q);for(O=y-1;O>=0;O--){for(N=O/y,D=v*Math.cos(N*Math.PI/2),I=g*Math.sin(N*Math.PI/2),G=0,V=L.length;G<V;G++)Q((U=C(L[G],z[G],I)).x,U.y,m+D);for(c=0,u=R.length;c<u;c++)for(s=R[c],X=Y[c],G=0,V=s.length;G<V;G++)U=C(s[G],X[G],I),E?Q(U.x,U.y+n[_-1].y,n[_-1].x+D):Q(U.x,U.y,m+D)}function Z(e,t){var n,r;for(G=e.length;--G>=0;){n=G,(r=G-1)<0&&(r=e.length-1);var i=0,o=_+2*y;for(i=0;i<o;i++){var a=B*i,s=B*(i+1);$(t+n+a,t+r+a,t+r+s,t+n+s)}}}function Q(e,t,n){f.push(e),f.push(t),f.push(n)}function J(e,t,n){ee(e),ee(t),ee(n);var r=h.length/3,i=M.generateTopUV(T,h,r-3,r-2,r-1);te(i[0]),te(i[1]),te(i[2])}function $(e,t,n,r){ee(e),ee(t),ee(r),ee(t),ee(n),ee(r);var i=h.length/3,o=M.generateSideWallUV(T,h,i-6,i-3,i-2,i-1);te(o[0]),te(o[1]),te(o[3]),te(o[1]),te(o[2]),te(o[3])}function ee(e){d.push(h.length/3),h.push(f[3*e+0]),h.push(f[3*e+1]),h.push(f[3*e+2])}function te(e){p.push(e.x),p.push(e.y)}!function(){var e=h.length/3;if(b){var n=0,r=B*n;for(G=0;G<F;G++)J((k=P[G])[2]+r,k[1]+r,k[0]+r);for(r=B*(n=_+2*y),G=0;G<F;G++)J((k=P[G])[0]+r,k[1]+r,k[2]+r)}else{for(G=0;G<F;G++)J((k=P[G])[2],k[1],k[0]);for(G=0;G<F;G++)J((k=P[G])[0]+B*_,k[1]+B*_,k[2]+B*_)}T.addGroup(e,h.length/3-e,void 0!==t.material?t.material:0)}(),function(){var e=h.length/3,n=0;for(Z(L,n),n+=L.length,c=0,u=R.length;c<u;c++)Z(s=R[c],n),n+=s.length;T.addGroup(e,h.length/3-e,void 0!==t.extrudeMaterial?t.extrudeMaterial:1)}(),t.arrays||(this.setIndex(d),this.addAttribute("position",new Ar(h,3)),this.addAttribute("uv",new Ar(t.arrays.uv,2)))},co.WorldUVGenerator={generateTopUV:function(e,t,n,r,i){var o=t[3*n],a=t[3*n+1],s=t[3*r],c=t[3*r+1],u=t[3*i],l=t[3*i+1];return[new Nt(o,a),new Nt(s,c),new Nt(u,l)]},generateSideWallUV:function(e,t,n,r,i,o){var a=t[3*n],s=t[3*n+1],c=t[3*n+2],u=t[3*r],l=t[3*r+1],h=t[3*r+2],d=t[3*i],p=t[3*i+1],f=t[3*i+2],m=t[3*o],v=t[3*o+1],g=t[3*o+2];return Math.abs(s-l)<.01?[new Nt(a,1-c),new Nt(u,1-h),new Nt(d,1-f),new Nt(m,1-g)]:[new Nt(s,1-c),new Nt(l,1-h),new Nt(p,1-f),new Nt(v,1-g)]}},lo.prototype=Object.create(yr.prototype),lo.prototype.constructor=lo,ho.prototype=Object.create(uo.prototype),ho.prototype.constructor=ho,po.prototype=Object.create(yr.prototype),po.prototype.constructor=po,fo.prototype=Object.create(Fr.prototype),fo.prototype.constructor=fo,mo.prototype=Object.create(yr.prototype),mo.prototype.constructor=mo,vo.prototype=Object.create(Fr.prototype),vo.prototype.constructor=vo,go.prototype=Object.create(yr.prototype),go.prototype.constructor=go,yo.prototype=Object.create(Fr.prototype),yo.prototype.constructor=yo,bo.prototype=Object.create(yr.prototype),bo.prototype.constructor=bo,xo.prototype=Object.create(Fr.prototype),xo.prototype.constructor=xo,_o.prototype=Object.create(Fr.prototype),_o.prototype.constructor=_o,wo.prototype=Object.create(yr.prototype),wo.prototype.constructor=wo,Eo.prototype=Object.create(Fr.prototype),Eo.prototype.constructor=Eo,Mo.prototype=Object.create(wo.prototype),Mo.prototype.constructor=Mo,To.prototype=Object.create(Eo.prototype),To.prototype.constructor=To,So.prototype=Object.create(yr.prototype),So.prototype.constructor=So,Ao.prototype=Object.create(Fr.prototype),Ao.prototype.constructor=Ao;var Ro=Object.freeze({WireframeGeometry:Gi,ParametricGeometry:Vi,ParametricBufferGeometry:Hi,TetrahedronGeometry:qi,TetrahedronBufferGeometry:Yi,OctahedronGeometry:Ki,OctahedronBufferGeometry:Zi,IcosahedronGeometry:Qi,IcosahedronBufferGeometry:Ji,DodecahedronGeometry:$i,DodecahedronBufferGeometry:eo,PolyhedronGeometry:Wi,PolyhedronBufferGeometry:Xi,TubeGeometry:to,TubeBufferGeometry:no,TorusKnotGeometry:ro,TorusKnotBufferGeometry:io,TorusGeometry:oo,TorusBufferGeometry:ao,TextGeometry:lo,TextBufferGeometry:ho,SphereGeometry:po,SphereBufferGeometry:fo,RingGeometry:mo,RingBufferGeometry:vo,PlaneGeometry:Gr,PlaneBufferGeometry:Vr,LatheGeometry:go,LatheBufferGeometry:yo,ShapeGeometry:bo,ShapeBufferGeometry:xo,ExtrudeGeometry:co,ExtrudeBufferGeometry:uo,EdgesGeometry:_o,ConeGeometry:Mo,ConeBufferGeometry:To,CylinderGeometry:wo,CylinderBufferGeometry:Eo,CircleGeometry:So,CircleBufferGeometry:Ao,BoxGeometry:jr,BoxBufferGeometry:zr});function Po(e){Zn.call(this),this.type="ShadowMaterial",this.color=new In(0),this.opacity=1,this.lights=!0,this.transparent=!0,this.setValues(e)}function Lo(e){Wr.call(this,e),this.type="RawShaderMaterial"}function Co(e){Zn.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new In(16777215),this.roughness=.5,this.metalness=.5,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new In(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new Nt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function Oo(e){Co.call(this),this.defines={PHYSICAL:""},this.type="MeshPhysicalMaterial",this.reflectivity=.5,this.clearCoat=0,this.clearCoatRoughness=0,this.setValues(e)}function Io(e){Zn.call(this),this.type="MeshPhongMaterial",this.color=new In(16777215),this.specular=new In(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new In(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new Nt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=he,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function No(e){Io.call(this),this.defines={TOON:""},this.type="MeshToonMaterial",this.gradientMap=null,this.setValues(e)}function Do(e){Zn.call(this),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new Nt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function Uo(e){Zn.call(this),this.type="MeshLambertMaterial",this.color=new In(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new In(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=he,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function ko(e){Oi.call(this),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}Po.prototype=Object.create(Zn.prototype),Po.prototype.constructor=Po,Po.prototype.isShadowMaterial=!0,Lo.prototype=Object.create(Wr.prototype),Lo.prototype.constructor=Lo,Lo.prototype.isRawShaderMaterial=!0,Co.prototype=Object.create(Zn.prototype),Co.prototype.constructor=Co,Co.prototype.isMeshStandardMaterial=!0,Co.prototype.copy=function(e){return Zn.prototype.copy.call(this,e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},Oo.prototype=Object.create(Co.prototype),Oo.prototype.constructor=Oo,Oo.prototype.isMeshPhysicalMaterial=!0,Oo.prototype.copy=function(e){return Co.prototype.copy.call(this,e),this.defines={PHYSICAL:""},this.reflectivity=e.reflectivity,this.clearCoat=e.clearCoat,this.clearCoatRoughness=e.clearCoatRoughness,this},Io.prototype=Object.create(Zn.prototype),Io.prototype.constructor=Io,Io.prototype.isMeshPhongMaterial=!0,Io.prototype.copy=function(e){return Zn.prototype.copy.call(this,e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},No.prototype=Object.create(Io.prototype),No.prototype.constructor=No,No.prototype.isMeshToonMaterial=!0,No.prototype.copy=function(e){return Io.prototype.copy.call(this,e),this.gradientMap=e.gradientMap,this},Do.prototype=Object.create(Zn.prototype),Do.prototype.constructor=Do,Do.prototype.isMeshNormalMaterial=!0,Do.prototype.copy=function(e){return Zn.prototype.copy.call(this,e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},Uo.prototype=Object.create(Zn.prototype),Uo.prototype.constructor=Uo,Uo.prototype.isMeshLambertMaterial=!0,Uo.prototype.copy=function(e){return Zn.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},ko.prototype=Object.create(Oi.prototype),ko.prototype.constructor=ko,ko.prototype.isLineDashedMaterial=!0,ko.prototype.copy=function(e){return Oi.prototype.copy.call(this,e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this};var Bo=Object.freeze({ShadowMaterial:Po,SpriteMaterial:Si,RawShaderMaterial:Lo,ShaderMaterial:Wr,PointsMaterial:Ui,MeshPhysicalMaterial:Oo,MeshStandardMaterial:Co,MeshPhongMaterial:Io,MeshToonMaterial:No,MeshNormalMaterial:Do,MeshLambertMaterial:Uo,MeshDepthMaterial:Qn,MeshDistanceMaterial:Jn,MeshBasicMaterial:Hr,LineDashedMaterial:ko,LineBasicMaterial:Oi,Material:Zn}),Fo={enabled:!1,files:{},add:function(e,t){!1!==this.enabled&&(this.files[e]=t)},get:function(e){if(!1!==this.enabled)return this.files[e]},remove:function(e){delete this.files[e]},clear:function(){this.files={}}};function jo(e,t,n){var r=this,i=!1,o=0,a=0,s=void 0;this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(e){a++,!1===i&&void 0!==r.onStart&&r.onStart(e,o,a),i=!0},this.itemEnd=function(e){o++,void 0!==r.onProgress&&r.onProgress(e,o,a),o===a&&(i=!1,void 0!==r.onLoad&&r.onLoad())},this.itemError=function(e){void 0!==r.onError&&r.onError(e)},this.resolveURL=function(e){return s?s(e):e},this.setURLModifier=function(e){s=e}}var zo=new jo,Go={};function Vo(e){this.manager=void 0!==e?e:zo}function Ho(e){this.manager=void 0!==e?e:zo,this._parser=null}function Wo(e){this.manager=void 0!==e?e:zo,this._parser=null}function Xo(e){this.manager=void 0!==e?e:zo}function qo(e){this.manager=void 0!==e?e:zo}function Yo(e){this.manager=void 0!==e?e:zo}function Ko(e,t){dr.call(this),this.type="Light",this.color=new In(e),this.intensity=void 0!==t?t:1,this.receiveShadow=void 0}function Zo(e,t,n){Ko.call(this,e,n),this.type="HemisphereLight",this.castShadow=void 0,this.position.copy(dr.DefaultUp),this.updateMatrix(),this.groundColor=new In(t)}function Qo(e){this.camera=e,this.bias=0,this.radius=1,this.mapSize=new Nt(512,512),this.map=null,this.matrix=new Dt}function Jo(){Qo.call(this,new yi(50,1,.5,500))}function $o(e,t,n,r,i,o){Ko.call(this,e,t),this.type="SpotLight",this.position.copy(dr.DefaultUp),this.updateMatrix(),this.target=new dr,Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(e){this.intensity=e/Math.PI}}),this.distance=void 0!==n?n:0,this.angle=void 0!==r?r:Math.PI/3,this.penumbra=void 0!==i?i:0,this.decay=void 0!==o?o:1,this.shadow=new Jo}function ea(e,t,n,r){Ko.call(this,e,t),this.type="PointLight",Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(e){this.intensity=e/(4*Math.PI)}}),this.distance=void 0!==n?n:0,this.decay=void 0!==r?r:1,this.shadow=new Qo(new yi(90,1,.5,500))}function ta(){Qo.call(this,new fr(-5,5,5,-5,.5,500))}function na(e,t){Ko.call(this,e,t),this.type="DirectionalLight",this.position.copy(dr.DefaultUp),this.updateMatrix(),this.target=new dr,this.shadow=new ta}function ra(e,t){Ko.call(this,e,t),this.type="AmbientLight",this.castShadow=void 0}function ia(e,t,n,r){Ko.call(this,e,t),this.type="RectAreaLight",this.position.set(0,1,0),this.updateMatrix(),this.width=void 0!==n?n:10,this.height=void 0!==r?r:10}Object.assign(Vo.prototype,{load:function(e,t,n,r){void 0===e&&(e=""),void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);var i=this,o=Fo.get(e);if(void 0!==o)return i.manager.itemStart(e),setTimeout(function(){t&&t(o),i.manager.itemEnd(e)},0),o;if(void 0===Go[e]){var a=e.match(/^data:(.*?)(;base64)?,(.*)$/);if(a){var s=a[1],c=!!a[2],u=a[3];u=window.decodeURIComponent(u),c&&(u=window.atob(u));try{var l,h=(this.responseType||"").toLowerCase();switch(h){case"arraybuffer":case"blob":for(var d=new Uint8Array(u.length),p=0;p<u.length;p++)d[p]=u.charCodeAt(p);l="blob"===h?new Blob([d.buffer],{type:s}):d.buffer;break;case"document":var f=new DOMParser;l=f.parseFromString(u,s);break;case"json":l=JSON.parse(u);break;default:l=u}window.setTimeout(function(){t&&t(l),i.manager.itemEnd(e)},0)}catch(t){window.setTimeout(function(){r&&r(t),i.manager.itemEnd(e),i.manager.itemError(e)},0)}}else{Go[e]=[],Go[e].push({onLoad:t,onProgress:n,onError:r});var m=new XMLHttpRequest;for(var v in m.open("GET",e,!0),m.addEventListener("load",function(t){var n=t.target.response;Fo.add(e,n);var r=Go[e];if(delete Go[e],200===this.status){for(var o=0,a=r.length;o<a;o++){(s=r[o]).onLoad&&s.onLoad(n)}i.manager.itemEnd(e)}else if(0===this.status){console.warn("THREE.FileLoader: HTTP Status 0 received.");for(o=0,a=r.length;o<a;o++){(s=r[o]).onLoad&&s.onLoad(n)}i.manager.itemEnd(e)}else{for(o=0,a=r.length;o<a;o++){var s;(s=r[o]).onError&&s.onError(t)}i.manager.itemEnd(e),i.manager.itemError(e)}},!1),m.addEventListener("progress",function(t){for(var n=Go[e],r=0,i=n.length;r<i;r++){var o=n[r];o.onProgress&&o.onProgress(t)}},!1),m.addEventListener("error",function(t){var n=Go[e];delete Go[e];for(var r=0,o=n.length;r<o;r++){var a=n[r];a.onError&&a.onError(t)}i.manager.itemEnd(e),i.manager.itemError(e)},!1),void 0!==this.responseType&&(m.responseType=this.responseType),void 0!==this.withCredentials&&(m.withCredentials=this.withCredentials),m.overrideMimeType&&m.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain"),this.requestHeader)m.setRequestHeader(v,this.requestHeader[v]);m.send(null)}return i.manager.itemStart(e),m}Go[e].push({onLoad:t,onProgress:n,onError:r})},setPath:function(e){return this.path=e,this},setResponseType:function(e){return this.responseType=e,this},setWithCredentials:function(e){return this.withCredentials=e,this},setMimeType:function(e){return this.mimeType=e,this},setRequestHeader:function(e){return this.requestHeader=e,this}}),Object.assign(Ho.prototype,{load:function(e,t,n,r){var i=this,o=[],a=new ji;a.image=o;var s=new Vo(this.manager);function c(c){s.load(e[c],function(e){var n=i._parser(e,!0);o[c]={width:n.width,height:n.height,format:n.format,mipmaps:n.mipmaps},6===(u+=1)&&(1===n.mipmapCount&&(a.minFilter=Ie),a.format=n.format,a.needsUpdate=!0,t&&t(a))},n,r)}if(s.setPath(this.path),s.setResponseType("arraybuffer"),Array.isArray(e))for(var u=0,l=0,h=e.length;l<h;++l)c(l);else s.load(e,function(e){var n=i._parser(e,!0);if(n.isCubemap)for(var r=n.mipmaps.length/n.mipmapCount,s=0;s<r;s++){o[s]={mipmaps:[]};for(var c=0;c<n.mipmapCount;c++)o[s].mipmaps.push(n.mipmaps[s*n.mipmapCount+c]),o[s].format=n.format,o[s].width=n.width,o[s].height=n.height}else a.image.width=n.width,a.image.height=n.height,a.mipmaps=n.mipmaps;1===n.mipmapCount&&(a.minFilter=Ie),a.format=n.format,a.needsUpdate=!0,t&&t(a)},n,r);return a},setPath:function(e){return this.path=e,this}}),Object.assign(Wo.prototype,{load:function(e,t,n,r){var i=this,o=new Ht,a=new Vo(this.manager);return a.setResponseType("arraybuffer"),a.load(e,function(e){var n=i._parser(e);n&&(void 0!==n.image?o.image=n.image:void 0!==n.data&&(o.image.width=n.width,o.image.height=n.height,o.image.data=n.data),o.wrapS=void 0!==n.wrapS?n.wrapS:Re,o.wrapT=void 0!==n.wrapT?n.wrapT:Re,o.magFilter=void 0!==n.magFilter?n.magFilter:Ie,o.minFilter=void 0!==n.minFilter?n.minFilter:De,o.anisotropy=void 0!==n.anisotropy?n.anisotropy:1,void 0!==n.format&&(o.format=n.format),void 0!==n.type&&(o.type=n.type),void 0!==n.mipmaps&&(o.mipmaps=n.mipmaps),1===n.mipmapCount&&(o.minFilter=Ie),o.needsUpdate=!0,t&&t(o,n))},n,r),o}}),Object.assign(Xo.prototype,{crossOrigin:"Anonymous",load:function(e,t,n,r){void 0===e&&(e=""),void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);var i=this,o=Fo.get(e);if(void 0!==o)return i.manager.itemStart(e),setTimeout(function(){t&&t(o),i.manager.itemEnd(e)},0),o;var a=document.createElementNS("http://www.w3.org/1999/xhtml","img");return a.addEventListener("load",function(){Fo.add(e,this),t&&t(this),i.manager.itemEnd(e)},!1),a.addEventListener("error",function(t){r&&r(t),i.manager.itemEnd(e),i.manager.itemError(e)},!1),"data:"!==e.substr(0,5)&&void 0!==this.crossOrigin&&(a.crossOrigin=this.crossOrigin),i.manager.itemStart(e),a.src=e,a},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this}}),Object.assign(qo.prototype,{crossOrigin:"Anonymous",load:function(e,t,n,r){var i=new Wt,o=new Xo(this.manager);o.setCrossOrigin(this.crossOrigin),o.setPath(this.path);var a=0;function s(n){o.load(e[n],function(e){i.images[n]=e,6===++a&&(i.needsUpdate=!0,t&&t(i))},void 0,r)}for(var c=0;c<e.length;++c)s(c);return i},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this}}),Object.assign(Yo.prototype,{crossOrigin:"Anonymous",load:function(e,t,n,r){var i=new Xo(this.manager);i.setCrossOrigin(this.crossOrigin),i.setPath(this.path);var o=new jt;return o.image=i.load(e,function(){var n=e.search(/\.(jpg|jpeg)$/)>0||0===e.search(/^data\:image\/jpeg/);o.format=n?Ke:Ze,o.needsUpdate=!0,void 0!==t&&t(o)},n,r),o},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this}}),Ko.prototype=Object.assign(Object.create(dr.prototype),{constructor:Ko,isLight:!0,copy:function(e){return dr.prototype.copy.call(this,e),this.color.copy(e.color),this.intensity=e.intensity,this},toJSON:function(e){var t=dr.prototype.toJSON.call(this,e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,void 0!==this.groundColor&&(t.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(t.object.distance=this.distance),void 0!==this.angle&&(t.object.angle=this.angle),void 0!==this.decay&&(t.object.decay=this.decay),void 0!==this.penumbra&&(t.object.penumbra=this.penumbra),void 0!==this.shadow&&(t.object.shadow=this.shadow.toJSON()),t}}),Zo.prototype=Object.assign(Object.create(Ko.prototype),{constructor:Zo,isHemisphereLight:!0,copy:function(e){return Ko.prototype.copy.call(this,e),this.groundColor.copy(e.groundColor),this}}),Object.assign(Qo.prototype,{copy:function(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var e={};return 0!==this.bias&&(e.bias=this.bias),1!==this.radius&&(e.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}),Jo.prototype=Object.assign(Object.create(Qo.prototype),{constructor:Jo,isSpotLightShadow:!0,update:function(e){var t=this.camera,n=2*It.RAD2DEG*e.angle,r=this.mapSize.width/this.mapSize.height,i=e.distance||t.far;n===t.fov&&r===t.aspect&&i===t.far||(t.fov=n,t.aspect=r,t.far=i,t.updateProjectionMatrix())}}),$o.prototype=Object.assign(Object.create(Ko.prototype),{constructor:$o,isSpotLight:!0,copy:function(e){return Ko.prototype.copy.call(this,e),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),ea.prototype=Object.assign(Object.create(Ko.prototype),{constructor:ea,isPointLight:!0,copy:function(e){return Ko.prototype.copy.call(this,e),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}),ta.prototype=Object.assign(Object.create(Qo.prototype),{constructor:ta}),na.prototype=Object.assign(Object.create(Ko.prototype),{constructor:na,isDirectionalLight:!0,copy:function(e){return Ko.prototype.copy.call(this,e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),ra.prototype=Object.assign(Object.create(Ko.prototype),{constructor:ra,isAmbientLight:!0}),ia.prototype=Object.assign(Object.create(Ko.prototype),{constructor:ia,isRectAreaLight:!0,copy:function(e){return Ko.prototype.copy.call(this,e),this.width=e.width,this.height=e.height,this},toJSON:function(e){var t=Ko.prototype.toJSON.call(this,e);return t.object.width=this.width,t.object.height=this.height,t}});var oa,aa={arraySlice:function(e,t,n){return aa.isTypedArray(e)?new e.constructor(e.subarray(t,void 0!==n?n:e.length)):e.slice(t,n)},convertArray:function(e,t,n){return!e||!n&&e.constructor===t?e:"number"==typeof t.BYTES_PER_ELEMENT?new t(e):Array.prototype.slice.call(e)},isTypedArray:function(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)},getKeyframeOrder:function(e){for(var t=e.length,n=new Array(t),r=0;r!==t;++r)n[r]=r;return n.sort(function(t,n){return e[t]-e[n]}),n},sortedArray:function(e,t,n){for(var r=e.length,i=new e.constructor(r),o=0,a=0;a!==r;++o)for(var s=n[o]*t,c=0;c!==t;++c)i[a++]=e[s+c];return i},flattenJSON:function(e,t,n,r){for(var i=1,o=e[0];void 0!==o&&void 0===o[r];)o=e[i++];if(void 0!==o){var a=o[r];if(void 0!==a)if(Array.isArray(a))do{void 0!==(a=o[r])&&(t.push(o.time),n.push.apply(n,a)),o=e[i++]}while(void 0!==o);else if(void 0!==a.toArray)do{void 0!==(a=o[r])&&(t.push(o.time),a.toArray(n,n.length)),o=e[i++]}while(void 0!==o);else do{void 0!==(a=o[r])&&(t.push(o.time),n.push(a)),o=e[i++]}while(void 0!==o)}}};function sa(e,t,n,r){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=void 0!==r?r:new t.constructor(n),this.sampleValues=t,this.valueSize=n}function ca(e,t,n,r){sa.call(this,e,t,n,r),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0}function ua(e,t,n,r){sa.call(this,e,t,n,r)}function la(e,t,n,r){sa.call(this,e,t,n,r)}function ha(e,t,n,r){if(void 0===e)throw new Error("track name is undefined");if(void 0===t||0===t.length)throw new Error("no keyframes in track named "+e);this.name=e,this.times=aa.convertArray(t,this.TimeBufferType),this.values=aa.convertArray(n,this.ValueBufferType),this.setInterpolation(r||this.DefaultInterpolation),this.validate(),this.optimize()}function da(e,t,n,r){ha.call(this,e,t,n,r)}function pa(e,t,n,r){sa.call(this,e,t,n,r)}function fa(e,t,n,r){ha.call(this,e,t,n,r)}function ma(e,t,n,r){ha.call(this,e,t,n,r)}function va(e,t,n,r){ha.call(this,e,t,n,r)}function ga(e,t,n){ha.call(this,e,t,n)}function ya(e,t,n,r){ha.call(this,e,t,n,r)}function ba(e,t,n,r){ha.apply(this,e,t,n,r)}function xa(e,t,n){this.name=e,this.tracks=n,this.duration=void 0!==t?t:-1,this.uuid=It.generateUUID(),this.duration<0&&this.resetDuration(),this.optimize()}function _a(e){this.manager=void 0!==e?e:zo,this.textures={}}function wa(e){this.manager=void 0!==e?e:zo}Object.assign(sa.prototype,{evaluate:function(e){var t=this.parameterPositions,n=this._cachedIndex,r=t[n],i=t[n-1];e:{t:{var o;n:{r:if(!(e<r)){for(var a=n+2;;){if(void 0===r){if(e<i)break r;return n=t.length,this._cachedIndex=n,this.afterEnd_(n-1,e,i)}if(n===a)break;if(i=r,e<(r=t[++n]))break t}o=t.length;break n}if(e>=i)break e;var s=t[1];e<s&&(n=2,i=s);for(a=n-2;;){if(void 0===i)return this._cachedIndex=0,this.beforeStart_(0,e,r);if(n===a)break;if(r=i,e>=(i=t[--n-1]))break t}o=n,n=0}for(;n<o;){var c=n+o>>>1;e<t[c]?o=c:n=c+1}if(r=t[n],void 0===(i=t[n-1]))return this._cachedIndex=0,this.beforeStart_(0,e,r);if(void 0===r)return n=t.length,this._cachedIndex=n,this.afterEnd_(n-1,i,e)}this._cachedIndex=n,this.intervalChanged_(n,i,r)}return this.interpolate_(n,i,e,r)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(e){for(var t=this.resultBuffer,n=this.sampleValues,r=this.valueSize,i=e*r,o=0;o!==r;++o)t[o]=n[i+o];return t},interpolate_:function(){throw new Error("call to abstract method")},intervalChanged_:function(){}}),
//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign(sa.prototype,{beforeStart_:sa.prototype.copySampleValue_,afterEnd_:sa.prototype.copySampleValue_}),ca.prototype=Object.assign(Object.create(sa.prototype),{constructor:ca,DefaultSettings_:{endingStart:gt,endingEnd:gt},intervalChanged_:function(e,t,n){var r=this.parameterPositions,i=e-2,o=e+1,a=r[i],s=r[o];if(void 0===a)switch(this.getSettings_().endingStart){case yt:i=e,a=2*t-n;break;case bt:a=t+r[i=r.length-2]-r[i+1];break;default:i=e,a=n}if(void 0===s)switch(this.getSettings_().endingEnd){case yt:o=e,s=2*n-t;break;case bt:o=1,s=n+r[1]-r[0];break;default:o=e-1,s=t}var c=.5*(n-t),u=this.valueSize;this._weightPrev=c/(t-a),this._weightNext=c/(s-n),this._offsetPrev=i*u,this._offsetNext=o*u},interpolate_:function(e,t,n,r){for(var i=this.resultBuffer,o=this.sampleValues,a=this.valueSize,s=e*a,c=s-a,u=this._offsetPrev,l=this._offsetNext,h=this._weightPrev,d=this._weightNext,p=(n-t)/(r-t),f=p*p,m=f*p,v=-h*m+2*h*f-h*p,g=(1+h)*m+(-1.5-2*h)*f+(-.5+h)*p+1,y=(-1-d)*m+(1.5+d)*f+.5*p,b=d*m-d*f,x=0;x!==a;++x)i[x]=v*o[u+x]+g*o[c+x]+y*o[s+x]+b*o[l+x];return i}}),ua.prototype=Object.assign(Object.create(sa.prototype),{constructor:ua,interpolate_:function(e,t,n,r){for(var i=this.resultBuffer,o=this.sampleValues,a=this.valueSize,s=e*a,c=s-a,u=(n-t)/(r-t),l=1-u,h=0;h!==a;++h)i[h]=o[c+h]*l+o[s+h]*u;return i}}),la.prototype=Object.assign(Object.create(sa.prototype),{constructor:la,interpolate_:function(e){return this.copySampleValue_(e-1)}}),oa={TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:mt,InterpolantFactoryMethodDiscrete:function(e){return new la(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodLinear:function(e){return new ua(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:function(e){return new ca(this.times,this.values,this.getValueSize(),e)},setInterpolation:function(e){var t;switch(e){case ft:t=this.InterpolantFactoryMethodDiscrete;break;case mt:t=this.InterpolantFactoryMethodLinear;break;case vt:t=this.InterpolantFactoryMethodSmooth}if(void 0!==t)this.createInterpolant=t;else{var n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(e===this.DefaultInterpolation)throw new Error(n);this.setInterpolation(this.DefaultInterpolation)}console.warn("THREE.KeyframeTrackPrototype:",n)}},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return ft;case this.InterpolantFactoryMethodLinear:return mt;case this.InterpolantFactoryMethodSmooth:return vt}},getValueSize:function(){return this.values.length/this.times.length},shift:function(e){if(0!==e)for(var t=this.times,n=0,r=t.length;n!==r;++n)t[n]+=e;return this},scale:function(e){if(1!==e)for(var t=this.times,n=0,r=t.length;n!==r;++n)t[n]*=e;return this},trim:function(e,t){for(var n=this.times,r=n.length,i=0,o=r-1;i!==r&&n[i]<e;)++i;for(;-1!==o&&n[o]>t;)--o;if(++o,0!==i||o!==r){i>=o&&(i=(o=Math.max(o,1))-1);var a=this.getValueSize();this.times=aa.arraySlice(n,i,o),this.values=aa.arraySlice(this.values,i*a,o*a)}return this},validate:function(){var e=!0,t=this.getValueSize();t-Math.floor(t)!=0&&(console.error("THREE.KeyframeTrackPrototype: Invalid value size in track.",this),e=!1);var n=this.times,r=this.values,i=n.length;0===i&&(console.error("THREE.KeyframeTrackPrototype: Track is empty.",this),e=!1);for(var o=null,a=0;a!==i;a++){var s=n[a];if("number"==typeof s&&isNaN(s)){console.error("THREE.KeyframeTrackPrototype: Time is not a valid number.",this,a,s),e=!1;break}if(null!==o&&o>s){console.error("THREE.KeyframeTrackPrototype: Out of order keys.",this,a,s,o),e=!1;break}o=s}if(void 0!==r&&aa.isTypedArray(r)){a=0;for(var c=r.length;a!==c;++a){var u=r[a];if(isNaN(u)){console.error("THREE.KeyframeTrackPrototype: Value is not a valid number.",this,a,u),e=!1;break}}}return e},optimize:function(){for(var e=this.times,t=this.values,n=this.getValueSize(),r=this.getInterpolation()===vt,i=1,o=e.length-1,a=1;a<o;++a){var s=!1,c=e[a];if(c!==e[a+1]&&(1!==a||c!==c[0]))if(r)s=!0;else for(var u=a*n,l=u-n,h=u+n,d=0;d!==n;++d){var p=t[u+d];if(p!==t[l+d]||p!==t[h+d]){s=!0;break}}if(s){if(a!==i){e[i]=e[a];var f=a*n,m=i*n;for(d=0;d!==n;++d)t[m+d]=t[f+d]}++i}}if(o>0){e[i]=e[o];for(f=o*n,m=i*n,d=0;d!==n;++d)t[m+d]=t[f+d];++i}return i!==e.length&&(this.times=aa.arraySlice(e,0,i),this.values=aa.arraySlice(t,0,i*n)),this}},da.prototype=Object.assign(Object.create(oa),{constructor:da,ValueTypeName:"vector"}),pa.prototype=Object.assign(Object.create(sa.prototype),{constructor:pa,interpolate_:function(e,t,n,r){for(var i=this.resultBuffer,o=this.sampleValues,a=this.valueSize,s=e*a,c=(n-t)/(r-t),u=s+a;s!==u;s+=4)Ut.slerpFlat(i,0,o,s-a,o,s,c);return i}}),fa.prototype=Object.assign(Object.create(oa),{constructor:fa,ValueTypeName:"quaternion",DefaultInterpolation:mt,InterpolantFactoryMethodLinear:function(e){return new pa(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:void 0}),ma.prototype=Object.assign(Object.create(oa),{constructor:ma,ValueTypeName:"number"}),va.prototype=Object.assign(Object.create(oa),{constructor:va,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:ft,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),ga.prototype=Object.assign(Object.create(oa),{constructor:ga,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:ft,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),ya.prototype=Object.assign(Object.create(oa),{constructor:ya,ValueTypeName:"color"}),ba.prototype=oa,oa.constructor=ba,Object.assign(ba,{parse:function(e){if(void 0===e.type)throw new Error("track type undefined, can not parse");var t=ba._getTrackTypeForValueTypeName(e.type);if(void 0===e.times){var n=[],r=[];aa.flattenJSON(e.keys,n,r,"value"),e.times=n,e.values=r}return void 0!==t.parse?t.parse(e):new t(e.name,e.times,e.values,e.interpolation)},toJSON:function(e){var t,n=e.constructor;if(void 0!==n.toJSON)t=n.toJSON(e);else{t={name:e.name,times:aa.convertArray(e.times,Array),values:aa.convertArray(e.values,Array)};var r=e.getInterpolation();r!==e.DefaultInterpolation&&(t.interpolation=r)}return t.type=e.ValueTypeName,t},_getTrackTypeForValueTypeName:function(e){switch(e.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return ma;case"vector":case"vector2":case"vector3":case"vector4":return da;case"color":return ya;case"quaternion":return fa;case"bool":case"boolean":return ga;case"string":return va}throw new Error("Unsupported typeName: "+e)}}),Object.assign(xa,{parse:function(e){for(var t=[],n=e.tracks,r=1/(e.fps||1),i=0,o=n.length;i!==o;++i)t.push(ba.parse(n[i]).scale(r));return new xa(e.name,e.duration,t)},toJSON:function(e){for(var t=[],n=e.tracks,r={name:e.name,duration:e.duration,tracks:t},i=0,o=n.length;i!==o;++i)t.push(ba.toJSON(n[i]));return r},CreateFromMorphTargetSequence:function(e,t,n,r){for(var i=t.length,o=[],a=0;a<i;a++){var s=[],c=[];s.push((a+i-1)%i,a,(a+1)%i),c.push(0,1,0);var u=aa.getKeyframeOrder(s);s=aa.sortedArray(s,1,u),c=aa.sortedArray(c,1,u),r||0!==s[0]||(s.push(i),c.push(c[0])),o.push(new ma(".morphTargetInfluences["+t[a].name+"]",s,c).scale(1/n))}return new xa(e,-1,o)},findByName:function(e,t){var n=e;if(!Array.isArray(e)){var r=e;n=r.geometry&&r.geometry.animations||r.animations}for(var i=0;i<n.length;i++)if(n[i].name===t)return n[i];return null},CreateClipsFromMorphTargetSequences:function(e,t,n){for(var r={},i=/^([\w-]*?)([\d]+)$/,o=0,a=e.length;o<a;o++){var s=e[o],c=s.name.match(i);if(c&&c.length>1){var u=r[h=c[1]];u||(r[h]=u=[]),u.push(s)}}var l=[];for(var h in r)l.push(xa.CreateFromMorphTargetSequence(h,r[h],t,n));return l},parseAnimation:function(e,t){if(!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;for(var n=function(e,t,n,r,i){if(0!==n.length){var o=[],a=[];aa.flattenJSON(n,o,a,r),0!==o.length&&i.push(new e(t,o,a))}},r=[],i=e.name||"default",o=e.length||-1,a=e.fps||30,s=e.hierarchy||[],c=0;c<s.length;c++){var u=s[c].keys;if(u&&0!==u.length)if(u[0].morphTargets){for(var l={},h=0;h<u.length;h++)if(u[h].morphTargets)for(var d=0;d<u[h].morphTargets.length;d++)l[u[h].morphTargets[d]]=-1;for(var p in l){var f=[],m=[];for(d=0;d!==u[h].morphTargets.length;++d){var v=u[h];f.push(v.time),m.push(v.morphTarget===p?1:0)}r.push(new ma(".morphTargetInfluence["+p+"]",f,m))}o=l.length*(a||1)}else{var g=".bones["+t[c].name+"]";n(da,g+".position",u,"pos",r),n(fa,g+".quaternion",u,"rot",r),n(da,g+".scale",u,"scl",r)}}return 0===r.length?null:new xa(i,o,r)}}),Object.assign(xa.prototype,{resetDuration:function(){for(var e=0,t=0,n=this.tracks.length;t!==n;++t){var r=this.tracks[t];e=Math.max(e,r.times[r.times.length-1])}this.duration=e},trim:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this},optimize:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}}),Object.assign(_a.prototype,{load:function(e,t,n,r){var i=this;new Vo(i.manager).load(e,function(e){t(i.parse(JSON.parse(e)))},n,r)},setTextures:function(e){this.textures=e},parse:function(e){var t=this.textures;function n(e){return void 0===t[e]&&console.warn("THREE.MaterialLoader: Undefined texture",e),t[e]}var r=new Bo[e.type];if(void 0!==e.uuid&&(r.uuid=e.uuid),void 0!==e.name&&(r.name=e.name),void 0!==e.color&&r.color.setHex(e.color),void 0!==e.roughness&&(r.roughness=e.roughness),void 0!==e.metalness&&(r.metalness=e.metalness),void 0!==e.emissive&&r.emissive.setHex(e.emissive),void 0!==e.specular&&r.specular.setHex(e.specular),void 0!==e.shininess&&(r.shininess=e.shininess),void 0!==e.clearCoat&&(r.clearCoat=e.clearCoat),void 0!==e.clearCoatRoughness&&(r.clearCoatRoughness=e.clearCoatRoughness),void 0!==e.uniforms&&(r.uniforms=e.uniforms),void 0!==e.vertexShader&&(r.vertexShader=e.vertexShader),void 0!==e.fragmentShader&&(r.fragmentShader=e.fragmentShader),void 0!==e.vertexColors&&(r.vertexColors=e.vertexColors),void 0!==e.fog&&(r.fog=e.fog),void 0!==e.flatShading&&(r.flatShading=e.flatShading),void 0!==e.blending&&(r.blending=e.blending),void 0!==e.side&&(r.side=e.side),void 0!==e.opacity&&(r.opacity=e.opacity),void 0!==e.transparent&&(r.transparent=e.transparent),void 0!==e.alphaTest&&(r.alphaTest=e.alphaTest),void 0!==e.depthTest&&(r.depthTest=e.depthTest),void 0!==e.depthWrite&&(r.depthWrite=e.depthWrite),void 0!==e.colorWrite&&(r.colorWrite=e.colorWrite),void 0!==e.wireframe&&(r.wireframe=e.wireframe),void 0!==e.wireframeLinewidth&&(r.wireframeLinewidth=e.wireframeLinewidth),void 0!==e.wireframeLinecap&&(r.wireframeLinecap=e.wireframeLinecap),void 0!==e.wireframeLinejoin&&(r.wireframeLinejoin=e.wireframeLinejoin),void 0!==e.rotation&&(r.rotation=e.rotation),1!==e.linewidth&&(r.linewidth=e.linewidth),void 0!==e.dashSize&&(r.dashSize=e.dashSize),void 0!==e.gapSize&&(r.gapSize=e.gapSize),void 0!==e.scale&&(r.scale=e.scale),void 0!==e.skinning&&(r.skinning=e.skinning),void 0!==e.morphTargets&&(r.morphTargets=e.morphTargets),void 0!==e.dithering&&(r.dithering=e.dithering),void 0!==e.visible&&(r.visible=e.visible),void 0!==e.userData&&(r.userData=e.userData),void 0!==e.shading&&(r.flatShading=1===e.shading),void 0!==e.size&&(r.size=e.size),void 0!==e.sizeAttenuation&&(r.sizeAttenuation=e.sizeAttenuation),void 0!==e.map&&(r.map=n(e.map)),void 0!==e.alphaMap&&(r.alphaMap=n(e.alphaMap),r.transparent=!0),void 0!==e.bumpMap&&(r.bumpMap=n(e.bumpMap)),void 0!==e.bumpScale&&(r.bumpScale=e.bumpScale),void 0!==e.normalMap&&(r.normalMap=n(e.normalMap)),void 0!==e.normalScale){var i=e.normalScale;!1===Array.isArray(i)&&(i=[i,i]),r.normalScale=(new Nt).fromArray(i)}return void 0!==e.displacementMap&&(r.displacementMap=n(e.displacementMap)),void 0!==e.displacementScale&&(r.displacementScale=e.displacementScale),void 0!==e.displacementBias&&(r.displacementBias=e.displacementBias),void 0!==e.roughnessMap&&(r.roughnessMap=n(e.roughnessMap)),void 0!==e.metalnessMap&&(r.metalnessMap=n(e.metalnessMap)),void 0!==e.emissiveMap&&(r.emissiveMap=n(e.emissiveMap)),void 0!==e.emissiveIntensity&&(r.emissiveIntensity=e.emissiveIntensity),void 0!==e.specularMap&&(r.specularMap=n(e.specularMap)),void 0!==e.envMap&&(r.envMap=n(e.envMap)),void 0!==e.reflectivity&&(r.reflectivity=e.reflectivity),void 0!==e.lightMap&&(r.lightMap=n(e.lightMap)),void 0!==e.lightMapIntensity&&(r.lightMapIntensity=e.lightMapIntensity),void 0!==e.aoMap&&(r.aoMap=n(e.aoMap)),void 0!==e.aoMapIntensity&&(r.aoMapIntensity=e.aoMapIntensity),void 0!==e.gradientMap&&(r.gradientMap=n(e.gradientMap)),r}}),Object.assign(wa.prototype,{load:function(e,t,n,r){var i=this;new Vo(i.manager).load(e,function(e){t(i.parse(JSON.parse(e)))},n,r)},parse:function(e){var t=new Fr,n=e.data.index;if(void 0!==n){var r=new Aa[n.type](n.array);t.setIndex(new br(r,1))}var i=e.data.attributes;for(var o in i){var a=i[o];r=new Aa[a.type](a.array);t.addAttribute(o,new br(r,a.itemSize,a.normalized))}var s=e.data.groups||e.data.drawcalls||e.data.offsets;if(void 0!==s)for(var c=0,u=s.length;c!==u;++c){var l=s[c];t.addGroup(l.start,l.count,l.materialIndex)}var h=e.data.boundingSphere;if(void 0!==h){var d=new kt;void 0!==h.center&&d.fromArray(h.center),t.boundingSphere=new er(d,h.radius)}return t}});var Ea,Ma,Ta,Sa,Aa={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:"undefined"!=typeof Uint8ClampedArray?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function Ra(){this.onLoadStart=function(){},this.onLoadProgress=function(){},this.onLoadComplete=function(){}}function Pa(e){"boolean"==typeof e&&(console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."),e=void 0),this.manager=void 0!==e?e:zo,this.withCredentials=!1}function La(e){this.manager=void 0!==e?e:zo,this.texturePath=""}Ra.Handlers={handlers:[],add:function(e,t){this.handlers.push(e,t)},get:function(e){for(var t=this.handlers,n=0,r=t.length;n<r;n+=2){var i=t[n],o=t[n+1];if(i.test(e))return o}return null}},Object.assign(Ra.prototype,{crossOrigin:void 0,extractUrlBase:function(e){var t=e.split("/");return 1===t.length?"./":(t.pop(),t.join("/")+"/")},initMaterials:function(e,t,n){for(var r=[],i=0;i<e.length;++i)r[i]=this.createMaterial(e[i],t,n);return r},createMaterial:(Ea={NoBlending:D,NormalBlending:U,AdditiveBlending:k,SubtractiveBlending:B,MultiplyBlending:F,CustomBlending:j},Ma=new In,Ta=new Yo,Sa=new _a,function(e,t,n){var r={};function i(e,i,o,a,s){var c,u=t+e,l=Ra.Handlers.get(u);null!==l?c=l.load(u):(Ta.setCrossOrigin(n),c=Ta.load(u)),void 0!==i&&(c.repeat.fromArray(i),1!==i[0]&&(c.wrapS=Ae),1!==i[1]&&(c.wrapT=Ae)),void 0!==o&&c.offset.fromArray(o),void 0!==a&&("repeat"===a[0]&&(c.wrapS=Ae),"mirror"===a[0]&&(c.wrapS=Pe),"repeat"===a[1]&&(c.wrapT=Ae),"mirror"===a[1]&&(c.wrapT=Pe)),void 0!==s&&(c.anisotropy=s);var h=It.generateUUID();return r[h]=c,h}var o={uuid:It.generateUUID(),type:"MeshLambertMaterial"};for(var a in e){var s=e[a];switch(a){case"DbgColor":case"DbgIndex":case"opticalDensity":case"illumination":break;case"DbgName":o.name=s;break;case"blending":o.blending=Ea[s];break;case"colorAmbient":case"mapAmbient":console.warn("THREE.Loader.createMaterial:",a,"is no longer supported.");break;case"colorDiffuse":o.color=Ma.fromArray(s).getHex();break;case"colorSpecular":o.specular=Ma.fromArray(s).getHex();break;case"colorEmissive":o.emissive=Ma.fromArray(s).getHex();break;case"specularCoef":o.shininess=s;break;case"shading":"basic"===s.toLowerCase()&&(o.type="MeshBasicMaterial"),"phong"===s.toLowerCase()&&(o.type="MeshPhongMaterial"),"standard"===s.toLowerCase()&&(o.type="MeshStandardMaterial");break;case"mapDiffuse":o.map=i(s,e.mapDiffuseRepeat,e.mapDiffuseOffset,e.mapDiffuseWrap,e.mapDiffuseAnisotropy);break;case"mapDiffuseRepeat":case"mapDiffuseOffset":case"mapDiffuseWrap":case"mapDiffuseAnisotropy":break;case"mapEmissive":o.emissiveMap=i(s,e.mapEmissiveRepeat,e.mapEmissiveOffset,e.mapEmissiveWrap,e.mapEmissiveAnisotropy);break;case"mapEmissiveRepeat":case"mapEmissiveOffset":case"mapEmissiveWrap":case"mapEmissiveAnisotropy":break;case"mapLight":o.lightMap=i(s,e.mapLightRepeat,e.mapLightOffset,e.mapLightWrap,e.mapLightAnisotropy);break;case"mapLightRepeat":case"mapLightOffset":case"mapLightWrap":case"mapLightAnisotropy":break;case"mapAO":o.aoMap=i(s,e.mapAORepeat,e.mapAOOffset,e.mapAOWrap,e.mapAOAnisotropy);break;case"mapAORepeat":case"mapAOOffset":case"mapAOWrap":case"mapAOAnisotropy":break;case"mapBump":o.bumpMap=i(s,e.mapBumpRepeat,e.mapBumpOffset,e.mapBumpWrap,e.mapBumpAnisotropy);break;case"mapBumpScale":o.bumpScale=s;break;case"mapBumpRepeat":case"mapBumpOffset":case"mapBumpWrap":case"mapBumpAnisotropy":break;case"mapNormal":o.normalMap=i(s,e.mapNormalRepeat,e.mapNormalOffset,e.mapNormalWrap,e.mapNormalAnisotropy);break;case"mapNormalFactor":o.normalScale=[s,s];break;case"mapNormalRepeat":case"mapNormalOffset":case"mapNormalWrap":case"mapNormalAnisotropy":break;case"mapSpecular":o.specularMap=i(s,e.mapSpecularRepeat,e.mapSpecularOffset,e.mapSpecularWrap,e.mapSpecularAnisotropy);break;case"mapSpecularRepeat":case"mapSpecularOffset":case"mapSpecularWrap":case"mapSpecularAnisotropy":break;case"mapMetalness":o.metalnessMap=i(s,e.mapMetalnessRepeat,e.mapMetalnessOffset,e.mapMetalnessWrap,e.mapMetalnessAnisotropy);break;case"mapMetalnessRepeat":case"mapMetalnessOffset":case"mapMetalnessWrap":case"mapMetalnessAnisotropy":break;case"mapRoughness":o.roughnessMap=i(s,e.mapRoughnessRepeat,e.mapRoughnessOffset,e.mapRoughnessWrap,e.mapRoughnessAnisotropy);break;case"mapRoughnessRepeat":case"mapRoughnessOffset":case"mapRoughnessWrap":case"mapRoughnessAnisotropy":break;case"mapAlpha":o.alphaMap=i(s,e.mapAlphaRepeat,e.mapAlphaOffset,e.mapAlphaWrap,e.mapAlphaAnisotropy);break;case"mapAlphaRepeat":case"mapAlphaOffset":case"mapAlphaWrap":case"mapAlphaAnisotropy":break;case"flipSided":o.side=R;break;case"doubleSided":o.side=P;break;case"transparency":console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity"),o.opacity=s;break;case"depthTest":case"depthWrite":case"colorWrite":case"opacity":case"reflectivity":case"transparent":case"visible":case"wireframe":o[a]=s;break;case"vertexColors":!0===s&&(o.vertexColors=N),"face"===s&&(o.vertexColors=I);break;default:console.error("THREE.Loader.createMaterial: Unsupported",a,s)}}return"MeshBasicMaterial"===o.type&&delete o.emissive,"MeshPhongMaterial"!==o.type&&delete o.specular,o.opacity<1&&(o.transparent=!0),Sa.setTextures(r),Sa.parse(o)})}),Object.assign(Pa.prototype,{load:function(e,t,n,r){var i=this,o=this.texturePath&&"string"==typeof this.texturePath?this.texturePath:Ra.prototype.extractUrlBase(e),a=new Vo(this.manager);a.setWithCredentials(this.withCredentials),a.load(e,function(n){var r=JSON.parse(n),a=r.metadata;if(void 0!==a){var s=a.type;if(void 0!==s){if("object"===s.toLowerCase())return void console.error("THREE.JSONLoader: "+e+" should be loaded with THREE.ObjectLoader instead.");if("scene"===s.toLowerCase())return void console.error("THREE.JSONLoader: "+e+" should be loaded with THREE.SceneLoader instead.")}}var c=i.parse(r,o);t(c.geometry,c.materials)},n,r)},setTexturePath:function(e){this.texturePath=e},parse:function(){return function(e,t){void 0!==e.data&&(e=e.data),void 0!==e.scale?e.scale=1/e.scale:e.scale=1;var n=new yr;return function(e,t){function n(e,t){return e&1<<t}var r,i,o,a,s,c,u,l,h,d,p,f,m,v,g,y,b,x,_,w,E,M,T,S,A,R=e.faces,P=e.vertices,L=e.normals,C=e.colors,O=e.scale,I=0;if(void 0!==e.uvs){for(r=0;r<e.uvs.length;r++)e.uvs[r].length&&I++;for(r=0;r<I;r++)t.faceVertexUvs[r]=[]}for(a=0,s=P.length;a<s;)(x=new kt).x=P[a++]*O,x.y=P[a++]*O,x.z=P[a++]*O,t.vertices.push(x);for(a=0,s=R.length;a<s;)if(p=n(d=R[a++],0),f=n(d,1),m=n(d,3),v=n(d,4),g=n(d,5),y=n(d,6),b=n(d,7),p){if((w=new mr).a=R[a],w.b=R[a+1],w.c=R[a+3],(E=new mr).a=R[a+1],E.b=R[a+2],E.c=R[a+3],a+=4,f&&(h=R[a++],w.materialIndex=h,E.materialIndex=h),o=t.faces.length,m)for(r=0;r<I;r++)for(S=e.uvs[r],t.faceVertexUvs[r][o]=[],t.faceVertexUvs[r][o+1]=[],i=0;i<4;i++)A=new Nt(S[2*(l=R[a++])],S[2*l+1]),2!==i&&t.faceVertexUvs[r][o].push(A),0!==i&&t.faceVertexUvs[r][o+1].push(A);if(v&&(u=3*R[a++],w.normal.set(L[u++],L[u++],L[u]),E.normal.copy(w.normal)),g)for(r=0;r<4;r++)u=3*R[a++],T=new kt(L[u++],L[u++],L[u]),2!==r&&w.vertexNormals.push(T),0!==r&&E.vertexNormals.push(T);if(y&&(M=C[c=R[a++]],w.color.setHex(M),E.color.setHex(M)),b)for(r=0;r<4;r++)M=C[c=R[a++]],2!==r&&w.vertexColors.push(new In(M)),0!==r&&E.vertexColors.push(new In(M));t.faces.push(w),t.faces.push(E)}else{if((_=new mr).a=R[a++],_.b=R[a++],_.c=R[a++],f&&(h=R[a++],_.materialIndex=h),o=t.faces.length,m)for(r=0;r<I;r++)for(S=e.uvs[r],t.faceVertexUvs[r][o]=[],i=0;i<3;i++)A=new Nt(S[2*(l=R[a++])],S[2*l+1]),t.faceVertexUvs[r][o].push(A);if(v&&(u=3*R[a++],_.normal.set(L[u++],L[u++],L[u])),g)for(r=0;r<3;r++)u=3*R[a++],T=new kt(L[u++],L[u++],L[u]),_.vertexNormals.push(T);if(y&&(c=R[a++],_.color.setHex(C[c])),b)for(r=0;r<3;r++)c=R[a++],_.vertexColors.push(new In(C[c]));t.faces.push(_)}}(e,n),function(e,t){var n=void 0!==e.influencesPerVertex?e.influencesPerVertex:2;if(e.skinWeights)for(var r=0,i=e.skinWeights.length;r<i;r+=n){var o=e.skinWeights[r],a=n>1?e.skinWeights[r+1]:0,s=n>2?e.skinWeights[r+2]:0,c=n>3?e.skinWeights[r+3]:0;t.skinWeights.push(new zt(o,a,s,c))}if(e.skinIndices)for(r=0,i=e.skinIndices.length;r<i;r+=n){var u=e.skinIndices[r],l=n>1?e.skinIndices[r+1]:0,h=n>2?e.skinIndices[r+2]:0,d=n>3?e.skinIndices[r+3]:0;t.skinIndices.push(new zt(u,l,h,d))}t.bones=e.bones,t.bones&&t.bones.length>0&&(t.skinWeights.length!==t.skinIndices.length||t.skinIndices.length!==t.vertices.length)&&console.warn("When skinning, number of vertices ("+t.vertices.length+"), skinIndices ("+t.skinIndices.length+"), and skinWeights ("+t.skinWeights.length+") should match.")}(e,n),function(e,t){var n=e.scale;if(void 0!==e.morphTargets)for(var r=0,i=e.morphTargets.length;r<i;r++){t.morphTargets[r]={},t.morphTargets[r].name=e.morphTargets[r].name,t.morphTargets[r].vertices=[];for(var o=t.morphTargets[r].vertices,a=e.morphTargets[r].vertices,s=0,c=a.length;s<c;s+=3){var u=new kt;u.x=a[s]*n,u.y=a[s+1]*n,u.z=a[s+2]*n,o.push(u)}}if(void 0!==e.morphColors&&e.morphColors.length>0){console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.');var l=t.faces,h=e.morphColors[0].colors;for(r=0,i=l.length;r<i;r++)l[r].color.fromArray(h,3*r)}}(e,n),function(e,t){var n=[],r=[];void 0!==e.animation&&r.push(e.animation),void 0!==e.animations&&(e.animations.length?r=r.concat(e.animations):r.push(e.animations));for(var i=0;i<r.length;i++){var o=xa.parseAnimation(r[i],t.bones);o&&n.push(o)}if(t.morphTargets){var a=xa.CreateClipsFromMorphTargetSequences(t.morphTargets,10);n=n.concat(a)}n.length>0&&(t.animations=n)}(e,n),n.computeFaceNormals(),n.computeBoundingSphere(),void 0===e.materials||0===e.materials.length?{geometry:n}:{geometry:n,materials:Ra.prototype.initMaterials(e.materials,t,this.crossOrigin)}}}()}),Object.assign(La.prototype,{load:function(e,t,n,r){""===this.texturePath&&(this.texturePath=e.substring(0,e.lastIndexOf("/")+1));var i=this;new Vo(i.manager).load(e,function(n){var o=null;try{o=JSON.parse(n)}catch(t){return void 0!==r&&r(t),void console.error("THREE:ObjectLoader: Can't parse "+e+".",t.message)}var a=o.metadata;void 0!==a&&void 0!==a.type&&"geometry"!==a.type.toLowerCase()?i.parse(o,t):console.error("THREE.ObjectLoader: Can't load "+e+". Use THREE.JSONLoader instead.")},n,r)},setTexturePath:function(e){this.texturePath=e},setCrossOrigin:function(e){this.crossOrigin=e},parse:function(e,t){var n=this.parseGeometries(e.geometries),r=this.parseImages(e.images,function(){void 0!==t&&t(a)}),i=this.parseTextures(e.textures,r),o=this.parseMaterials(e.materials,i),a=this.parseObject(e.object,n,o);return e.animations&&(a.animations=this.parseAnimations(e.animations)),void 0!==e.images&&0!==e.images.length||void 0!==t&&t(a),a},parseGeometries:function(e){var t={};if(void 0!==e)for(var n=new Pa,r=new wa,i=0,o=e.length;i<o;i++){var a,s=e[i];switch(s.type){case"PlaneGeometry":case"PlaneBufferGeometry":a=new Ro[s.type](s.width,s.height,s.widthSegments,s.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":a=new Ro[s.type](s.width,s.height,s.depth,s.widthSegments,s.heightSegments,s.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":a=new Ro[s.type](s.radius,s.segments,s.thetaStart,s.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":a=new Ro[s.type](s.radiusTop,s.radiusBottom,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":a=new Ro[s.type](s.radius,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":a=new Ro[s.type](s.radius,s.widthSegments,s.heightSegments,s.phiStart,s.phiLength,s.thetaStart,s.thetaLength);break;case"DodecahedronGeometry":case"DodecahedronBufferGeometry":case"IcosahedronGeometry":case"IcosahedronBufferGeometry":case"OctahedronGeometry":case"OctahedronBufferGeometry":case"TetrahedronGeometry":case"TetrahedronBufferGeometry":a=new Ro[s.type](s.radius,s.detail);break;case"RingGeometry":case"RingBufferGeometry":a=new Ro[s.type](s.innerRadius,s.outerRadius,s.thetaSegments,s.phiSegments,s.thetaStart,s.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":a=new Ro[s.type](s.radius,s.tube,s.radialSegments,s.tubularSegments,s.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":a=new Ro[s.type](s.radius,s.tube,s.tubularSegments,s.radialSegments,s.p,s.q);break;case"LatheGeometry":case"LatheBufferGeometry":a=new Ro[s.type](s.points,s.segments,s.phiStart,s.phiLength);break;case"PolyhedronGeometry":case"PolyhedronBufferGeometry":a=new Ro[s.type](s.vertices,s.indices,s.radius,s.details);break;case"BufferGeometry":a=r.parse(s);break;case"Geometry":a=n.parse(s,this.texturePath).geometry;break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+s.type+'"');continue}a.uuid=s.uuid,void 0!==s.name&&(a.name=s.name),t[s.uuid]=a}return t},parseMaterials:function(e,t){var n={};if(void 0!==e){var r=new _a;r.setTextures(t);for(var i=0,o=e.length;i<o;i++){var a=e[i];if("MultiMaterial"===a.type){for(var s=[],c=0;c<a.materials.length;c++)s.push(r.parse(a.materials[c]));n[a.uuid]=s}else n[a.uuid]=r.parse(a)}}return n},parseAnimations:function(e){for(var t=[],n=0;n<e.length;n++){var r=xa.parse(e[n]);t.push(r)}return t},parseImages:function(e,t){var n=this,r={};function i(e){return n.manager.itemStart(e),o.load(e,function(){n.manager.itemEnd(e)},void 0,function(){n.manager.itemEnd(e),n.manager.itemError(e)})}if(void 0!==e&&e.length>0){var o=new Xo(new jo(t));o.setCrossOrigin(this.crossOrigin);for(var a=0,s=e.length;a<s;a++){var c=e[a],u=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(c.url)?c.url:n.texturePath+c.url;r[c.uuid]=i(u)}}return r},parseTextures:function(e,t){function n(e,t){return"number"==typeof e?e:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",e),t[e])}var r={};if(void 0!==e)for(var i=0,o=e.length;i<o;i++){var a=e[i];void 0===a.image&&console.warn('THREE.ObjectLoader: No "image" specified for',a.uuid),void 0===t[a.image]&&console.warn("THREE.ObjectLoader: Undefined image",a.image);var s=new jt(t[a.image]);s.needsUpdate=!0,s.uuid=a.uuid,void 0!==a.name&&(s.name=a.name),void 0!==a.mapping&&(s.mapping=n(a.mapping,Ca)),void 0!==a.offset&&s.offset.fromArray(a.offset),void 0!==a.repeat&&s.repeat.fromArray(a.repeat),void 0!==a.center&&s.center.fromArray(a.center),void 0!==a.rotation&&(s.rotation=a.rotation),void 0!==a.wrap&&(s.wrapS=n(a.wrap[0],Oa),s.wrapT=n(a.wrap[1],Oa)),void 0!==a.minFilter&&(s.minFilter=n(a.minFilter,Ia)),void 0!==a.magFilter&&(s.magFilter=n(a.magFilter,Ia)),void 0!==a.anisotropy&&(s.anisotropy=a.anisotropy),void 0!==a.flipY&&(s.flipY=a.flipY),r[a.uuid]=s}return r},parseObject:function(){var e=new Dt;return function(t,n,r){var i;function o(e){return void 0===n[e]&&console.warn("THREE.ObjectLoader: Undefined geometry",e),n[e]}function a(e){if(void 0!==e){if(Array.isArray(e)){for(var t=[],n=0,i=e.length;n<i;n++){var o=e[n];void 0===r[o]&&console.warn("THREE.ObjectLoader: Undefined material",o),t.push(r[o])}return t}return void 0===r[e]&&console.warn("THREE.ObjectLoader: Undefined material",e),r[e]}}switch(t.type){case"Scene":i=new Mi,void 0!==t.background&&Number.isInteger(t.background)&&(i.background=new In(t.background)),void 0!==t.fog&&("Fog"===t.fog.type?i.fog=new Ei(t.fog.color,t.fog.near,t.fog.far):"FogExp2"===t.fog.type&&(i.fog=new wi(t.fog.color,t.fog.density)));break;case"PerspectiveCamera":i=new yi(t.fov,t.aspect,t.near,t.far),void 0!==t.focus&&(i.focus=t.focus),void 0!==t.zoom&&(i.zoom=t.zoom),void 0!==t.filmGauge&&(i.filmGauge=t.filmGauge),void 0!==t.filmOffset&&(i.filmOffset=t.filmOffset),void 0!==t.view&&(i.view=Object.assign({},t.view));break;case"OrthographicCamera":i=new fr(t.left,t.right,t.top,t.bottom,t.near,t.far);break;case"AmbientLight":i=new ra(t.color,t.intensity);break;case"DirectionalLight":i=new na(t.color,t.intensity);break;case"PointLight":i=new ea(t.color,t.intensity,t.distance,t.decay);break;case"RectAreaLight":i=new ia(t.color,t.intensity,t.width,t.height);break;case"SpotLight":i=new $o(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);break;case"HemisphereLight":i=new Zo(t.color,t.groundColor,t.intensity);break;case"SkinnedMesh":console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");case"Mesh":var s=o(t.geometry),c=a(t.material);i=s.bones&&s.bones.length>0?new Ci(s,c):new Kr(s,c);break;case"LOD":i=new Ri;break;case"Line":i=new Ii(o(t.geometry),a(t.material),t.mode);break;case"LineLoop":i=new Di(o(t.geometry),a(t.material));break;case"LineSegments":i=new Ni(o(t.geometry),a(t.material));break;case"PointCloud":case"Points":i=new ki(o(t.geometry),a(t.material));break;case"Sprite":i=new Ai(a(t.material));break;case"Group":i=new Bi;break;default:i=new dr}if(i.uuid=t.uuid,void 0!==t.name&&(i.name=t.name),void 0!==t.matrix?(e.fromArray(t.matrix),e.decompose(i.position,i.quaternion,i.scale)):(void 0!==t.position&&i.position.fromArray(t.position),void 0!==t.rotation&&i.rotation.fromArray(t.rotation),void 0!==t.quaternion&&i.quaternion.fromArray(t.quaternion),void 0!==t.scale&&i.scale.fromArray(t.scale)),void 0!==t.castShadow&&(i.castShadow=t.castShadow),void 0!==t.receiveShadow&&(i.receiveShadow=t.receiveShadow),t.shadow&&(void 0!==t.shadow.bias&&(i.shadow.bias=t.shadow.bias),void 0!==t.shadow.radius&&(i.shadow.radius=t.shadow.radius),void 0!==t.shadow.mapSize&&i.shadow.mapSize.fromArray(t.shadow.mapSize),void 0!==t.shadow.camera&&(i.shadow.camera=this.parseObject(t.shadow.camera))),void 0!==t.visible&&(i.visible=t.visible),void 0!==t.userData&&(i.userData=t.userData),void 0!==t.children)for(var u=t.children,l=0;l<u.length;l++)i.add(this.parseObject(u[l],n,r));if("LOD"===t.type)for(var h=t.levels,d=0;d<h.length;d++){var p=h[d],f=i.getObjectByProperty("uuid",p.object);void 0!==f&&i.addLevel(f,p.distance)}return i}}()});var Ca={UVMapping:be,CubeReflectionMapping:xe,CubeRefractionMapping:_e,EquirectangularReflectionMapping:we,EquirectangularRefractionMapping:Ee,SphericalReflectionMapping:Me,CubeUVReflectionMapping:Te,CubeUVRefractionMapping:Se},Oa={RepeatWrapping:Ae,ClampToEdgeWrapping:Re,MirroredRepeatWrapping:Pe},Ia={NearestFilter:Le,NearestMipMapNearestFilter:Ce,NearestMipMapLinearFilter:Oe,LinearFilter:Ie,LinearMipMapNearestFilter:Ne,LinearMipMapLinearFilter:De};function Na(e,t,n,r,i){var o=.5*(r-t),a=.5*(i-n),s=e*e;return(2*n-2*r+o+a)*(e*s)+(-3*n+3*r-2*o-a)*s+o*e+n}function Da(e,t,n,r){return function(e,t){var n=1-e;return n*n*t}(e,t)+function(e,t){return 2*(1-e)*e*t}(e,n)+function(e,t){return e*e*t}(e,r)}function Ua(e,t,n,r,i){return function(e,t){var n=1-e;return n*n*n*t}(e,t)+function(e,t){var n=1-e;return 3*n*n*e*t}(e,n)+function(e,t){return 3*(1-e)*e*e*t}(e,r)+function(e,t){return e*e*e*t}(e,i)}function ka(){this.type="Curve",this.arcLengthDivisions=200}function Ba(e,t){ka.call(this),this.type="LineCurve",this.v1=e||new Nt,this.v2=t||new Nt}function Fa(){ka.call(this),this.type="CurvePath",this.curves=[],this.autoClose=!1}function ja(e,t,n,r,i,o,a,s){ka.call(this),this.type="EllipseCurve",this.aX=e||0,this.aY=t||0,this.xRadius=n||1,this.yRadius=r||1,this.aStartAngle=i||0,this.aEndAngle=o||2*Math.PI,this.aClockwise=a||!1,this.aRotation=s||0}function za(e){ka.call(this),this.type="SplineCurve",this.points=e||[]}function Ga(e,t,n,r){ka.call(this),this.type="CubicBezierCurve",this.v0=e||new Nt,this.v1=t||new Nt,this.v2=n||new Nt,this.v3=r||new Nt}function Va(e,t,n){ka.call(this),this.type="QuadraticBezierCurve",this.v0=e||new Nt,this.v1=t||new Nt,this.v2=n||new Nt}Object.assign(ka.prototype,{getPoint:function(){return console.warn("THREE.Curve: .getPoint() not implemented."),null},getPointAt:function(e,t){var n=this.getUtoTmapping(e);return this.getPoint(n,t)},getPoints:function(e){void 0===e&&(e=5);for(var t=[],n=0;n<=e;n++)t.push(this.getPoint(n/e));return t},getSpacedPoints:function(e){void 0===e&&(e=5);for(var t=[],n=0;n<=e;n++)t.push(this.getPointAt(n/e));return t},getLength:function(){var e=this.getLengths();return e[e.length-1]},getLengths:function(e){if(void 0===e&&(e=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var t,n,r=[],i=this.getPoint(0),o=0;for(r.push(0),n=1;n<=e;n++)o+=(t=this.getPoint(n/e)).distanceTo(i),r.push(o),i=t;return this.cacheArcLengths=r,r},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(e,t){var n,r=this.getLengths(),i=0,o=r.length;n=t||e*r[o-1];for(var a,s=0,c=o-1;s<=c;)if((a=r[i=Math.floor(s+(c-s)/2)]-n)<0)s=i+1;else{if(!(a>0)){c=i;break}c=i-1}if(r[i=c]===n)return i/(o-1);var u=r[i];return(i+(n-u)/(r[i+1]-u))/(o-1)},getTangent:function(e){var t=e-1e-4,n=e+1e-4;t<0&&(t=0),n>1&&(n=1);var r=this.getPoint(t);return this.getPoint(n).clone().sub(r).normalize()},getTangentAt:function(e){var t=this.getUtoTmapping(e);return this.getTangent(t)},computeFrenetFrames:function(e,t){var n,r,i,o=new kt,a=[],s=[],c=[],u=new kt,l=new Dt;for(n=0;n<=e;n++)r=n/e,a[n]=this.getTangentAt(r),a[n].normalize();s[0]=new kt,c[0]=new kt;var h=Number.MAX_VALUE,d=Math.abs(a[0].x),p=Math.abs(a[0].y),f=Math.abs(a[0].z);for(d<=h&&(h=d,o.set(1,0,0)),p<=h&&(h=p,o.set(0,1,0)),f<=h&&o.set(0,0,1),u.crossVectors(a[0],o).normalize(),s[0].crossVectors(a[0],u),c[0].crossVectors(a[0],s[0]),n=1;n<=e;n++)s[n]=s[n-1].clone(),c[n]=c[n-1].clone(),u.crossVectors(a[n-1],a[n]),u.length()>Number.EPSILON&&(u.normalize(),i=Math.acos(It.clamp(a[n-1].dot(a[n]),-1,1)),s[n].applyMatrix4(l.makeRotationAxis(u,i))),c[n].crossVectors(a[n],s[n]);if(!0===t)for(i=Math.acos(It.clamp(s[0].dot(s[e]),-1,1)),i/=e,a[0].dot(u.crossVectors(s[0],s[e]))>0&&(i=-i),n=1;n<=e;n++)s[n].applyMatrix4(l.makeRotationAxis(a[n],i*n)),c[n].crossVectors(a[n],s[n]);return{tangents:a,normals:s,binormals:c}},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}),Ba.prototype=Object.create(ka.prototype),Ba.prototype.constructor=Ba,Ba.prototype.isLineCurve=!0,Ba.prototype.getPoint=function(e,t){var n=t||new Nt;return 1===e?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n},Ba.prototype.getPointAt=function(e,t){return this.getPoint(e,t)},Ba.prototype.getTangent=function(){return this.v2.clone().sub(this.v1).normalize()},Ba.prototype.copy=function(e){return ka.prototype.copy.call(this,e),this.v1.copy(e.v1),this.v2.copy(e.v2),this},Fa.prototype=Object.assign(Object.create(ka.prototype),{constructor:Fa,add:function(e){this.curves.push(e)},closePath:function(){var e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);e.equals(t)||this.curves.push(new Ba(t,e))},getPoint:function(e){for(var t=e*this.getLength(),n=this.getCurveLengths(),r=0;r<n.length;){if(n[r]>=t){var i=n[r]-t,o=this.curves[r],a=o.getLength(),s=0===a?0:1-i/a;return o.getPointAt(s)}r++}return null},getLength:function(){var e=this.getCurveLengths();return e[e.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var e=[],t=0,n=0,r=this.curves.length;n<r;n++)t+=this.curves[n].getLength(),e.push(t);return this.cacheLengths=e,e},getSpacedPoints:function(e){void 0===e&&(e=40);for(var t=[],n=0;n<=e;n++)t.push(this.getPoint(n/e));return this.autoClose&&t.push(t[0]),t},getPoints:function(e){e=e||12;for(var t,n=[],r=0,i=this.curves;r<i.length;r++)for(var o=i[r],a=o&&o.isEllipseCurve?2*e:o&&o.isLineCurve?1:o&&o.isSplineCurve?e*o.points.length:e,s=o.getPoints(a),c=0;c<s.length;c++){var u=s[c];t&&t.equals(u)||(n.push(u),t=u)}return this.autoClose&&n.length>1&&!n[n.length-1].equals(n[0])&&n.push(n[0]),n},copy:function(e){ka.prototype.copy.call(this,e),this.curves=[];for(var t=0,n=e.curves.length;t<n;t++){var r=e.curves[t];this.curves.push(r.clone())}return this.autoClose=e.autoClose,this}}),ja.prototype=Object.create(ka.prototype),ja.prototype.constructor=ja,ja.prototype.isEllipseCurve=!0,ja.prototype.getPoint=function(e,t){for(var n=t||new Nt,r=2*Math.PI,i=this.aEndAngle-this.aStartAngle,o=Math.abs(i)<Number.EPSILON;i<0;)i+=r;for(;i>r;)i-=r;i<Number.EPSILON&&(i=o?0:r),!0!==this.aClockwise||o||(i===r?i=-r:i-=r);var a=this.aStartAngle+e*i,s=this.aX+this.xRadius*Math.cos(a),c=this.aY+this.yRadius*Math.sin(a);if(0!==this.aRotation){var u=Math.cos(this.aRotation),l=Math.sin(this.aRotation),h=s-this.aX,d=c-this.aY;s=h*u-d*l+this.aX,c=h*l+d*u+this.aY}return n.set(s,c)},ja.prototype.copy=function(e){return ka.prototype.copy.call(this,e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this},za.prototype=Object.create(ka.prototype),za.prototype.constructor=za,za.prototype.isSplineCurve=!0,za.prototype.getPoint=function(e,t){var n=t||new Nt,r=this.points,i=(r.length-1)*e,o=Math.floor(i),a=i-o,s=r[0===o?o:o-1],c=r[o],u=r[o>r.length-2?r.length-1:o+1],l=r[o>r.length-3?r.length-1:o+2];return n.set(Na(a,s.x,c.x,u.x,l.x),Na(a,s.y,c.y,u.y,l.y)),n},za.prototype.copy=function(e){ka.prototype.copy.call(this,e),this.points=[];for(var t=0,n=e.points.length;t<n;t++){var r=e.points[t];this.points.push(r.clone())}return this},Ga.prototype=Object.create(ka.prototype),Ga.prototype.constructor=Ga,Ga.prototype.isCubicBezierCurve=!0,Ga.prototype.getPoint=function(e,t){var n=t||new Nt,r=this.v0,i=this.v1,o=this.v2,a=this.v3;return n.set(Ua(e,r.x,i.x,o.x,a.x),Ua(e,r.y,i.y,o.y,a.y)),n},Ga.prototype.copy=function(e){return ka.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this},Va.prototype=Object.create(ka.prototype),Va.prototype.constructor=Va,Va.prototype.isQuadraticBezierCurve=!0,Va.prototype.getPoint=function(e,t){var n=t||new Nt,r=this.v0,i=this.v1,o=this.v2;return n.set(Da(e,r.x,i.x,o.x),Da(e,r.y,i.y,o.y)),n},Va.prototype.copy=function(e){return ka.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this};var Ha,Wa=Object.assign(Object.create(Fa.prototype),{setFromPoints:function(e){this.moveTo(e[0].x,e[0].y);for(var t=1,n=e.length;t<n;t++)this.lineTo(e[t].x,e[t].y)},moveTo:function(e,t){this.currentPoint.set(e,t)},lineTo:function(e,t){var n=new Ba(this.currentPoint.clone(),new Nt(e,t));this.curves.push(n),this.currentPoint.set(e,t)},quadraticCurveTo:function(e,t,n,r){var i=new Va(this.currentPoint.clone(),new Nt(e,t),new Nt(n,r));this.curves.push(i),this.currentPoint.set(n,r)},bezierCurveTo:function(e,t,n,r,i,o){var a=new Ga(this.currentPoint.clone(),new Nt(e,t),new Nt(n,r),new Nt(i,o));this.curves.push(a),this.currentPoint.set(i,o)},splineThru:function(e){var t=new za([this.currentPoint.clone()].concat(e));this.curves.push(t),this.currentPoint.copy(e[e.length-1])},arc:function(e,t,n,r,i,o){var a=this.currentPoint.x,s=this.currentPoint.y;this.absarc(e+a,t+s,n,r,i,o)},absarc:function(e,t,n,r,i,o){this.absellipse(e,t,n,n,r,i,o)},ellipse:function(e,t,n,r,i,o,a,s){var c=this.currentPoint.x,u=this.currentPoint.y;this.absellipse(e+c,t+u,n,r,i,o,a,s)},absellipse:function(e,t,n,r,i,o,a,s){var c=new ja(e,t,n,r,i,o,a,s);if(this.curves.length>0){var u=c.getPoint(0);u.equals(this.currentPoint)||this.lineTo(u.x,u.y)}this.curves.push(c);var l=c.getPoint(1);this.currentPoint.copy(l)},copy:function(e){return Fa.prototype.copy.call(this,e),this.currentPoint.copy(e.currentPoint),this}});function Xa(e){Fa.call(this),this.type="Path",this.currentPoint=new Nt,e&&this.setFromPoints(e)}function qa(e){Xa.call(this,e),this.type="Shape",this.holes=[]}function Ya(){this.type="ShapePath",this.subPaths=[],this.currentPath=null}function Ka(e){this.type="Font",this.data=e}function Za(e){this.manager=void 0!==e?e:zo}Xa.prototype=Wa,Wa.constructor=Xa,qa.prototype=Object.assign(Object.create(Wa),{constructor:qa,getPointsHoles:function(e){for(var t=[],n=0,r=this.holes.length;n<r;n++)t[n]=this.holes[n].getPoints(e);return t},extractPoints:function(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}},copy:function(e){Xa.prototype.copy.call(this,e),this.holes=[];for(var t=0,n=e.holes.length;t<n;t++){var r=e.holes[t];this.holes.push(r.clone())}return this}}),Object.assign(Ya.prototype,{moveTo:function(e,t){this.currentPath=new Xa,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t)},lineTo:function(e,t){this.currentPath.lineTo(e,t)},quadraticCurveTo:function(e,t,n,r){this.currentPath.quadraticCurveTo(e,t,n,r)},bezierCurveTo:function(e,t,n,r,i,o){this.currentPath.bezierCurveTo(e,t,n,r,i,o)},splineThru:function(e){this.currentPath.splineThru(e)},toShapes:function(e,t){function n(e){for(var t=[],n=0,r=e.length;n<r;n++){var i=e[n],o=new qa;o.curves=i.curves,t.push(o)}return t}function r(e,t){for(var n=t.length,r=!1,i=n-1,o=0;o<n;i=o++){var a=t[i],s=t[o],c=s.x-a.x,u=s.y-a.y;if(Math.abs(u)>Number.EPSILON){if(u<0&&(a=t[o],c=-c,s=t[i],u=-u),e.y<a.y||e.y>s.y)continue;if(e.y===a.y){if(e.x===a.x)return!0}else{var l=u*(e.x-a.x)-c*(e.y-a.y);if(0===l)return!0;if(l<0)continue;r=!r}}else{if(e.y!==a.y)continue;if(s.x<=e.x&&e.x<=a.x||a.x<=e.x&&e.x<=s.x)return!0}}return r}var i=so.isClockWise,o=this.subPaths;if(0===o.length)return[];if(!0===t)return n(o);var a,s,c,u=[];if(1===o.length)return s=o[0],(c=new qa).curves=s.curves,u.push(c),u;var l=!i(o[0].getPoints());l=e?!l:l;var h,d,p=[],f=[],m=[],v=0;f[v]=void 0,m[v]=[];for(var g=0,y=o.length;g<y;g++)a=i(h=(s=o[g]).getPoints()),(a=e?!a:a)?(!l&&f[v]&&v++,f[v]={s:new qa,p:h},f[v].s.curves=s.curves,l&&v++,m[v]=[]):m[v].push({h:s,p:h[0]});if(!f[0])return n(o);if(f.length>1){for(var b=!1,x=[],_=0,w=f.length;_<w;_++)p[_]=[];for(_=0,w=f.length;_<w;_++)for(var E=m[_],M=0;M<E.length;M++){for(var T=E[M],S=!0,A=0;A<f.length;A++)r(T.p,f[A].p)&&(_!==A&&x.push({froms:_,tos:A,hole:M}),S?(S=!1,p[A].push(T)):b=!0);S&&p[_].push(T)}x.length>0&&(b||(m=p))}g=0;for(var R=f.length;g<R;g++){c=f[g].s,u.push(c);for(var P=0,L=(d=m[g]).length;P<L;P++)c.holes.push(d[P].h)}return u}}),Object.assign(Ka.prototype,{isFont:!0,generateShapes:function(e,t,n){function r(e,t,r,o){var a=i.glyphs[e]||i.glyphs["?"];if(a){var s,c,u,l,h,d,p,f,m,v,g,y=new Ya,b=[];if(a.o)for(var x=a._cachedOutline||(a._cachedOutline=a.o.split(" ")),_=0,w=x.length;_<w;){switch(x[_++]){case"m":s=x[_++]*t+r,c=x[_++]*t+o,y.moveTo(s,c);break;case"l":s=x[_++]*t+r,c=x[_++]*t+o,y.lineTo(s,c);break;case"q":if(u=x[_++]*t+r,l=x[_++]*t+o,p=x[_++]*t+r,f=x[_++]*t+o,y.quadraticCurveTo(p,f,u,l),g=b[b.length-1]){h=g.x,d=g.y;for(var E=1;E<=n;E++){Da(M=E/n,h,p,u),Da(M,d,f,l)}}break;case"b":if(u=x[_++]*t+r,l=x[_++]*t+o,p=x[_++]*t+r,f=x[_++]*t+o,m=x[_++]*t+r,v=x[_++]*t+o,y.bezierCurveTo(p,f,m,v,u,l),g=b[b.length-1]){h=g.x,d=g.y;for(E=1;E<=n;E++){var M;Ua(M=E/n,h,p,m,u),Ua(M,d,f,v,l)}}}}return{offsetX:a.ha*t,path:y}}}void 0===t&&(t=100),void 0===n&&(n=4);for(var i=this.data,o=function(e){for(var n=String(e).split(""),o=t/i.resolution,a=(i.boundingBox.yMax-i.boundingBox.yMin+i.underlineThickness)*o,s=0,c=0,u=[],l=0;l<n.length;l++){var h=n[l];if("\n"===h)s=0,c-=a;else{var d=r(h,o,s,c);s+=d.offsetX,u.push(d.path)}}return u}(e),a=[],s=0,c=o.length;s<c;s++)Array.prototype.push.apply(a,o[s].toShapes());return a}}),Object.assign(Za.prototype,{load:function(e,t,n,r){var i=this,o=new Vo(this.manager);o.setPath(this.path),o.load(e,function(e){var n;try{n=JSON.parse(e)}catch(t){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),n=JSON.parse(e.substring(65,e.length-2))}var r=i.parse(n);t&&t(r)},n,r)},parse:function(e){return new Ka(e)},setPath:function(e){return this.path=e,this}});var Qa,Ja,$a,es,ts,ns,rs,is,os,as,ss,cs,us,ls,hs,ds,ps={getContext:function(){return void 0===Ha&&(Ha=new(window.AudioContext||window.webkitAudioContext)),Ha},setContext:function(e){Ha=e}};function fs(e){this.manager=void 0!==e?e:zo}function ms(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new yi,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new yi,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1}function vs(e,t,n){dr.call(this),this.type="CubeCamera";var r=new yi(90,1,e,t);r.up.set(0,-1,0),r.lookAt(new kt(1,0,0)),this.add(r);var i=new yi(90,1,e,t);i.up.set(0,-1,0),i.lookAt(new kt(-1,0,0)),this.add(i);var o=new yi(90,1,e,t);o.up.set(0,0,1),o.lookAt(new kt(0,1,0)),this.add(o);var a=new yi(90,1,e,t);a.up.set(0,0,-1),a.lookAt(new kt(0,-1,0)),this.add(a);var s=new yi(90,1,e,t);s.up.set(0,-1,0),s.lookAt(new kt(0,0,1)),this.add(s);var c=new yi(90,1,e,t);c.up.set(0,-1,0),c.lookAt(new kt(0,0,-1)),this.add(c);var u={format:Ke,magFilter:Ie,minFilter:Ie};this.renderTarget=new Vt(n,n,u),this.renderTarget.texture.name="CubeCamera",this.update=function(e,t){null===this.parent&&this.updateMatrixWorld();var n=this.renderTarget,u=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,n.activeCubeFace=0,e.render(t,r,n),n.activeCubeFace=1,e.render(t,i,n),n.activeCubeFace=2,e.render(t,o,n),n.activeCubeFace=3,e.render(t,a,n),n.activeCubeFace=4,e.render(t,s,n),n.texture.generateMipmaps=u,n.activeCubeFace=5,e.render(t,c,n),e.setRenderTarget(null)},this.clear=function(e,t,n,r){for(var i=this.renderTarget,o=0;o<6;o++)i.activeCubeFace=o,e.setRenderTarget(i),e.clear(t,n,r);e.setRenderTarget(null)}}function gs(){dr.call(this),this.type="AudioListener",this.context=ps.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null}function ys(e){dr.call(this),this.type="Audio",this.context=e.context,this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.buffer=null,this.loop=!1,this.startTime=0,this.offset=0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType="empty",this.filters=[]}function bs(e){ys.call(this,e),this.panner=this.context.createPanner(),this.panner.connect(this.gain)}function xs(e,t){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=void 0!==t?t:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)}function _s(e,t,n){this.binding=e,this.valueSize=n;var r,i=Float64Array;switch(t){case"quaternion":r=this._slerp;break;case"string":case"bool":i=Array,r=this._select;break;default:r=this._lerp}this.buffer=new i(4*n),this._mixBufferRegion=r,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0}function ws(e,t,n){var r=n||Es.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,r)}function Es(e,t,n){this.path=t,this.parsedPath=n||Es.parseTrackName(t),this.node=Es.findNode(e,this.parsedPath.nodeName)||e,this.rootNode=e}function Ms(){this.uuid=It.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var e={};this._indicesByUUID=e;for(var t=0,n=arguments.length;t!==n;++t)e[arguments[t].uuid]=t;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var r=this;this.stats={objects:{get total(){return r._objects.length},get inUse(){return this.total-r.nCachedObjects_}},get bindingsPerObject(){return r._bindings.length}}}function Ts(e,t,n){this._mixer=e,this._clip=t,this._localRoot=n||null;for(var r=t.tracks,i=r.length,o=new Array(i),a={endingStart:gt,endingEnd:gt},s=0;s!==i;++s){var c=r[s].createInterpolant(null);o[s]=c,c.settings=a}this._interpolantSettings=a,this._interpolants=o,this._propertyBindings=new Array(i),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=dt,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}function Ss(e){this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}function As(e){"string"==typeof e&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),e=arguments[1]),this.value=e}function Rs(){Fr.call(this),this.type="InstancedBufferGeometry",this.maxInstancedCount=void 0}function Ps(e,t,n,r){this.uuid=It.generateUUID(),this.data=e,this.itemSize=t,this.offset=n,this.normalized=!0===r}function Ls(e,t){this.uuid=It.generateUUID(),this.array=e,this.stride=t,this.count=void 0!==e?e.length/t:0,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.onUploadCallback=function(){},this.version=0}function Cs(e,t,n){Ls.call(this,e,t),this.meshPerAttribute=n||1}function Os(e,t,n){br.call(this,e,t),this.meshPerAttribute=n||1}function Is(e,t,n,r){this.ray=new Xr(e,t),this.near=n||0,this.far=r||1/0,this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})}function Ns(e,t){return e.distance-t.distance}function Ds(e,t,n,r){if(!1!==e.visible&&(e.raycast(t,n),!0===r))for(var i=e.children,o=0,a=i.length;o<a;o++)Ds(i[o],t,n,!0)}function Us(e){this.autoStart=void 0===e||e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}function ks(e,t,n){return this.radius=void 0!==e?e:1,this.phi=void 0!==t?t:0,this.theta=void 0!==n?n:0,this}function Bs(e,t,n){return this.radius=void 0!==e?e:1,this.theta=void 0!==t?t:0,this.y=void 0!==n?n:0,this}function Fs(e){dr.call(this),this.material=e,this.render=function(){}}function js(e,t,n,r){this.object=e,this.size=void 0!==t?t:1;var i=void 0!==n?n:16711680,o=void 0!==r?r:1,a=0,s=this.object.geometry;s&&s.isGeometry?a=3*s.faces.length:s&&s.isBufferGeometry&&(a=s.attributes.normal.count);var c=new Fr,u=new Ar(2*a*3,3);c.addAttribute("position",u),Ni.call(this,c,new Oi({color:i,linewidth:o})),this.matrixAutoUpdate=!1,this.update()}function zs(e,t){dr.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=t;for(var n=new Fr,r=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],i=0,o=1;i<32;i++,o++){var a=i/32*Math.PI*2,s=o/32*Math.PI*2;r.push(Math.cos(a),Math.sin(a),1,Math.cos(s),Math.sin(s),1)}n.addAttribute("position",new Ar(r,3));var c=new Oi({fog:!1});this.cone=new Ni(n,c),this.add(this.cone),this.update()}function Gs(e){for(var t=function e(t){var n=[];t&&t.isBone&&n.push(t);for(var r=0;r<t.children.length;r++)n.push.apply(n,e(t.children[r]));return n}(e),n=new Fr,r=[],i=[],o=new In(0,0,1),a=new In(0,1,0),s=0;s<t.length;s++){var c=t[s];c.parent&&c.parent.isBone&&(r.push(0,0,0),r.push(0,0,0),i.push(o.r,o.g,o.b),i.push(a.r,a.g,a.b))}n.addAttribute("position",new Ar(r,3)),n.addAttribute("color",new Ar(i,3));var u=new Oi({vertexColors:N,depthTest:!1,depthWrite:!1,transparent:!0});Ni.call(this,n,u),this.root=e,this.bones=t,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1}function Vs(e,t,n){this.light=e,this.light.updateMatrixWorld(),this.color=n;var r=new fo(t,4,2),i=new Hr({wireframe:!0,fog:!1});Kr.call(this,r,i),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}function Hs(e,t){dr.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=t;var n=new Oi({fog:!1}),r=new Fr;r.addAttribute("position",new br(new Float32Array(15),3)),this.line=new Ii(r,n),this.add(this.line),this.update()}function Ws(e,t,n){dr.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=n;var r=new Zi(t);r.rotateY(.5*Math.PI),this.material=new Hr({wireframe:!0,fog:!1}),void 0===this.color&&(this.material.vertexColors=N);var i=r.getAttribute("position"),o=new Float32Array(3*i.count);r.addAttribute("color",new br(o,3)),this.add(new Kr(r,this.material)),this.update()}function Xs(e,t,n,r){e=e||10,t=t||10,n=new In(void 0!==n?n:4473924),r=new In(void 0!==r?r:8947848);for(var i=t/2,o=e/t,a=e/2,s=[],c=[],u=0,l=0,h=-a;u<=t;u++,h+=o){s.push(-a,0,h,a,0,h),s.push(h,0,-a,h,0,a);var d=u===i?n:r;d.toArray(c,l),l+=3,d.toArray(c,l),l+=3,d.toArray(c,l),l+=3,d.toArray(c,l),l+=3}var p=new Fr;p.addAttribute("position",new Ar(s,3)),p.addAttribute("color",new Ar(c,3));var f=new Oi({vertexColors:N});Ni.call(this,p,f)}function qs(e,t,n,r,i,o){e=e||10,t=t||16,n=n||8,r=r||64,i=new In(void 0!==i?i:4473924),o=new In(void 0!==o?o:8947848);var a,s,c,u,l,h,d,p=[],f=[];for(u=0;u<=t;u++)c=u/t*(2*Math.PI),a=Math.sin(c)*e,s=Math.cos(c)*e,p.push(0,0,0),p.push(a,0,s),d=1&u?i:o,f.push(d.r,d.g,d.b),f.push(d.r,d.g,d.b);for(u=0;u<=n;u++)for(d=1&u?i:o,h=e-e/n*u,l=0;l<r;l++)c=l/r*(2*Math.PI),a=Math.sin(c)*h,s=Math.cos(c)*h,p.push(a,0,s),f.push(d.r,d.g,d.b),c=(l+1)/r*(2*Math.PI),a=Math.sin(c)*h,s=Math.cos(c)*h,p.push(a,0,s),f.push(d.r,d.g,d.b);var m=new Fr;m.addAttribute("position",new Ar(p,3)),m.addAttribute("color",new Ar(f,3));var v=new Oi({vertexColors:N});Ni.call(this,m,v)}function Ys(e,t,n,r){this.object=e,this.size=void 0!==t?t:1;var i=void 0!==n?n:16776960,o=void 0!==r?r:1,a=0,s=this.object.geometry;s&&s.isGeometry?a=s.faces.length:console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");var c=new Fr,u=new Ar(2*a*3,3);c.addAttribute("position",u),Ni.call(this,c,new Oi({color:i,linewidth:o})),this.matrixAutoUpdate=!1,this.update()}function Ks(e,t,n){dr.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,void 0===t&&(t=1);var r=new Fr;r.addAttribute("position",new Ar([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));var i=new Oi({fog:!1});this.lightPlane=new Ii(r,i),this.add(this.lightPlane),(r=new Fr).addAttribute("position",new Ar([0,0,0,0,0,1],3)),this.targetLine=new Ii(r,i),this.add(this.targetLine),this.update()}function Zs(e){var t=new Fr,n=new Oi({color:16777215,vertexColors:I}),r=[],i=[],o={},a=new In(16755200),s=new In(16711680),c=new In(43775),u=new In(16777215),l=new In(3355443);function h(e,t,n){d(e,n),d(t,n)}function d(e,t){r.push(0,0,0),i.push(t.r,t.g,t.b),void 0===o[e]&&(o[e]=[]),o[e].push(r.length/3-1)}h("n1","n2",a),h("n2","n4",a),h("n4","n3",a),h("n3","n1",a),h("f1","f2",a),h("f2","f4",a),h("f4","f3",a),h("f3","f1",a),h("n1","f1",a),h("n2","f2",a),h("n3","f3",a),h("n4","f4",a),h("p","n1",s),h("p","n2",s),h("p","n3",s),h("p","n4",s),h("u1","u2",c),h("u2","u3",c),h("u3","u1",c),h("c","t",u),h("p","c",l),h("cn1","cn2",l),h("cn3","cn4",l),h("cf1","cf2",l),h("cf3","cf4",l),t.addAttribute("position",new Ar(r,3)),t.addAttribute("color",new Ar(i,3)),Ni.call(this,t,n),this.camera=e,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=o,this.update()}function Qs(e,t){this.object=e,void 0===t&&(t=16776960);var n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),r=new Float32Array(24),i=new Fr;i.setIndex(new br(n,1)),i.addAttribute("position",new br(r,3)),Ni.call(this,i,new Oi({color:t})),this.matrixAutoUpdate=!1,this.update()}function Js(e,t){this.type="Box3Helper",this.box=e;var n=void 0!==t?t:16776960,r=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new Fr;i.setIndex(new br(r,1)),i.addAttribute("position",new Ar([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),Ni.call(this,i,new Oi({color:n})),this.geometry.computeBoundingSphere()}function $s(e,t,n){this.type="PlaneHelper",this.plane=e,this.size=void 0===t?1:t;var r=void 0!==n?n:16776960,i=new Fr;i.addAttribute("position",new Ar([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3)),i.computeBoundingSphere(),Ii.call(this,i,new Oi({color:r}));var o=new Fr;o.addAttribute("position",new Ar([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3)),o.computeBoundingSphere(),this.add(new Kr(o,new Hr({color:r,opacity:.2,transparent:!0,depthWrite:!1})))}function ec(e,t,n,r,i,o){dr.call(this),void 0===r&&(r=16776960),void 0===n&&(n=1),void 0===i&&(i=.2*n),void 0===o&&(o=.2*i),void 0===us&&((us=new Fr).addAttribute("position",new Ar([0,0,0,0,1,0],3)),(ls=new Eo(0,.5,1,5,1)).translate(0,-.5,0)),this.position.copy(t),this.line=new Ii(us,new Oi({color:r})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new Kr(ls,new Hr({color:r})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e),this.setLength(n,i,o)}function tc(e){var t=[0,0,0,e=e||1,0,0,0,0,0,0,e,0,0,0,0,0,0,e],n=new Fr;n.addAttribute("position",new Ar(t,3)),n.addAttribute("color",new Ar([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));var r=new Oi({vertexColors:N});Ni.call(this,n,r)}function nc(){var e=0,t=0,n=0,r=0;function i(i,o,a,s){e=i,t=a,n=-3*i+3*o-2*a-s,r=2*i-2*o+a+s}return{initCatmullRom:function(e,t,n,r,o){i(t,n,o*(n-e),o*(r-t))},initNonuniformCatmullRom:function(e,t,n,r,o,a,s){var c=(t-e)/o-(n-e)/(o+a)+(n-t)/a,u=(n-t)/a-(r-t)/(a+s)+(r-n)/s;i(t,n,c*=a,u*=a)},calc:function(i){var o=i*i;return e+t*i+n*o+r*(o*i)}}}Object.assign(fs.prototype,{load:function(e,t,n,r){var i=new Vo(this.manager);i.setResponseType("arraybuffer"),i.load(e,function(e){ps.getContext().decodeAudioData(e,function(e){t(e)})},n,r)}}),Object.assign(ms.prototype,{update:(os=new Dt,as=new Dt,function(e){if(Qa!==this||Ja!==e.focus||$a!==e.fov||es!==e.aspect*this.aspect||ts!==e.near||ns!==e.far||rs!==e.zoom||is!==this.eyeSep){Qa=this,Ja=e.focus,$a=e.fov,es=e.aspect*this.aspect,ts=e.near,ns=e.far,rs=e.zoom;var t,n,r=e.projectionMatrix.clone(),i=(is=this.eyeSep/2)*ts/Ja,o=ts*Math.tan(It.DEG2RAD*$a*.5)/rs;as.elements[12]=-is,os.elements[12]=is,t=-o*es+i,n=o*es+i,r.elements[0]=2*ts/(n-t),r.elements[8]=(n+t)/(n-t),this.cameraL.projectionMatrix.copy(r),t=-o*es-i,n=o*es-i,r.elements[0]=2*ts/(n-t),r.elements[8]=(n+t)/(n-t),this.cameraR.projectionMatrix.copy(r)}this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(as),this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(os)})}),vs.prototype=Object.create(dr.prototype),vs.prototype.constructor=vs,gs.prototype=Object.assign(Object.create(dr.prototype),{constructor:gs,getInput:function(){return this.gain},removeFilter:function(){null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null)},getFilter:function(){return this.filter},setFilter:function(e){null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination)},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(e){this.gain.gain.value=e},updateMatrixWorld:function(){var e=new kt,t=new Ut,n=new kt,r=new kt;return function(i){dr.prototype.updateMatrixWorld.call(this,i);var o=this.context.listener,a=this.up;this.matrixWorld.decompose(e,t,n),r.set(0,0,-1).applyQuaternion(t),o.positionX?(o.positionX.setValueAtTime(e.x,this.context.currentTime),o.positionY.setValueAtTime(e.y,this.context.currentTime),o.positionZ.setValueAtTime(e.z,this.context.currentTime),o.forwardX.setValueAtTime(r.x,this.context.currentTime),o.forwardY.setValueAtTime(r.y,this.context.currentTime),o.forwardZ.setValueAtTime(r.z,this.context.currentTime),o.upX.setValueAtTime(a.x,this.context.currentTime),o.upY.setValueAtTime(a.y,this.context.currentTime),o.upZ.setValueAtTime(a.z,this.context.currentTime)):(o.setPosition(e.x,e.y,e.z),o.setOrientation(r.x,r.y,r.z,a.x,a.y,a.z))}}()}),ys.prototype=Object.assign(Object.create(dr.prototype),{constructor:ys,getOutput:function(){return this.gain},setNodeSource:function(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this},setBuffer:function(e){return this.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this},play:function(){if(!0!==this.isPlaying){if(!1!==this.hasPlaybackControl){var e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.onended=this.onEnded.bind(this),e.playbackRate.setValueAtTime(this.playbackRate,this.startTime),this.startTime=this.context.currentTime,e.start(this.startTime,this.offset),this.isPlaying=!0,this.source=e,this.connect()}console.warn("THREE.Audio: this Audio has no playback control.")}else console.warn("THREE.Audio: Audio is already playing.")},pause:function(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this.source.stop(),this.offset+=(this.context.currentTime-this.startTime)*this.playbackRate,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")},stop:function(){if(!1!==this.hasPlaybackControl)return this.source.stop(),this.offset=0,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var e=1,t=this.filters.length;e<t;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var e=1,t=this.filters.length;e<t;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(e){return e||(e=[]),!0===this.isPlaying?(this.disconnect(),this.filters=e,this.connect()):this.filters=e,this},getFilter:function(){return this.getFilters()[0]},setFilter:function(e){return this.setFilters(e?[e]:[])},setPlaybackRate:function(e){if(!1!==this.hasPlaybackControl)return this.playbackRate=e,!0===this.isPlaying&&this.source.playbackRate.setValueAtTime(this.playbackRate,this.context.currentTime),this;console.warn("THREE.Audio: this Audio has no playback control.")},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop},setLoop:function(e){if(!1!==this.hasPlaybackControl)return this.loop=e,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")},getVolume:function(){return this.gain.gain.value},setVolume:function(e){return this.gain.gain.value=e,this}}),bs.prototype=Object.assign(Object.create(ys.prototype),{constructor:bs,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(e){this.panner.refDistance=e},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(e){this.panner.rolloffFactor=e},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(e){this.panner.distanceModel=e},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(e){this.panner.maxDistance=e},updateMatrixWorld:function(){var e=new kt;return function(t){dr.prototype.updateMatrixWorld.call(this,t),e.setFromMatrixPosition(this.matrixWorld),this.panner.setPosition(e.x,e.y,e.z)}}()}),Object.assign(xs.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var e=0,t=this.getFrequencyData(),n=0;n<t.length;n++)e+=t[n];return e/t.length}}),Object.assign(_s.prototype,{accumulate:function(e,t){var n=this.buffer,r=this.valueSize,i=e*r+r,o=this.cumulativeWeight;if(0===o){for(var a=0;a!==r;++a)n[i+a]=n[a];o=t}else{var s=t/(o+=t);this._mixBufferRegion(n,i,0,s,r)}this.cumulativeWeight=o},apply:function(e){var t=this.valueSize,n=this.buffer,r=e*t+t,i=this.cumulativeWeight,o=this.binding;if(this.cumulativeWeight=0,i<1){var a=3*t;this._mixBufferRegion(n,r,a,1-i,t)}for(var s=t,c=t+t;s!==c;++s)if(n[s]!==n[s+t]){o.setValue(n,r);break}},saveOriginalState:function(){var e=this.binding,t=this.buffer,n=this.valueSize,r=3*n;e.getValue(t,r);for(var i=n,o=r;i!==o;++i)t[i]=t[r+i%n];this.cumulativeWeight=0},restoreOriginalState:function(){var e=3*this.valueSize;this.binding.setValue(this.buffer,e)},_select:function(e,t,n,r,i){if(r>=.5)for(var o=0;o!==i;++o)e[t+o]=e[n+o]},_slerp:function(e,t,n,r){Ut.slerpFlat(e,t,e,t,e,n,r)},_lerp:function(e,t,n,r,i){for(var o=1-r,a=0;a!==i;++a){var s=t+a;e[s]=e[s]*o+e[n+a]*r}}}),Object.assign(ws.prototype,{getValue:function(e,t){this.bind();var n=this._targetGroup.nCachedObjects_,r=this._bindings[n];void 0!==r&&r.getValue(e,t)},setValue:function(e,t){for(var n=this._bindings,r=this._targetGroup.nCachedObjects_,i=n.length;r!==i;++r)n[r].setValue(e,t)},bind:function(){for(var e=this._bindings,t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].bind()},unbind:function(){for(var e=this._bindings,t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].unbind()}}),Object.assign(Es,{Composite:ws,create:function(e,t,n){return e&&e.isAnimationObjectGroup?new Es.Composite(e,t,n):new Es(e,t,n)},sanitizeNodeName:function(e){return e.replace(/\s/g,"_").replace(/[^\w-]/g,"")},parseTrackName:(ss=new RegExp("^"+/((?:[\w-]+[\/:])*)/.source+/([\w-\.]+)?/.source+/(?:\.([\w-]+)(?:\[(.+)\])?)?/.source+/\.([\w-]+)(?:\[(.+)\])?/.source+"$"),cs=["material","materials","bones"],function(e){var t=ss.exec(e);if(!t)throw new Error("PropertyBinding: Cannot parse trackName: "+e);var n={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},r=n.nodeName&&n.nodeName.lastIndexOf(".");if(void 0!==r&&-1!==r){var i=n.nodeName.substring(r+1);-1!==cs.indexOf(i)&&(n.nodeName=n.nodeName.substring(0,r),n.objectName=i)}if(null===n.propertyName||0===n.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return n}),findNode:function(e,t){if(!t||""===t||"root"===t||"."===t||-1===t||t===e.name||t===e.uuid)return e;if(e.skeleton){var n=function(e){for(var n=0;n<e.bones.length;n++){var r=e.bones[n];if(r.name===t)return r}return null}(e.skeleton);if(n)return n}if(e.children){var r=function(e){for(var n=0;n<e.length;n++){var i=e[n];if(i.name===t||i.uuid===t)return i;var o=r(i.children);if(o)return o}return null},i=r(e.children);if(i)return i}return null}}),Object.assign(Es.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(e,t){e[t]=this.node[this.propertyName]},function(e,t){for(var n=this.resolvedProperty,r=0,i=n.length;r!==i;++r)e[t++]=n[r]},function(e,t){e[t]=this.resolvedProperty[this.propertyIndex]},function(e,t){this.resolvedProperty.toArray(e,t)}],SetterByBindingTypeAndVersioning:[[function(e,t){this.targetObject[this.propertyName]=e[t]},function(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0},function(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){for(var n=this.resolvedProperty,r=0,i=n.length;r!==i;++r)n[r]=e[t++]},function(e,t){for(var n=this.resolvedProperty,r=0,i=n.length;r!==i;++r)n[r]=e[t++];this.targetObject.needsUpdate=!0},function(e,t){for(var n=this.resolvedProperty,r=0,i=n.length;r!==i;++r)n[r]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){this.resolvedProperty[this.propertyIndex]=e[t]},function(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0},function(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){this.resolvedProperty.fromArray(e,t)},function(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0},function(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(e,t){this.bind(),this.getValue(e,t)},setValue:function(e,t){this.bind(),this.setValue(e,t)},bind:function(){var e=this.node,t=this.parsedPath,n=t.objectName,r=t.propertyName,i=t.propertyIndex;if(e||(e=Es.findNode(this.rootNode,t.nodeName)||this.rootNode,this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,e){if(n){var o=t.objectIndex;switch(n){case"materials":if(!e.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!e.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);e=e.material.materials;break;case"bones":if(!e.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);e=e.skeleton.bones;for(var a=0;a<e.length;a++)if(e[a].name===o){o=a;break}break;default:if(void 0===e[n])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);e=e[n]}if(void 0!==o){if(void 0===e[o])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);e=e[o]}}var s=e[r];if(void 0!==s){var c=this.Versioning.None;void 0!==e.needsUpdate?(c=this.Versioning.NeedsUpdate,this.targetObject=e):void 0!==e.matrixWorldNeedsUpdate&&(c=this.Versioning.MatrixWorldNeedsUpdate,this.targetObject=e);var u=this.BindingType.Direct;if(void 0!==i){if("morphTargetInfluences"===r){if(!e.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(e.geometry.isBufferGeometry){if(!e.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);for(a=0;a<this.node.geometry.morphAttributes.position.length;a++)if(e.geometry.morphAttributes.position[a].name===i){i=a;break}}else{if(!e.geometry.morphTargets)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.",this);for(a=0;a<this.node.geometry.morphTargets.length;a++)if(e.geometry.morphTargets[a].name===i){i=a;break}}}u=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=i}else void 0!==s.fromArray&&void 0!==s.toArray?(u=this.BindingType.HasFromToArray,this.resolvedProperty=s):Array.isArray(s)?(u=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=r;this.getValue=this.GetterByBindingType[u],this.setValue=this.SetterByBindingTypeAndVersioning[u][c]}else{var l=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+l+"."+r+" but it wasn't found.",e)}}else console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.")},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}),
//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign(Es.prototype,{_getValue_unbound:Es.prototype.getValue,_setValue_unbound:Es.prototype.setValue}),Object.assign(Ms.prototype,{isAnimationObjectGroup:!0,add:function(){for(var e=this._objects,t=e.length,n=this.nCachedObjects_,r=this._indicesByUUID,i=this._paths,o=this._parsedPaths,a=this._bindings,s=a.length,c=0,u=arguments.length;c!==u;++c){var l=arguments[c],h=l.uuid,d=r[h],p=void 0;if(void 0===d){d=t++,r[h]=d,e.push(l);for(var f=0,m=s;f!==m;++f)a[f].push(new Es(l,i[f],o[f]))}else if(d<n){p=e[d];var v=--n,g=e[v];r[g.uuid]=d,e[d]=g,r[h]=v,e[v]=l;for(f=0,m=s;f!==m;++f){var y=a[f],b=y[v],x=y[d];y[d]=b,void 0===x&&(x=new Es(l,i[f],o[f])),y[v]=x}}else e[d]!==p&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=n},remove:function(){for(var e=this._objects,t=this.nCachedObjects_,n=this._indicesByUUID,r=this._bindings,i=r.length,o=0,a=arguments.length;o!==a;++o){var s=arguments[o],c=s.uuid,u=n[c];if(void 0!==u&&u>=t){var l=t++,h=e[l];n[h.uuid]=u,e[u]=h,n[c]=l,e[l]=s;for(var d=0,p=i;d!==p;++d){var f=r[d],m=f[l],v=f[u];f[u]=m,f[l]=v}}}this.nCachedObjects_=t},uncache:function(){for(var e=this._objects,t=e.length,n=this.nCachedObjects_,r=this._indicesByUUID,i=this._bindings,o=i.length,a=0,s=arguments.length;a!==s;++a){var c=arguments[a].uuid,u=r[c];if(void 0!==u)if(delete r[c],u<n){var l=--n,h=e[l],d=e[g=--t];r[h.uuid]=u,e[u]=h,r[d.uuid]=l,e[l]=d,e.pop();for(var p=0,f=o;p!==f;++p){var m=(y=i[p])[l],v=y[g];y[u]=m,y[l]=v,y.pop()}}else{var g;r[(d=e[g=--t]).uuid]=u,e[u]=d,e.pop();for(p=0,f=o;p!==f;++p){var y;(y=i[p])[u]=y[g],y.pop()}}}this.nCachedObjects_=n},subscribe_:function(e,t){var n=this._bindingsIndicesByPath,r=n[e],i=this._bindings;if(void 0!==r)return i[r];var o=this._paths,a=this._parsedPaths,s=this._objects,c=s.length,u=this.nCachedObjects_,l=new Array(c);r=i.length,n[e]=r,o.push(e),a.push(t),i.push(l);for(var h=u,d=s.length;h!==d;++h){var p=s[h];l[h]=new Es(p,e,t)}return l},unsubscribe_:function(e){var t=this._bindingsIndicesByPath,n=t[e];if(void 0!==n){var r=this._paths,i=this._parsedPaths,o=this._bindings,a=o.length-1,s=o[a];t[e[a]]=n,o[n]=s,o.pop(),i[n]=i[a],i.pop(),r[n]=r[a],r.pop()}}}),Object.assign(Ts.prototype,{play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(e){return this._startTime=e,this},setLoop:function(e,t){return this.loop=e,this.repetitions=t,this},setEffectiveWeight:function(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(e){return this._scheduleFading(e,0,1)},fadeOut:function(e){return this._scheduleFading(e,1,0)},crossFadeFrom:function(e,t,n){if(e.fadeOut(t),this.fadeIn(t),n){var r=this._clip.duration,i=e._clip.duration,o=i/r,a=r/i;e.warp(1,o,t),this.warp(a,1,t)}return this},crossFadeTo:function(e,t,n){return e.crossFadeFrom(this,t,n)},stopFading:function(){var e=this._weightInterpolant;return null!==e&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},setEffectiveTimeScale:function(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(e){return this.timeScale=this._clip.duration/e,this.stopWarping()},syncWith:function(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()},halt:function(e){return this.warp(this._effectiveTimeScale,0,e)},warp:function(e,t,n){var r=this._mixer,i=r.time,o=this._timeScaleInterpolant,a=this.timeScale;null===o&&(o=r._lendControlInterpolant(),this._timeScaleInterpolant=o);var s=o.parameterPositions,c=o.sampleValues;return s[0]=i,s[1]=i+n,c[0]=e/a,c[1]=t/a,this},stopWarping:function(){var e=this._timeScaleInterpolant;return null!==e&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(e,t,n,r){if(this.enabled){var i=this._startTime;if(null!==i){var o=(e-i)*n;if(o<0||0===n)return;this._startTime=null,t=n*o}t*=this._updateTimeScale(e);var a=this._updateTime(t),s=this._updateWeight(e);if(s>0)for(var c=this._interpolants,u=this._propertyBindings,l=0,h=c.length;l!==h;++l)c[l].evaluate(a),u[l].accumulate(r,s)}else this._updateWeight(e)},_updateWeight:function(e){var t=0;if(this.enabled){t=this.weight;var n=this._weightInterpolant;if(null!==n){var r=n.evaluate(e)[0];t*=r,e>n.parameterPositions[1]&&(this.stopFading(),0===r&&(this.enabled=!1))}}return this._effectiveWeight=t,t},_updateTimeScale:function(e){var t=0;if(!this.paused){t=this.timeScale;var n=this._timeScaleInterpolant;if(null!==n)t*=n.evaluate(e)[0],e>n.parameterPositions[1]&&(this.stopWarping(),0===t?this.paused=!0:this.timeScale=t)}return this._effectiveTimeScale=t,t},_updateTime:function(e){var t=this.time+e;if(0===e)return t;var n=this._clip.duration,r=this.loop,i=this._loopCount;if(r===ht){-1===i&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(t>=n)t=n;else{if(!(t<0))break e;t=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{var o=r===pt;if(-1===i&&(e>=0?(i=0,this._setEndings(!0,0===this.repetitions,o)):this._setEndings(0===this.repetitions,!0,o)),t>=n||t<0){var a=Math.floor(t/n);t-=n*a,i+=Math.abs(a);var s=this.repetitions-i;if(s<0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,t=e>0?n:0,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(0===s){var c=e<0;this._setEndings(c,!c,o)}else this._setEndings(!1,!1,o);this._loopCount=i,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:a})}}if(o&&1==(1&i))return this.time=t,n-t}return this.time=t,t},_setEndings:function(e,t,n){var r=this._interpolantSettings;n?(r.endingStart=yt,r.endingEnd=yt):(r.endingStart=e?this.zeroSlopeAtStart?yt:gt:bt,r.endingEnd=t?this.zeroSlopeAtEnd?yt:gt:bt)},_scheduleFading:function(e,t,n){var r=this._mixer,i=r.time,o=this._weightInterpolant;null===o&&(o=r._lendControlInterpolant(),this._weightInterpolant=o);var a=o.parameterPositions,s=o.sampleValues;return a[0]=i,s[0]=t,a[1]=i+e,s[1]=n,this}}),Object.assign(Ss.prototype,r.prototype,{_bindAction:function(e,t){var n=e._localRoot||this._root,r=e._clip.tracks,i=r.length,o=e._propertyBindings,a=e._interpolants,s=n.uuid,c=this._bindingsByRootAndName,u=c[s];void 0===u&&(u={},c[s]=u);for(var l=0;l!==i;++l){var h=r[l],d=h.name,p=u[d];if(void 0!==p)o[l]=p;else{if(void 0!==(p=o[l])){null===p._cacheIndex&&(++p.referenceCount,this._addInactiveBinding(p,s,d));continue}var f=t&&t._propertyBindings[l].binding.parsedPath;++(p=new _s(Es.create(n,d,f),h.ValueTypeName,h.getValueSize())).referenceCount,this._addInactiveBinding(p,s,d),o[l]=p}a[l].resultBuffer=p.buffer}},_activateAction:function(e){if(!this._isActiveAction(e)){if(null===e._cacheIndex){var t=(e._localRoot||this._root).uuid,n=e._clip.uuid,r=this._actionsByClip[n];this._bindAction(e,r&&r.knownActions[0]),this._addInactiveAction(e,n,t)}for(var i=e._propertyBindings,o=0,a=i.length;o!==a;++o){var s=i[o];0==s.useCount++&&(this._lendBinding(s),s.saveOriginalState())}this._lendAction(e)}},_deactivateAction:function(e){if(this._isActiveAction(e)){for(var t=e._propertyBindings,n=0,r=t.length;n!==r;++n){var i=t[n];0==--i.useCount&&(i.restoreOriginalState(),this._takeBackBinding(i))}this._takeBackAction(e)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}},_isActiveAction:function(e){var t=e._cacheIndex;return null!==t&&t<this._nActiveActions},_addInactiveAction:function(e,t,n){var r=this._actions,i=this._actionsByClip,o=i[t];if(void 0===o)o={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,i[t]=o;else{var a=o.knownActions;e._byClipCacheIndex=a.length,a.push(e)}e._cacheIndex=r.length,r.push(e),o.actionByRoot[n]=e},_removeInactiveAction:function(e){var t=this._actions,n=t[t.length-1],r=e._cacheIndex;n._cacheIndex=r,t[r]=n,t.pop(),e._cacheIndex=null;var i=e._clip.uuid,o=this._actionsByClip,a=o[i],s=a.knownActions,c=s[s.length-1],u=e._byClipCacheIndex;c._byClipCacheIndex=u,s[u]=c,s.pop(),e._byClipCacheIndex=null,delete a.actionByRoot[(e._localRoot||this._root).uuid],0===s.length&&delete o[i],this._removeInactiveBindingsForAction(e)},_removeInactiveBindingsForAction:function(e){for(var t=e._propertyBindings,n=0,r=t.length;n!==r;++n){var i=t[n];0==--i.referenceCount&&this._removeInactiveBinding(i)}},_lendAction:function(e){var t=this._actions,n=e._cacheIndex,r=this._nActiveActions++,i=t[r];e._cacheIndex=r,t[r]=e,i._cacheIndex=n,t[n]=i},_takeBackAction:function(e){var t=this._actions,n=e._cacheIndex,r=--this._nActiveActions,i=t[r];e._cacheIndex=r,t[r]=e,i._cacheIndex=n,t[n]=i},_addInactiveBinding:function(e,t,n){var r=this._bindingsByRootAndName,i=r[t],o=this._bindings;void 0===i&&(i={},r[t]=i),i[n]=e,e._cacheIndex=o.length,o.push(e)},_removeInactiveBinding:function(e){var t=this._bindings,n=e.binding,r=n.rootNode.uuid,i=n.path,o=this._bindingsByRootAndName,a=o[r],s=t[t.length-1],c=e._cacheIndex;s._cacheIndex=c,t[c]=s,t.pop(),delete a[i];e:{for(var u in a)break e;delete o[r]}},_lendBinding:function(e){var t=this._bindings,n=e._cacheIndex,r=this._nActiveBindings++,i=t[r];e._cacheIndex=r,t[r]=e,i._cacheIndex=n,t[n]=i},_takeBackBinding:function(e){var t=this._bindings,n=e._cacheIndex,r=--this._nActiveBindings,i=t[r];e._cacheIndex=r,t[r]=e,i._cacheIndex=n,t[n]=i},_lendControlInterpolant:function(){var e=this._controlInterpolants,t=this._nActiveControlInterpolants++,n=e[t];return void 0===n&&((n=new ua(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer)).__cacheIndex=t,e[t]=n),n},_takeBackControlInterpolant:function(e){var t=this._controlInterpolants,n=e.__cacheIndex,r=--this._nActiveControlInterpolants,i=t[r];e.__cacheIndex=r,t[r]=e,i.__cacheIndex=n,t[n]=i},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(e,t){var n=t||this._root,r=n.uuid,i="string"==typeof e?xa.findByName(n,e):e,o=null!==i?i.uuid:e,a=this._actionsByClip[o],s=null;if(void 0!==a){var c=a.actionByRoot[r];if(void 0!==c)return c;s=a.knownActions[0],null===i&&(i=s._clip)}if(null===i)return null;var u=new Ts(this,i,t);return this._bindAction(u,s),this._addInactiveAction(u,o,r),u},existingAction:function(e,t){var n=t||this._root,r=n.uuid,i="string"==typeof e?xa.findByName(n,e):e,o=i?i.uuid:e,a=this._actionsByClip[o];return void 0!==a&&a.actionByRoot[r]||null},stopAllAction:function(){var e=this._actions,t=this._nActiveActions,n=this._bindings,r=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var i=0;i!==t;++i)e[i].reset();for(i=0;i!==r;++i)n[i].useCount=0;return this},update:function(e){e*=this.timeScale;for(var t=this._actions,n=this._nActiveActions,r=this.time+=e,i=Math.sign(e),o=this._accuIndex^=1,a=0;a!==n;++a){t[a]._update(r,e,i,o)}var s=this._bindings,c=this._nActiveBindings;for(a=0;a!==c;++a)s[a].apply(o);return this},getRoot:function(){return this._root},uncacheClip:function(e){var t=this._actions,n=e.uuid,r=this._actionsByClip,i=r[n];if(void 0!==i){for(var o=i.knownActions,a=0,s=o.length;a!==s;++a){var c=o[a];this._deactivateAction(c);var u=c._cacheIndex,l=t[t.length-1];c._cacheIndex=null,c._byClipCacheIndex=null,l._cacheIndex=u,t[u]=l,t.pop(),this._removeInactiveBindingsForAction(c)}delete r[n]}},uncacheRoot:function(e){var t=e.uuid,n=this._actionsByClip;for(var r in n){var i=n[r].actionByRoot[t];void 0!==i&&(this._deactivateAction(i),this._removeInactiveAction(i))}var o=this._bindingsByRootAndName[t];if(void 0!==o)for(var a in o){var s=o[a];s.restoreOriginalState(),this._removeInactiveBinding(s)}},uncacheAction:function(e,t){var n=this.existingAction(e,t);null!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}}),As.prototype.clone=function(){return new As(void 0===this.value.clone?this.value:this.value.clone())},Rs.prototype=Object.assign(Object.create(Fr.prototype),{constructor:Rs,isInstancedBufferGeometry:!0,copy:function(e){return Fr.prototype.copy.call(this,e),this.maxInstancedCount=e.maxInstancedCount,this},clone:function(){return(new this.constructor).copy(this)}}),Object.defineProperties(Ps.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}}}),Object.assign(Ps.prototype,{isInterleavedBufferAttribute:!0,setX:function(e,t){return this.data.array[e*this.data.stride+this.offset]=t,this},setY:function(e,t){return this.data.array[e*this.data.stride+this.offset+1]=t,this},setZ:function(e,t){return this.data.array[e*this.data.stride+this.offset+2]=t,this},setW:function(e,t){return this.data.array[e*this.data.stride+this.offset+3]=t,this},getX:function(e){return this.data.array[e*this.data.stride+this.offset]},getY:function(e){return this.data.array[e*this.data.stride+this.offset+1]},getZ:function(e){return this.data.array[e*this.data.stride+this.offset+2]},getW:function(e){return this.data.array[e*this.data.stride+this.offset+3]},setXY:function(e,t,n){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this},setXYZ:function(e,t,n,r){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=r,this},setXYZW:function(e,t,n,r,i){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=r,this.data.array[e+3]=i,this}}),Object.defineProperty(Ls.prototype,"needsUpdate",{set:function(e){!0===e&&this.version++}}),Object.assign(Ls.prototype,{isInterleavedBuffer:!0,setArray:function(e){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.count=void 0!==e?e.length/this.stride:0,this.array=e},setDynamic:function(e){return this.dynamic=e,this},copy:function(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.dynamic=e.dynamic,this},copyAt:function(e,t,n){e*=this.stride,n*=t.stride;for(var r=0,i=this.stride;r<i;r++)this.array[e+r]=t.array[n+r];return this},set:function(e,t){return void 0===t&&(t=0),this.array.set(e,t),this},clone:function(){return(new this.constructor).copy(this)},onUpload:function(e){return this.onUploadCallback=e,this}}),Cs.prototype=Object.assign(Object.create(Ls.prototype),{constructor:Cs,isInstancedInterleavedBuffer:!0,copy:function(e){return Ls.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this}}),Os.prototype=Object.assign(Object.create(br.prototype),{constructor:Os,isInstancedBufferAttribute:!0,copy:function(e){return br.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this}}),Object.assign(Is.prototype,{linePrecision:1,set:function(e,t){this.ray.set(e,t)},setFromCamera:function(e,t){t&&t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize()):t&&t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld)):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(e,t){var n=[];return Ds(e,this,n,t),n.sort(Ns),n},intersectObjects:function(e,t){var n=[];if(!1===Array.isArray(e))return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),n;for(var r=0,i=e.length;r<i;r++)Ds(e[r],this,n,t);return n.sort(Ns),n}}),Object.assign(Us.prototype,{start:function(){this.startTime=("undefined"==typeof performance?Date:performance).now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1,this.autoStart=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var e=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){var t=("undefined"==typeof performance?Date:performance).now();e=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=e}return e}}),Object.assign(ks.prototype,{set:function(e,t,n){return this.radius=e,this.phi=t,this.theta=n,this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this},makeSafe:function(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this},setFromVector3:function(e){return this.radius=e.length(),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e.x,e.z),this.phi=Math.acos(It.clamp(e.y/this.radius,-1,1))),this}}),Object.assign(Bs.prototype,{set:function(e,t,n){return this.radius=e,this.theta=t,this.y=n,this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.radius=e.radius,this.theta=e.theta,this.y=e.y,this},setFromVector3:function(e){return this.radius=Math.sqrt(e.x*e.x+e.z*e.z),this.theta=Math.atan2(e.x,e.z),this.y=e.y,this}}),Fs.prototype=Object.create(dr.prototype),Fs.prototype.constructor=Fs,Fs.prototype.isImmediateRenderObject=!0,js.prototype=Object.create(Ni.prototype),js.prototype.constructor=js,js.prototype.update=function(){var e=new kt,t=new kt,n=new Bt;return function(){var r=["a","b","c"];this.object.updateMatrixWorld(!0),n.getNormalMatrix(this.object.matrixWorld);var i=this.object.matrixWorld,o=this.geometry.attributes.position,a=this.object.geometry;if(a&&a.isGeometry)for(var s=a.vertices,c=a.faces,u=0,l=0,h=c.length;l<h;l++)for(var d=c[l],p=0,f=d.vertexNormals.length;p<f;p++){var m=s[d[r[p]]],v=d.vertexNormals[p];e.copy(m).applyMatrix4(i),t.copy(v).applyMatrix3(n).normalize().multiplyScalar(this.size).add(e),o.setXYZ(u,e.x,e.y,e.z),u+=1,o.setXYZ(u,t.x,t.y,t.z),u+=1}else if(a&&a.isBufferGeometry){var g=a.attributes.position,y=a.attributes.normal;for(u=0,p=0,f=g.count;p<f;p++)e.set(g.getX(p),g.getY(p),g.getZ(p)).applyMatrix4(i),t.set(y.getX(p),y.getY(p),y.getZ(p)),t.applyMatrix3(n).normalize().multiplyScalar(this.size).add(e),o.setXYZ(u,e.x,e.y,e.z),u+=1,o.setXYZ(u,t.x,t.y,t.z),u+=1}o.needsUpdate=!0}}(),zs.prototype=Object.create(dr.prototype),zs.prototype.constructor=zs,zs.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},zs.prototype.update=function(){var e=new kt,t=new kt;return function(){this.light.updateMatrixWorld();var n=this.light.distance?this.light.distance:1e3,r=n*Math.tan(this.light.angle);this.cone.scale.set(r,r,n),e.setFromMatrixPosition(this.light.matrixWorld),t.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(t.sub(e)),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}(),Gs.prototype=Object.create(Ni.prototype),Gs.prototype.constructor=Gs,Gs.prototype.updateMatrixWorld=function(){var e=new kt,t=new Dt,n=new Dt;return function(r){var i=this.bones,o=this.geometry,a=o.getAttribute("position");n.getInverse(this.root.matrixWorld);for(var s=0,c=0;s<i.length;s++){var u=i[s];u.parent&&u.parent.isBone&&(t.multiplyMatrices(n,u.matrixWorld),e.setFromMatrixPosition(t),a.setXYZ(c,e.x,e.y,e.z),t.multiplyMatrices(n,u.parent.matrixWorld),e.setFromMatrixPosition(t),a.setXYZ(c+1,e.x,e.y,e.z),c+=2)}o.getAttribute("position").needsUpdate=!0,dr.prototype.updateMatrixWorld.call(this,r)}}(),Vs.prototype=Object.create(Kr.prototype),Vs.prototype.constructor=Vs,Vs.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},Vs.prototype.update=function(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)},Hs.prototype=Object.create(dr.prototype),Hs.prototype.constructor=Hs,Hs.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},Hs.prototype.update=function(){var e=.5*this.light.width,t=.5*this.light.height,n=this.line.geometry.attributes.position,r=n.array;r[0]=e,r[1]=-t,r[2]=0,r[3]=e,r[4]=t,r[5]=0,r[6]=-e,r[7]=t,r[8]=0,r[9]=-e,r[10]=-t,r[11]=0,r[12]=e,r[13]=-t,r[14]=0,n.needsUpdate=!0,void 0!==this.color?this.line.material.color.set(this.color):this.line.material.color.copy(this.light.color)},Ws.prototype=Object.create(dr.prototype),Ws.prototype.constructor=Ws,Ws.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},Ws.prototype.update=function(){var e=new kt,t=new In,n=new In;return function(){var r=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{var i=r.geometry.getAttribute("color");t.copy(this.light.color),n.copy(this.light.groundColor);for(var o=0,a=i.count;o<a;o++){var s=o<a/2?t:n;i.setXYZ(o,s.r,s.g,s.b)}i.needsUpdate=!0}r.lookAt(e.setFromMatrixPosition(this.light.matrixWorld).negate())}}(),Xs.prototype=Object.create(Ni.prototype),Xs.prototype.constructor=Xs,qs.prototype=Object.create(Ni.prototype),qs.prototype.constructor=qs,Ys.prototype=Object.create(Ni.prototype),Ys.prototype.constructor=Ys,Ys.prototype.update=function(){var e=new kt,t=new kt,n=new Bt;return function(){this.object.updateMatrixWorld(!0),n.getNormalMatrix(this.object.matrixWorld);for(var r=this.object.matrixWorld,i=this.geometry.attributes.position,o=this.object.geometry,a=o.vertices,s=o.faces,c=0,u=0,l=s.length;u<l;u++){var h=s[u],d=h.normal;e.copy(a[h.a]).add(a[h.b]).add(a[h.c]).divideScalar(3).applyMatrix4(r),t.copy(d).applyMatrix3(n).normalize().multiplyScalar(this.size).add(e),i.setXYZ(c,e.x,e.y,e.z),c+=1,i.setXYZ(c,t.x,t.y,t.z),c+=1}i.needsUpdate=!0}}(),Ks.prototype=Object.create(dr.prototype),Ks.prototype.constructor=Ks,Ks.prototype.dispose=function(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()},Ks.prototype.update=function(){var e=new kt,t=new kt,n=new kt;return function(){e.setFromMatrixPosition(this.light.matrixWorld),t.setFromMatrixPosition(this.light.target.matrixWorld),n.subVectors(t,e),this.lightPlane.lookAt(n),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(n),this.targetLine.scale.z=n.length()}}(),Zs.prototype=Object.create(Ni.prototype),Zs.prototype.constructor=Zs,Zs.prototype.update=function(){var e,t,n=new kt,r=new pr;function i(i,o,a,s){n.set(o,a,s).unproject(r);var c=t[i];if(void 0!==c)for(var u=e.getAttribute("position"),l=0,h=c.length;l<h;l++)u.setXYZ(c[l],n.x,n.y,n.z)}return function(){e=this.geometry,t=this.pointMap;r.projectionMatrix.copy(this.camera.projectionMatrix),i("c",0,0,-1),i("t",0,0,1),i("n1",-1,-1,-1),i("n2",1,-1,-1),i("n3",-1,1,-1),i("n4",1,1,-1),i("f1",-1,-1,1),i("f2",1,-1,1),i("f3",-1,1,1),i("f4",1,1,1),i("u1",.7,1.1,-1),i("u2",-.7,1.1,-1),i("u3",0,2,-1),i("cf1",-1,0,1),i("cf2",1,0,1),i("cf3",0,-1,1),i("cf4",0,1,1),i("cn1",-1,0,-1),i("cn2",1,0,-1),i("cn3",0,-1,-1),i("cn4",0,1,-1),e.getAttribute("position").needsUpdate=!0}}(),Qs.prototype=Object.create(Ni.prototype),Qs.prototype.constructor=Qs,Qs.prototype.update=function(){var e=new $n;return function(t){if(void 0!==t&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&e.setFromObject(this.object),!e.isEmpty()){var n=e.min,r=e.max,i=this.geometry.attributes.position,o=i.array;o[0]=r.x,o[1]=r.y,o[2]=r.z,o[3]=n.x,o[4]=r.y,o[5]=r.z,o[6]=n.x,o[7]=n.y,o[8]=r.z,o[9]=r.x,o[10]=n.y,o[11]=r.z,o[12]=r.x,o[13]=r.y,o[14]=n.z,o[15]=n.x,o[16]=r.y,o[17]=n.z,o[18]=n.x,o[19]=n.y,o[20]=n.z,o[21]=r.x,o[22]=n.y,o[23]=n.z,i.needsUpdate=!0,this.geometry.computeBoundingSphere()}}}(),Qs.prototype.setFromObject=function(e){return this.object=e,this.update(),this},Js.prototype=Object.create(Ni.prototype),Js.prototype.constructor=Js,Js.prototype.updateMatrixWorld=function(e){var t=this.box;t.isEmpty()||(t.getCenter(this.position),t.getSize(this.scale),this.scale.multiplyScalar(.5),dr.prototype.updateMatrixWorld.call(this,e))},$s.prototype=Object.create(Ii.prototype),$s.prototype.constructor=$s,$s.prototype.updateMatrixWorld=function(e){var t=-this.plane.constant;Math.abs(t)<1e-8&&(t=1e-8),this.scale.set(.5*this.size,.5*this.size,t),this.lookAt(this.plane.normal),dr.prototype.updateMatrixWorld.call(this,e)},ec.prototype=Object.create(dr.prototype),ec.prototype.constructor=ec,ec.prototype.setDirection=(ds=new kt,function(e){e.y>.99999?this.quaternion.set(0,0,0,1):e.y<-.99999?this.quaternion.set(1,0,0,0):(ds.set(e.z,0,-e.x).normalize(),hs=Math.acos(e.y),this.quaternion.setFromAxisAngle(ds,hs))}),ec.prototype.setLength=function(e,t,n){void 0===t&&(t=.2*e),void 0===n&&(n=.2*t),this.line.scale.set(1,Math.max(0,e-t),1),this.line.updateMatrix(),this.cone.scale.set(n,t,n),this.cone.position.y=e,this.cone.updateMatrix()},ec.prototype.setColor=function(e){this.line.material.color.copy(e),this.cone.material.color.copy(e)},tc.prototype=Object.create(Ni.prototype),tc.prototype.constructor=tc;var rc=new kt,ic=new nc,oc=new nc,ac=new nc;function sc(e,t,n,r){ka.call(this),this.type="CatmullRomCurve3",this.points=e||[],this.closed=t||!1,this.curveType=n||"centripetal",this.tension=r||.5}function cc(e,t,n,r){ka.call(this),this.type="CubicBezierCurve3",this.v0=e||new kt,this.v1=t||new kt,this.v2=n||new kt,this.v3=r||new kt}function uc(e,t,n){ka.call(this),this.type="QuadraticBezierCurve3",this.v0=e||new kt,this.v1=t||new kt,this.v2=n||new kt}function lc(e,t){ka.call(this),this.type="LineCurve3",this.v1=e||new kt,this.v2=t||new kt}function hc(e,t,n,r,i,o){ja.call(this,e,t,n,n,r,i,o),this.type="ArcCurve"}sc.prototype=Object.create(ka.prototype),sc.prototype.constructor=sc,sc.prototype.isCatmullRomCurve3=!0,sc.prototype.getPoint=function(e,t){var n,r,i,o,a=t||new kt,s=this.points,c=s.length,u=(c-(this.closed?0:1))*e,l=Math.floor(u),h=u-l;if(this.closed?l+=l>0?0:(Math.floor(Math.abs(l)/s.length)+1)*s.length:0===h&&l===c-1&&(l=c-2,h=1),this.closed||l>0?n=s[(l-1)%c]:(rc.subVectors(s[0],s[1]).add(s[0]),n=rc),r=s[l%c],i=s[(l+1)%c],this.closed||l+2<c?o=s[(l+2)%c]:(rc.subVectors(s[c-1],s[c-2]).add(s[c-1]),o=rc),"centripetal"===this.curveType||"chordal"===this.curveType){var d="chordal"===this.curveType?.5:.25,p=Math.pow(n.distanceToSquared(r),d),f=Math.pow(r.distanceToSquared(i),d),m=Math.pow(i.distanceToSquared(o),d);f<1e-4&&(f=1),p<1e-4&&(p=f),m<1e-4&&(m=f),ic.initNonuniformCatmullRom(n.x,r.x,i.x,o.x,p,f,m),oc.initNonuniformCatmullRom(n.y,r.y,i.y,o.y,p,f,m),ac.initNonuniformCatmullRom(n.z,r.z,i.z,o.z,p,f,m)}else"catmullrom"===this.curveType&&(ic.initCatmullRom(n.x,r.x,i.x,o.x,this.tension),oc.initCatmullRom(n.y,r.y,i.y,o.y,this.tension),ac.initCatmullRom(n.z,r.z,i.z,o.z,this.tension));return a.set(ic.calc(h),oc.calc(h),ac.calc(h)),a},sc.prototype.copy=function(e){ka.prototype.copy.call(this,e),this.points=[];for(var t=0,n=e.points.length;t<n;t++){var r=e.points[t];this.points.push(r.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this},cc.prototype=Object.create(ka.prototype),cc.prototype.constructor=cc,cc.prototype.isCubicBezierCurve3=!0,cc.prototype.getPoint=function(e,t){var n=t||new kt,r=this.v0,i=this.v1,o=this.v2,a=this.v3;return n.set(Ua(e,r.x,i.x,o.x,a.x),Ua(e,r.y,i.y,o.y,a.y),Ua(e,r.z,i.z,o.z,a.z)),n},cc.prototype.copy=function(e){return ka.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this},uc.prototype=Object.create(ka.prototype),uc.prototype.constructor=uc,uc.prototype.isQuadraticBezierCurve3=!0,uc.prototype.getPoint=function(e,t){var n=t||new kt,r=this.v0,i=this.v1,o=this.v2;return n.set(Da(e,r.x,i.x,o.x),Da(e,r.y,i.y,o.y),Da(e,r.z,i.z,o.z)),n},uc.prototype.copy=function(e){return ka.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this},lc.prototype=Object.create(ka.prototype),lc.prototype.constructor=lc,lc.prototype.isLineCurve3=!0,lc.prototype.getPoint=function(e,t){var n=t||new kt;return 1===e?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n},lc.prototype.getPointAt=function(e,t){return this.getPoint(e,t)},lc.prototype.copy=function(e){return ka.prototype.copy.call(this,e),this.v1.copy(e.v1),this.v2.copy(e.v2),this},hc.prototype=Object.create(ja.prototype),hc.prototype.constructor=hc,hc.prototype.isArcCurve=!0;var dc={createMultiMaterialObject:function(e,t){for(var n=new Bi,r=0,i=t.length;r<i;r++)n.add(new Kr(e,t[r]));return n},detach:function(e,t,n){e.applyMatrix(t.matrixWorld),t.remove(e),n.add(e)},attach:function(e,t,n){e.applyMatrix((new Dt).getInverse(n.matrixWorld)),t.remove(e),n.add(e)}};function pc(e,t,n,r,i,o,a){return console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead."),new mr(e,t,n,i,o,a)}var fc=0,mc=1;function vc(e){return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."),e}function gc(e){return void 0===e&&(e=[]),console.warn("THREE.MultiMaterial has been removed. Use an Array instead."),e.isMultiMaterial=!0,e.materials=e,e.clone=function(){return e.slice()},e}function yc(e,t){return console.warn("THREE.PointCloud has been renamed to THREE.Points."),new ki(e,t)}function bc(e){return console.warn("THREE.Particle has been renamed to THREE.Sprite."),new Ai(e)}function xc(e,t){return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),new ki(e,t)}function _c(e){return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),new Ui(e)}function wc(e){return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),new Ui(e)}function Ec(e){return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),new Ui(e)}function Mc(e,t,n){return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),new kt(e,t,n)}function Tc(e,t){return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead."),new br(e,t).setDynamic(!0)}function Sc(e,t){return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."),new xr(e,t)}function Ac(e,t){return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."),new _r(e,t)}function Rc(e,t){return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."),new wr(e,t)}function Pc(e,t){return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."),new Er(e,t)}function Lc(e,t){return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."),new Mr(e,t)}function Cc(e,t){return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."),new Tr(e,t)}function Oc(e,t){return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."),new Sr(e,t)}function Ic(e,t){return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."),new Ar(e,t)}function Nc(e,t){return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."),new Rr(e,t)}function Dc(e){console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),sc.call(this,e),this.type="catmullrom",this.closed=!0}function Uc(e){console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),sc.call(this,e),this.type="catmullrom"}function kc(e){console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."),sc.call(this,e),this.type="catmullrom"}function Bc(e){return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."),new tc(e)}function Fc(e,t){return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."),new Qs(e,t)}function jc(e,t){return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."),new Ni(new _o(e.geometry),new Oi({color:void 0!==t?t:16777215}))}function zc(e,t){return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."),new Ni(new Gi(e.geometry),new Oi({color:void 0!==t?t:16777215}))}function Gc(e){return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."),new Vo(e)}function Vc(e){return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."),new Wo(e)}ka.create=function(e,t){return console.log("THREE.Curve.create() has been deprecated"),e.prototype=Object.create(ka.prototype),e.prototype.constructor=e,e.prototype.getPoint=t,e},Object.assign(Fa.prototype,{createPointsGeometry:function(e){console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var t=this.getPoints(e);return this.createGeometry(t)},createSpacedPointsGeometry:function(e){console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var t=this.getSpacedPoints(e);return this.createGeometry(t)},createGeometry:function(e){console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");for(var t=new yr,n=0,r=e.length;n<r;n++){var i=e[n];t.vertices.push(new kt(i.x,i.y,i.z||0))}return t}}),Object.assign(Xa.prototype,{fromPoints:function(e){console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(e)}}),Dc.prototype=Object.create(sc.prototype),Uc.prototype=Object.create(sc.prototype),kc.prototype=Object.create(sc.prototype),Object.assign(kc.prototype,{initFromArray:function(){console.error("THREE.Spline: .initFromArray() has been removed.")},getControlPointsArray:function(){console.error("THREE.Spline: .getControlPointsArray() has been removed.")},reparametrizeByArcLength:function(){console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")}}),Xs.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},Gs.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Object.assign(Bn.prototype,{center:function(e){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(e)},empty:function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(e){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},size:function(e){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(e)}}),Object.assign($n.prototype,{center:function(e){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(e)},empty:function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(e){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},isIntersectionSphere:function(e){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)},size:function(e){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(e)}}),qr.prototype.center=function(e){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(e)},Object.assign(It,{random16:function(){return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."),Math.random()},nearestPowerOfTwo:function(e){return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."),It.floorPowerOfTwo(e)},nextPowerOfTwo:function(e){return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."),It.ceilPowerOfTwo(e)}}),Object.assign(Bt.prototype,{flattenToArrayOffset:function(e,t){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(e,t)},multiplyVector3:function(e){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),e.applyMatrix3(this)},multiplyVector3Array:function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},applyToBuffer:function(e){return console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(e)},applyToVector3Array:function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")}}),Object.assign(Dt.prototype,{extractPosition:function(e){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(e)},flattenToArrayOffset:function(e,t){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(e,t)},getPosition:function(){var e;return function(){return void 0===e&&(e=new kt),console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),e.setFromMatrixColumn(this,3)}}(),setRotationFromQuaternion:function(e){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(e)},multiplyToArray:function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},multiplyVector3:function(e){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},multiplyVector4:function(e){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},multiplyVector3Array:function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},rotateAxis:function(e){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),e.transformDirection(this)},crossVector:function(e){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},translate:function(){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},applyToBuffer:function(e){return console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(e)},applyToVector3Array:function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},makeFrustum:function(e,t,n,r,i,o){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(e,t,r,n,i,o)}}),tr.prototype.isIntersectionLine=function(e){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(e)},Ut.prototype.multiplyVector3=function(e){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),e.applyQuaternion(this)},Object.assign(Xr.prototype,{isIntersectionBox:function(e){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},isIntersectionPlane:function(e){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(e)},isIntersectionSphere:function(e){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)}}),Object.assign(qa.prototype,{extractAllPoints:function(e){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(e)},extrude:function(e){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new co(this,e)},makeGeometry:function(e){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new bo(this,e)}}),Object.assign(Nt.prototype,{fromAttribute:function(e,t,n){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,n)},distanceToManhattan:function(e){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(e)},lengthManhattan:function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(kt.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(e){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(e)},getScaleFromMatrix:function(e){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(e)},getColumnFromMatrix:function(e,t){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(t,e)},applyProjection:function(e){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(e)},fromAttribute:function(e,t,n){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,n)},distanceToManhattan:function(e){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(e)},lengthManhattan:function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(zt.prototype,{fromAttribute:function(e,t,n){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,n)},lengthManhattan:function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),yr.prototype.computeTangents=function(){console.warn("THREE.Geometry: .computeTangents() has been removed.")},Object.assign(dr.prototype,{getChildByName:function(e){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(e)},renderDepth:function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(e,t){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(t,e)}}),Object.defineProperties(dr.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(e){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=e}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),Object.defineProperties(Ri.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}}),Object.defineProperty(Pi.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}}),Object.defineProperty(ka.prototype,"__arcLengthDivisions",{get:function(){return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions},set:function(e){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions=e}}),yi.prototype.setLens=function(e,t){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==t&&(this.filmGauge=t),this.setFocalLength(e)},Object.defineProperties(Ko.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(e){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=e}},shadowCameraLeft:{set:function(e){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=e}},shadowCameraRight:{set:function(e){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=e}},shadowCameraTop:{set:function(e){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=e}},shadowCameraBottom:{set:function(e){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=e}},shadowCameraNear:{set:function(e){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=e}},shadowCameraFar:{set:function(e){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=e}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(e){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=e}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(e){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=e}},shadowMapHeight:{set:function(e){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=e}}}),Object.defineProperties(br.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}}}),Object.assign(Fr.prototype,{addIndex:function(e){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(e)},addDrawCall:function(e,t,n){void 0!==n&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(e,t)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")}}),Object.defineProperties(Fr.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Object.defineProperties(As.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this}}}),Object.defineProperties(Zn.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new In}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(e){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=e===L}}}),Object.defineProperties(Io.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}}),Object.defineProperties(Wr.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(e){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=e}}}),Object.assign(_i.prototype,{getCurrentRenderTarget:function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},getMaxAnisotropy:function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},getPrecision:function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},resetGLState:function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},supportsFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(e){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(e)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")}}),Object.defineProperties(_i.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=e}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=e}},shadowMapCullFace:{get:function(){return this.shadowMap.cullFace},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace."),this.shadowMap.cullFace=e}}}),Object.defineProperties(rr.prototype,{cullFace:{get:function(){return this.renderReverseSided?x:b},set:function(e){var t=e!==b;console.warn("WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to "+t+"."),this.renderReverseSided=t}}}),Object.defineProperties(Gt.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=e}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=e}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=e}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=e}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(e){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=e}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(e){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=e}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(e){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=e}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(e){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=e}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(e){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=e}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(e){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=e}}}),ys.prototype.load=function(e){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");var t=this;return(new fs).load(e,function(e){t.setBuffer(e)}),this},xs.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},vs.prototype.updateCubeMap=function(e,t){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(e,t)};var Hc={merge:function(e,t,n){var r;console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead."),t.isMesh&&(t.matrixAutoUpdate&&t.updateMatrix(),r=t.matrix,t=t.geometry),e.merge(t,r,n)},center:function(e){return console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead."),e.center()}},Wc={crossOrigin:void 0,loadTexture:function(e,t,n,r){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var i=new Yo;i.setCrossOrigin(this.crossOrigin);var o=i.load(e,n,void 0,r);return t&&(o.mapping=t),o},loadTextureCube:function(e,t,n,r){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var i=new qo;i.setCrossOrigin(this.crossOrigin);var o=i.load(e,n,void 0,r);return t&&(o.mapping=t),o},loadCompressedTexture:function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},loadCompressedTextureCube:function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")}};function Xc(){console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js."),this.projectVector=function(e,t){console.warn("THREE.Projector: .projectVector() is now vector.project()."),e.project(t)},this.unprojectVector=function(e,t){console.warn("THREE.Projector: .unprojectVector() is now vector.unproject()."),e.unproject(t)},this.pickingRay=function(){console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().")}}function qc(){console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js"),this.domElement=document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),this.clear=function(){},this.render=function(){},this.setClearColor=function(){},this.setSize=function(){}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2);Object.keys(r).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return r[e]}})});var i=n(38);Object.keys(i).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return i[e]}})});var o=n(18);Object.keys(o).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return o[e]}})});var a=n(35);Object.keys(a).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return a[e]}})});var s=n(17);Object.keys(s).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return s[e]}})});var c=n(14);Object.keys(c).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return c[e]}})});var u=n(15);Object.keys(u).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return u[e]}})});var l=n(5);Object.keys(l).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return l[e]}})});var h=n(34);Object.keys(h).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return h[e]}})});var d=n(33);Object.keys(d).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return d[e]}})});var p=n(3);Object.keys(p).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return p[e]}})});var f=n(32);Object.keys(f).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return f[e]}})});var m=n(13);Object.keys(m).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return m[e]}})});var v=n(31);Object.keys(v).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return v[e]}})});var g=n(7);Object.keys(g).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return g[e]}})});var y=n(16);Object.keys(y).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return y[e]}})});var b=n(12);Object.keys(b).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return b[e]}})});var x=n(30);Object.keys(x).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return x[e]}})});var _=n(29);Object.keys(_).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return _[e]}})});var w=n(28);Object.keys(w).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return w[e]}})});var E=n(27);Object.keys(E).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return E[e]}})});var M=n(26);Object.keys(M).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return M[e]}})});var T=n(25);Object.keys(T).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return T[e]}})});var S=n(24);Object.keys(S).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return S[e]}})});var A=n(23);Object.keys(A).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return A[e]}})});var R=n(22);Object.keys(R).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return R[e]}})});var P=n(6);Object.keys(P).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return P[e]}})});var L=n(21);Object.keys(L).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return L[e]}})});var C=n(11);Object.keys(C).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return C[e]}})});var O=n(20);Object.keys(O).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return O[e]}})});var I=n(10);Object.keys(I).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return I[e]}})});var N=n(9);Object.keys(N).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return N[e]}})});var D=n(8);Object.keys(D).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return D[e]}})});var U=n(1);Object.keys(U).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return U[e]}})});var k=n(19);Object.keys(k).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return k[e]}})})},function(e,t,n){e.exports=n(40)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,